define(['dart_sdk', 'packages/image/src/util/input_buffer.dart', 'packages/image/src/formats/png/png_info.dart', 'packages/image/src/image_exception.dart', 'packages/image/src/formats/png/png_frame.dart', 'packages/image/src/color.dart', 'packages/image/src/image.dart', 'packages/archive/src/zlib_decoder.dart', 'packages/image/src/icc_profile_data.dart', 'packages/image/src/animation.dart', 'packages/image/src/transform/copy_into.dart', 'packages/archive/src/util/crc32.dart', 'packages/image/src/formats/decoder.dart', 'packages/image/src/formats/decode_info.dart'], (function load__packages__image__src__formats__png_decoder_dart(dart_sdk, packages__image__src__util__input_buffer$46dart, packages__image__src__formats__png__png_info$46dart, packages__image__src__image_exception$46dart, packages__image__src__formats__png__png_frame$46dart, packages__image__src__color$46dart, packages__image__src__image$46dart, packages__archive__src__zlib_decoder$46dart, packages__image__src__icc_profile_data$46dart, packages__image__src__animation$46dart, packages__image__src__transform__copy_into$46dart, packages__archive__src__util__crc32$46dart, packages__image__src__formats__decoder$46dart, packages__image__src__formats__decode_info$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _interceptors = dart_sdk._interceptors;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const input_buffer = packages__image__src__util__input_buffer$46dart.src__util__input_buffer;
  const png_info = packages__image__src__formats__png__png_info$46dart.src__formats__png__png_info;
  const image_exception = packages__image__src__image_exception$46dart.src__image_exception;
  const png_frame = packages__image__src__formats__png__png_frame$46dart.src__formats__png__png_frame;
  const color = packages__image__src__color$46dart.src__color;
  const image$ = packages__image__src__image$46dart.src__image;
  const zlib_decoder = packages__archive__src__zlib_decoder$46dart.src__zlib_decoder;
  const icc_profile_data = packages__image__src__icc_profile_data$46dart.src__icc_profile_data;
  const animation = packages__image__src__animation$46dart.src__animation;
  const copy_into = packages__image__src__transform__copy_into$46dart.src__transform__copy_into;
  const crc32 = packages__archive__src__util__crc32$46dart.src__util__crc32;
  const decoder = packages__image__src__formats__decoder$46dart.src__formats__decoder;
  const decode_info = packages__image__src__formats__decode_info$46dart.src__formats__decode_info;
  var png_decoder = Object.create(dart.library);
  var $_get = dartx._get;
  var $contains = dartx.contains;
  var $add = dartx.add;
  var $last = dartx.last;
  var $length = dartx.length;
  var $addAll = dartx.addAll;
  var $_set = dartx._set;
  var $rightShift = dartx['>>'];
  var $abs = dartx.abs;
  var $codeUnits = dartx.codeUnits;
  var $leftShift = dartx['<<'];
  var intL = () => (intL = dart.constFn(dart.legacy(core.int)))();
  var JSArrayOfintL = () => (JSArrayOfintL = dart.constFn(_interceptors.JSArray$(intL())))();
  var InternalPngFrameL = () => (InternalPngFrameL = dart.constFn(dart.legacy(png_frame.InternalPngFrame)))();
  var ListOfintL = () => (ListOfintL = dart.constFn(core.List$(intL())))();
  var ListLOfintL = () => (ListLOfintL = dart.constFn(dart.legacy(ListOfintL())))();
  var JSArrayOfListLOfintL = () => (JSArrayOfListLOfintL = dart.constFn(_interceptors.JSArray$(ListLOfintL())))();
  const CT = Object.create(null);
  var L0 = "package:image/src/formats/png_decoder.dart";
  dart.defineLazy(CT, {
    get C0() {
      return C0 = dart.constList([137, 80, 78, 71, 13, 10, 26, 10], intL());
    }
  }, false);
  var _info = dart.privateName(png_decoder, "_info");
  var _bitBuffer = dart.privateName(png_decoder, "_bitBuffer");
  var _bitBufferLen = dart.privateName(png_decoder, "_bitBufferLen");
  var _input = dart.privateName(png_decoder, "_input");
  var _progressY = dart.privateName(png_decoder, "_progressY");
  var C0;
  var _crc = dart.privateName(png_decoder, "_crc");
  var _resetBits = dart.privateName(png_decoder, "_resetBits");
  var _processPass = dart.privateName(png_decoder, "_processPass");
  var _process = dart.privateName(png_decoder, "_process");
  var _unfilter = dart.privateName(png_decoder, "_unfilter");
  var _readPixel = dart.privateName(png_decoder, "_readPixel");
  var _getColor = dart.privateName(png_decoder, "_getColor");
  var _convert16to8 = dart.privateName(png_decoder, "_convert16to8");
  var _convert1to8 = dart.privateName(png_decoder, "_convert1to8");
  var _convert2to8 = dart.privateName(png_decoder, "_convert2to8");
  var _convert4to8 = dart.privateName(png_decoder, "_convert4to8");
  var _readBits = dart.privateName(png_decoder, "_readBits");
  png_decoder.PngDecoder = class PngDecoder extends decoder.Decoder {
    isValidFile(data) {
      let input = new input_buffer.InputBuffer.new(data, {bigEndian: true});
      let pngHeader = input.readBytes(8);
      let PNG_HEADER = C0 || CT.C0;
      for (let i = 0; i < 8; i = i + 1) {
        if (pngHeader._get(i) != PNG_HEADER[$_get](i)) {
          return false;
        }
      }
      return true;
    }
    get info() {
      return this[_info];
    }
    startDecode(data) {
      this[_input] = new input_buffer.InputBuffer.new(data, {bigEndian: true});
      let pngHeader = this[_input].readBytes(8);
      let PNG_HEADER = C0 || CT.C0;
      for (let i = 0; i < 8; i = i + 1) {
        if (pngHeader._get(i) != PNG_HEADER[$_get](i)) {
          return null;
        }
      }
      while (true) {
        let inputPos = this[_input].position;
        let chunkSize = this[_input].readUint32();
        let chunkType = this[_input].readString(4);
        switch (chunkType) {
          case "IHDR":
          {
            let hdr = new input_buffer.InputBuffer.from(this[_input].readBytes(chunkSize));
            let hdrBytes = hdr.toUint8List();
            this[_info] = new png_info.InternalPngInfo.new();
            this[_info].width = hdr.readUint32();
            this[_info].height = hdr.readUint32();
            this[_info].bits = hdr.readByte();
            this[_info].colorType = hdr.readByte();
            this[_info].compressionMethod = hdr.readByte();
            this[_info].filterMethod = hdr.readByte();
            this[_info].interlaceMethod = hdr.readByte();
            if (!dart.test(JSArrayOfintL().of([0, 2, 3, 4, 6])[$contains](this[_info].colorType))) {
              return null;
            }
            if (this[_info].filterMethod !== 0) {
              return null;
            }
            switch (this[_info].colorType) {
              case 0:
              {
                if (!dart.test(JSArrayOfintL().of([1, 2, 4, 8, 16])[$contains](this[_info].bits))) {
                  return null;
                }
                break;
              }
              case 2:
              {
                if (!dart.test(JSArrayOfintL().of([8, 16])[$contains](this[_info].bits))) {
                  return null;
                }
                break;
              }
              case 3:
              {
                if (!dart.test(JSArrayOfintL().of([1, 2, 4, 8])[$contains](this[_info].bits))) {
                  return null;
                }
                break;
              }
              case 4:
              {
                if (!dart.test(JSArrayOfintL().of([8, 16])[$contains](this[_info].bits))) {
                  return null;
                }
                break;
              }
              case 6:
              {
                if (!dart.test(JSArrayOfintL().of([8, 16])[$contains](this[_info].bits))) {
                  return null;
                }
                break;
              }
            }
            let crc = this[_input].readUint32();
            let computedCrc = this[_crc](chunkType, hdrBytes);
            if (crc != computedCrc) {
              dart.throw(new image_exception.ImageException.new("Invalid " + dart.str(chunkType) + " checksum"));
            }
            break;
          }
          case "PLTE":
          {
            this[_info].palette = this[_input].readBytes(chunkSize).toUint8List();
            let crc = this[_input].readUint32();
            let computedCrc = this[_crc](chunkType, this[_info].palette);
            if (crc != computedCrc) {
              dart.throw(new image_exception.ImageException.new("Invalid " + dart.str(chunkType) + " checksum"));
            }
            break;
          }
          case "tRNS":
          {
            this[_info].transparency = this[_input].readBytes(chunkSize).toUint8List();
            let crc = this[_input].readUint32();
            let computedCrc = this[_crc](chunkType, this[_info].transparency);
            if (crc != computedCrc) {
              dart.throw(new image_exception.ImageException.new("Invalid " + dart.str(chunkType) + " checksum"));
            }
            break;
          }
          case "IEND":
          {
            this[_input].skip(4);
            break;
          }
          case "gAMA":
          {
            if (chunkSize !== 4) {
              dart.throw(new image_exception.ImageException.new("Invalid gAMA chunk"));
            }
            let gammaInt = this[_input].readUint32();
            this[_input].skip(4);
            if (gammaInt !== 100000) {
              this[_info].gamma = dart.notNull(gammaInt) / 100000.0;
            }
            break;
          }
          case "IDAT":
          {
            this[_info].idat[$add](inputPos);
            this[_input].skip(chunkSize);
            this[_input].skip(4);
            break;
          }
          case "acTL":
          {
            this[_info].numFrames = this[_input].readUint32();
            this[_info].repeat = this[_input].readUint32();
            this[_input].skip(4);
            break;
          }
          case "fcTL":
          {
            let frame = new png_frame.InternalPngFrame.new();
            this[_info].frames[$add](frame);
            frame.sequenceNumber = this[_input].readUint32();
            frame.width = this[_input].readUint32();
            frame.height = this[_input].readUint32();
            frame.xOffset = this[_input].readUint32();
            frame.yOffset = this[_input].readUint32();
            frame.delayNum = this[_input].readUint16();
            frame.delayDen = this[_input].readUint16();
            frame.dispose = this[_input].readByte();
            frame.blend = this[_input].readByte();
            this[_input].skip(4);
            break;
          }
          case "fdAT":
          {
            this[_input].readUint32();
            let frame = InternalPngFrameL().as(this[_info].frames[$last]);
            frame.fdat[$add](inputPos);
            this[_input].skip(dart.notNull(chunkSize) - 4);
            this[_input].skip(4);
            break;
          }
          case "bKGD":
          {
            if (this[_info].colorType === 3) {
              let paletteIndex = this[_input].readByte();
              chunkSize = dart.notNull(chunkSize) - 1;
              let p3 = dart.notNull(paletteIndex) * 3;
              let r = this[_info].palette[$_get](p3);
              let g = this[_info].palette[$_get](p3 + 1);
              let b = this[_info].palette[$_get](p3 + 2);
              this[_info].backgroundColor = color.Color.fromRgb(r, g, b);
            } else if (this[_info].colorType === 0 || this[_info].colorType === 4) {
              this[_input].readUint16();
              chunkSize = dart.notNull(chunkSize) - 2;
            } else if (this[_info].colorType === 2 || this[_info].colorType === 6) {
              this[_input].readUint16();
              this[_input].readUint16();
              this[_input].readUint16();
              chunkSize = dart.notNull(chunkSize) - 24;
            }
            if (dart.notNull(chunkSize) > 0) {
              this[_input].skip(chunkSize);
            }
            this[_input].skip(4);
            break;
          }
          case "iCCP":
          {
            this[_info].iCCPName = this[_input].readString();
            this[_info].iCCPCompression = this[_input].readByte();
            chunkSize = dart.notNull(chunkSize) - (this[_info].iCCPName.length + 2);
            let profile = this[_input].readBytes(chunkSize);
            this[_info].iCCPData = profile.toUint8List();
            this[_input].skip(4);
            break;
          }
          default:
          {
            this[_input].skip(chunkSize);
            this[_input].skip(4);
            break;
          }
        }
        if (chunkType === "IEND") {
          break;
        }
        if (dart.test(this[_input].isEOS)) {
          return null;
        }
      }
      return this[_info];
    }
    numFrames() {
      return this[_info] != null ? this[_info].numFrames : 0;
    }
    decodeFrame(frame) {
      if (this[_info] == null) {
        return null;
      }
      let imageData = JSArrayOfintL().of([]);
      let width = this[_info].width;
      let height = this[_info].height;
      if (!dart.test(this[_info].isAnimated) || frame === 0) {
        for (let i = 0, len = this[_info].idat[$length]; i < dart.notNull(len); i = i + 1) {
          this[_input].offset = this[_info].idat[$_get](i);
          let chunkSize = this[_input].readUint32();
          let chunkType = this[_input].readString(4);
          let data = this[_input].readBytes(chunkSize).toUint8List();
          imageData[$addAll](data);
          let crc = this[_input].readUint32();
          let computedCrc = this[_crc](chunkType, data);
          if (crc != computedCrc) {
            dart.throw(new image_exception.ImageException.new("Invalid " + dart.str(chunkType) + " checksum"));
          }
        }
      } else {
        if (dart.notNull(frame) < 0 || dart.notNull(frame) >= dart.notNull(this[_info].frames[$length])) {
          dart.throw(new image_exception.ImageException.new("Invalid Frame Number: " + dart.str(frame)));
        }
        let f = InternalPngFrameL().as(this[_info].frames[$_get](frame));
        width = f.width;
        height = f.height;
        for (let i = 0; i < dart.notNull(f.fdat[$length]); i = i + 1) {
          this[_input].offset = f.fdat[$_get](i);
          let chunkSize = this[_input].readUint32();
          this[_input].readString(4);
          this[_input].skip(4);
          let data = this[_input].readBytes(chunkSize).toUint8List();
          imageData[$addAll](data);
        }
      }
      let channels = null;
      if (this[_info].colorType === 4 || this[_info].colorType === 6 || this[_info].transparency != null) {
        channels = image$.Channels.rgba;
      } else {
        channels = image$.Channels.rgb;
      }
      let image = new image$.Image.new(width, height, {channels: channels});
      let uncompressed = new zlib_decoder.ZLibDecoder.new().decodeBytes(imageData);
      let input = new input_buffer.InputBuffer.new(uncompressed, {bigEndian: true});
      this[_resetBits]();
      if (this[_info].colorLut == null) {
        this[_info].colorLut = ListOfintL().new(256);
        for (let i = 0; i < 256; i = i + 1) {
          let c = i;
          this[_info].colorLut[$_set](i, c);
        }
        if (this[_info].palette != null && this[_info].gamma != null) {
          for (let i = 0; i < dart.notNull(this[_info].palette[$length]); i = i + 1) {
            this[_info].palette[$_set](i, this[_info].colorLut[$_get](this[_info].palette[$_get](i)));
          }
        }
      }
      let origW = this[_info].width;
      let origH = this[_info].height;
      this[_info].width = width;
      this[_info].height = height;
      let w = width;
      let h = height;
      this[_progressY] = 0;
      if (this[_info].interlaceMethod !== 0) {
        this[_processPass](input, image, 0, 0, 8, 8, (dart.notNull(w) + 7)[$rightShift](3), (dart.notNull(h) + 7)[$rightShift](3));
        this[_processPass](input, image, 4, 0, 8, 8, (dart.notNull(w) + 3)[$rightShift](3), (dart.notNull(h) + 7)[$rightShift](3));
        this[_processPass](input, image, 0, 4, 4, 8, (dart.notNull(w) + 3)[$rightShift](2), (dart.notNull(h) + 3)[$rightShift](3));
        this[_processPass](input, image, 2, 0, 4, 4, (dart.notNull(w) + 1)[$rightShift](2), (dart.notNull(h) + 3)[$rightShift](2));
        this[_processPass](input, image, 0, 2, 2, 4, (dart.notNull(w) + 1)[$rightShift](1), (dart.notNull(h) + 1)[$rightShift](2));
        this[_processPass](input, image, 1, 0, 2, 2, w[$rightShift](1), (dart.notNull(h) + 1)[$rightShift](1));
        this[_processPass](input, image, 0, 1, 1, 2, w, h[$rightShift](1));
      } else {
        this[_process](input, image);
      }
      this[_info].width = origW;
      this[_info].height = origH;
      image.iccProfile = new icc_profile_data.ICCProfileData.new(this[_info].iCCPName, icc_profile_data.ICCPCompression.deflate, this[_info].iCCPData);
      return image;
    }
    decodeImage(data, opts) {
      let frame = opts && 'frame' in opts ? opts.frame : 0;
      if (this.startDecode(data) == null) {
        return null;
      }
      return this.decodeFrame(frame);
    }
    decodeAnimation(data) {
      if (this.startDecode(data) == null) {
        return null;
      }
      let anim = new animation.Animation.new();
      anim.width = this[_info].width;
      anim.height = this[_info].height;
      if (!dart.test(this[_info].isAnimated)) {
        let image = this.decodeFrame(0);
        anim.addFrame(image);
        return anim;
      }
      let dispose = 1;
      let lastImage = new image$.Image.new(this[_info].width, this[_info].height);
      for (let i = 0; i < dart.notNull(this[_info].numFrames); i = i + 1) {
        if (lastImage == null) {
          lastImage = new image$.Image.new(this[_info].width, this[_info].height);
        } else {
          lastImage = new image$.Image.from(lastImage);
        }
        let frame = this[_info].frames[$_get](i);
        let image = this.decodeFrame(i);
        if (image == null) {
          continue;
        }
        if (lastImage != null) {
          if (dispose === 1 || dispose === 2) {
            lastImage.fill(this[_info].backgroundColor);
          }
          copy_into.copyInto(lastImage, image, {dstX: frame.xOffset, dstY: frame.yOffset, blend: frame.blend === 1});
        } else {
          lastImage = image;
        }
        anim.addFrame(lastImage);
        dispose = frame.dispose;
      }
      return anim;
    }
    [_processPass](input, image, xOffset, yOffset, xStep, yStep, passWidth, passHeight) {
      let channels = this[_info].colorType === 4 ? 2 : this[_info].colorType === 2 ? 3 : this[_info].colorType === 6 ? 4 : 1;
      let pixelDepth = channels * dart.notNull(this[_info].bits);
      let bpp = (pixelDepth + 7)[$rightShift](3);
      let rowBytes = (pixelDepth * dart.notNull(passWidth) + 7)[$rightShift](3);
      let line = ListOfintL().filled(rowBytes, 0);
      let inData = JSArrayOfListLOfintL().of([line, line]);
      let pixel = JSArrayOfintL().of([0, 0, 0, 0]);
      for (let srcY = 0, dstY = yOffset, ri = 0; srcY < dart.notNull(passHeight); srcY = srcY + 1, dstY = dart.notNull(dstY) + dart.notNull(yStep), ri = 1 - ri, this[_progressY] = dart.notNull(this[_progressY]) + 1) {
        let filterType = input.readByte();
        inData[$_set](ri, input.readBytes(rowBytes).toUint8List());
        let row = inData[$_get](ri);
        let prevRow = inData[$_get](1 - ri);
        this[_unfilter](filterType, bpp, row, prevRow);
        this[_resetBits]();
        let rowInput = new input_buffer.InputBuffer.new(row, {bigEndian: true});
        let blockHeight = xStep;
        let blockWidth = dart.notNull(xStep) - dart.notNull(xOffset);
        for (let srcX = 0, dstX = xOffset; srcX < dart.notNull(passWidth); srcX = srcX + 1, dstX = dart.notNull(dstX) + dart.notNull(xStep)) {
          this[_readPixel](rowInput, pixel);
          let c = this[_getColor](pixel);
          image.setPixel(dstX, dstY, c);
          if (blockWidth > 1 || dart.notNull(blockHeight) > 1) {
            for (let i = 0; i < dart.notNull(blockHeight); i = i + 1) {
              for (let j = 0; j < blockWidth; j = j + 1) {
                image.setPixelSafe(dart.notNull(dstX) + j, dart.notNull(dstY) + j, c);
              }
            }
          }
        }
      }
    }
    [_process](input, image) {
      let t0;
      let channels = this[_info].colorType === 4 ? 2 : this[_info].colorType === 2 ? 3 : this[_info].colorType === 6 ? 4 : 1;
      let pixelDepth = channels * dart.notNull(this[_info].bits);
      let w = this[_info].width;
      let h = this[_info].height;
      let rowBytes = (dart.notNull(w) * pixelDepth + 7)[$rightShift](3);
      let bpp = (pixelDepth + 7)[$rightShift](3);
      let line = ListOfintL().filled(rowBytes, 0);
      let inData = JSArrayOfListLOfintL().of([line, line]);
      let pixel = JSArrayOfintL().of([0, 0, 0, 0]);
      for (let y = 0, pi = 0, ri = 0; y < dart.notNull(h); y = y + 1, ri = 1 - ri) {
        let filterType = input.readByte();
        inData[$_set](ri, input.readBytes(rowBytes).toUint8List());
        let row = inData[$_get](ri);
        let prevRow = inData[$_get](1 - ri);
        this[_unfilter](filterType, bpp, row, prevRow);
        this[_resetBits]();
        let rowInput = new input_buffer.InputBuffer.new(inData[$_get](ri), {bigEndian: true});
        for (let x = 0; x < dart.notNull(w); x = x + 1) {
          this[_readPixel](rowInput, pixel);
          image._set((t0 = pi, pi = t0 + 1, t0), this[_getColor](pixel));
        }
      }
    }
    [_unfilter](filterType, bpp, row, prevRow) {
      let rowBytes = row[$length];
      switch (filterType) {
        case 0:
        {
          break;
        }
        case 1:
        {
          for (let x = bpp; dart.notNull(x) < dart.notNull(rowBytes); x = dart.notNull(x) + 1) {
            row[$_set](x, dart.notNull(row[$_get](x)) + dart.notNull(row[$_get](dart.notNull(x) - dart.notNull(bpp))) & 255);
          }
          break;
        }
        case 2:
        {
          for (let x = 0; x < dart.notNull(rowBytes); x = x + 1) {
            row[$_set](x, dart.notNull(row[$_get](x)) + dart.notNull(prevRow[$_get](x)) & 255);
          }
          break;
        }
        case 3:
        {
          for (let x = 0; x < dart.notNull(rowBytes); x = x + 1) {
            let a = x < dart.notNull(bpp) ? 0 : row[$_get](x - dart.notNull(bpp));
            let b = prevRow[$_get](x);
            row[$_set](x, dart.notNull(row[$_get](x)) + (dart.notNull(a) + dart.notNull(b))[$rightShift](1) & 255);
          }
          break;
        }
        case 4:
        {
          for (let x = 0; x < dart.notNull(rowBytes); x = x + 1) {
            let a = x < dart.notNull(bpp) ? 0 : row[$_get](x - dart.notNull(bpp));
            let b = prevRow[$_get](x);
            let c = x < dart.notNull(bpp) ? 0 : prevRow[$_get](x - dart.notNull(bpp));
            let p = dart.notNull(a) + dart.notNull(b) - dart.notNull(c);
            let pa = (p - dart.notNull(a))[$abs]();
            let pb = (p - dart.notNull(b))[$abs]();
            let pc = (p - dart.notNull(c))[$abs]();
            let paeth = 0;
            if (pa <= pb && pa <= pc) {
              paeth = a;
            } else if (pb <= pc) {
              paeth = b;
            } else {
              paeth = c;
            }
            row[$_set](x, dart.notNull(row[$_get](x)) + dart.notNull(paeth) & 255);
          }
          break;
        }
        default:
        {
          dart.throw(new image_exception.ImageException.new("Invalid filter value: " + dart.str(filterType)));
        }
      }
    }
    [_convert16to8](c) {
      return c[$rightShift](8);
    }
    [_convert1to8](c) {
      return c === 0 ? 0 : 255;
    }
    [_convert2to8](c) {
      return dart.notNull(c) * 85;
    }
    [_convert4to8](c) {
      return dart.notNull(c) << 4 >>> 0;
    }
    [_crc](type, bytes) {
      let crc = crc32.getCrc32(type[$codeUnits]);
      return crc32.getCrc32(bytes, crc);
    }
    [_resetBits]() {
      this[_bitBuffer] = 0;
      this[_bitBufferLen] = 0;
    }
    [_readBits](input, numBits) {
      if (numBits === 0) {
        return 0;
      }
      if (numBits === 8) {
        return input.readByte();
      }
      if (numBits === 16) {
        return input.readUint16();
      }
      while (dart.notNull(this[_bitBufferLen]) < dart.notNull(numBits)) {
        if (dart.test(input.isEOS)) {
          dart.throw(new image_exception.ImageException.new("Invalid PNG data."));
        }
        let octet = input.readByte();
        this[_bitBuffer] = octet[$leftShift](this[_bitBufferLen]);
        this[_bitBufferLen] = dart.notNull(this[_bitBufferLen]) + 8;
      }
      let mask = numBits === 1 ? 1 : numBits === 2 ? 3 : numBits === 4 ? 15 : numBits === 8 ? 255 : numBits === 16 ? 65535 : 0;
      let octet = (this[_bitBuffer][$rightShift](dart.notNull(this[_bitBufferLen]) - dart.notNull(numBits)) & mask) >>> 0;
      this[_bitBufferLen] = dart.notNull(this[_bitBufferLen]) - dart.notNull(numBits);
      return octet;
    }
    [_readPixel](input, pixel) {
      switch (this[_info].colorType) {
        case 0:
        {
          pixel[$_set](0, this[_readBits](input, this[_info].bits));
          return;
        }
        case 2:
        {
          pixel[$_set](0, this[_readBits](input, this[_info].bits));
          pixel[$_set](1, this[_readBits](input, this[_info].bits));
          pixel[$_set](2, this[_readBits](input, this[_info].bits));
          return;
        }
        case 3:
        {
          pixel[$_set](0, this[_readBits](input, this[_info].bits));
          return;
        }
        case 4:
        {
          pixel[$_set](0, this[_readBits](input, this[_info].bits));
          pixel[$_set](1, this[_readBits](input, this[_info].bits));
          return;
        }
        case 6:
        {
          pixel[$_set](0, this[_readBits](input, this[_info].bits));
          pixel[$_set](1, this[_readBits](input, this[_info].bits));
          pixel[$_set](2, this[_readBits](input, this[_info].bits));
          pixel[$_set](3, this[_readBits](input, this[_info].bits));
          return;
        }
      }
      dart.throw(new image_exception.ImageException.new("Invalid color type: " + dart.str(this[_info].colorType) + "."));
    }
    [_getColor](raw) {
      switch (this[_info].colorType) {
        case 0:
        {
          let g = null;
          switch (this[_info].bits) {
            case 1:
            {
              g = this[_convert1to8](raw[$_get](0));
              break;
            }
            case 2:
            {
              g = this[_convert2to8](raw[$_get](0));
              break;
            }
            case 4:
            {
              g = this[_convert4to8](raw[$_get](0));
              break;
            }
            case 8:
            {
              g = raw[$_get](0);
              break;
            }
            case 16:
            {
              g = this[_convert16to8](raw[$_get](0));
              break;
            }
          }
          g = this[_info].colorLut[$_get](g);
          if (this[_info].transparency != null) {
            let a = ((dart.notNull(this[_info].transparency[$_get](0)) & 255) << 24 | dart.notNull(this[_info].transparency[$_get](1)) & 255) >>> 0;
            if (raw[$_get](0) === a) {
              return color.getColor(g, g, g, 0);
            }
          }
          return color.getColor(g, g, g, 255);
        }
        case 2:
        {
          let r = null;
          let g = null;
          let b = null;
          switch (this[_info].bits) {
            case 1:
            {
              r = this[_convert1to8](raw[$_get](0));
              g = this[_convert1to8](raw[$_get](1));
              b = this[_convert1to8](raw[$_get](2));
              break;
            }
            case 2:
            {
              r = this[_convert2to8](raw[$_get](0));
              g = this[_convert2to8](raw[$_get](1));
              b = this[_convert2to8](raw[$_get](2));
              break;
            }
            case 4:
            {
              r = this[_convert4to8](raw[$_get](0));
              g = this[_convert4to8](raw[$_get](1));
              b = this[_convert4to8](raw[$_get](2));
              break;
            }
            case 8:
            {
              r = raw[$_get](0);
              g = raw[$_get](1);
              b = raw[$_get](2);
              break;
            }
            case 16:
            {
              r = this[_convert16to8](raw[$_get](0));
              g = this[_convert16to8](raw[$_get](1));
              b = this[_convert16to8](raw[$_get](2));
              break;
            }
          }
          r = this[_info].colorLut[$_get](r);
          g = this[_info].colorLut[$_get](g);
          b = this[_info].colorLut[$_get](b);
          if (this[_info].transparency != null) {
            let tr = (dart.notNull(this[_info].transparency[$_get](0)) & 255) << 8 | dart.notNull(this[_info].transparency[$_get](1)) & 255;
            let tg = (dart.notNull(this[_info].transparency[$_get](2)) & 255) << 8 | dart.notNull(this[_info].transparency[$_get](3)) & 255;
            let tb = (dart.notNull(this[_info].transparency[$_get](4)) & 255) << 8 | dart.notNull(this[_info].transparency[$_get](5)) & 255;
            if (raw[$_get](0) === tr && raw[$_get](1) === tg && raw[$_get](2) === tb) {
              return color.getColor(r, g, b, 0);
            }
          }
          return color.getColor(r, g, b, 255);
        }
        case 3:
        {
          let p = dart.notNull(raw[$_get](0)) * 3;
          let a = this[_info].transparency != null && dart.notNull(raw[$_get](0)) < dart.notNull(this[_info].transparency[$length]) ? this[_info].transparency[$_get](raw[$_get](0)) : 255;
          if (p >= dart.notNull(this[_info].palette[$length])) {
            return color.getColor(255, 255, 255, a);
          }
          let r = this[_info].palette[$_get](p);
          let g = this[_info].palette[$_get](p + 1);
          let b = this[_info].palette[$_get](p + 2);
          return color.getColor(r, g, b, a);
        }
        case 4:
        {
          let g = null;
          let a = null;
          switch (this[_info].bits) {
            case 1:
            {
              g = this[_convert1to8](raw[$_get](0));
              a = this[_convert1to8](raw[$_get](1));
              break;
            }
            case 2:
            {
              g = this[_convert2to8](raw[$_get](0));
              a = this[_convert2to8](raw[$_get](1));
              break;
            }
            case 4:
            {
              g = this[_convert4to8](raw[$_get](0));
              a = this[_convert4to8](raw[$_get](1));
              break;
            }
            case 8:
            {
              g = raw[$_get](0);
              a = raw[$_get](1);
              break;
            }
            case 16:
            {
              g = this[_convert16to8](raw[$_get](0));
              a = this[_convert16to8](raw[$_get](1));
              break;
            }
          }
          g = this[_info].colorLut[$_get](g);
          return color.getColor(g, g, g, a);
        }
        case 6:
        {
          let r = null;
          let g = null;
          let b = null;
          let a = null;
          switch (this[_info].bits) {
            case 1:
            {
              r = this[_convert1to8](raw[$_get](0));
              g = this[_convert1to8](raw[$_get](1));
              b = this[_convert1to8](raw[$_get](2));
              a = this[_convert1to8](raw[$_get](3));
              break;
            }
            case 2:
            {
              r = this[_convert2to8](raw[$_get](0));
              g = this[_convert2to8](raw[$_get](1));
              b = this[_convert2to8](raw[$_get](2));
              a = this[_convert2to8](raw[$_get](3));
              break;
            }
            case 4:
            {
              r = this[_convert4to8](raw[$_get](0));
              g = this[_convert4to8](raw[$_get](1));
              b = this[_convert4to8](raw[$_get](2));
              a = this[_convert4to8](raw[$_get](3));
              break;
            }
            case 8:
            {
              r = raw[$_get](0);
              g = raw[$_get](1);
              b = raw[$_get](2);
              a = raw[$_get](3);
              break;
            }
            case 16:
            {
              r = this[_convert16to8](raw[$_get](0));
              g = this[_convert16to8](raw[$_get](1));
              b = this[_convert16to8](raw[$_get](2));
              a = this[_convert16to8](raw[$_get](3));
              break;
            }
          }
          r = this[_info].colorLut[$_get](r);
          g = this[_info].colorLut[$_get](g);
          b = this[_info].colorLut[$_get](b);
          return color.getColor(r, g, b, a);
        }
      }
      dart.throw(new image_exception.ImageException.new("Invalid color type: " + dart.str(this[_info].colorType) + "."));
    }
  };
  (png_decoder.PngDecoder.new = function() {
    this[_info] = null;
    this[_bitBuffer] = 0;
    this[_bitBufferLen] = 0;
    this[_input] = null;
    this[_progressY] = null;
    ;
  }).prototype = png_decoder.PngDecoder.prototype;
  dart.addTypeTests(png_decoder.PngDecoder);
  dart.addTypeCaches(png_decoder.PngDecoder);
  dart.setMethodSignature(png_decoder.PngDecoder, () => ({
    __proto__: dart.getMethods(png_decoder.PngDecoder.__proto__),
    isValidFile: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.List$(dart.legacy(core.int)))]),
    startDecode: dart.fnType(dart.legacy(decode_info.DecodeInfo), [dart.legacy(core.List$(dart.legacy(core.int)))]),
    numFrames: dart.fnType(dart.legacy(core.int), []),
    decodeFrame: dart.fnType(dart.legacy(image$.Image), [dart.legacy(core.int)]),
    decodeImage: dart.fnType(dart.legacy(image$.Image), [dart.legacy(core.List$(dart.legacy(core.int)))], {frame: dart.legacy(core.int)}, {}),
    decodeAnimation: dart.fnType(dart.legacy(animation.Animation), [dart.legacy(core.List$(dart.legacy(core.int)))]),
    [_processPass]: dart.fnType(dart.void, [dart.legacy(input_buffer.InputBuffer), dart.legacy(image$.Image), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int)]),
    [_process]: dart.fnType(dart.void, [dart.legacy(input_buffer.InputBuffer), dart.legacy(image$.Image)]),
    [_unfilter]: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.List$(dart.legacy(core.int))), dart.legacy(core.List$(dart.legacy(core.int)))]),
    [_convert16to8]: dart.fnType(dart.legacy(core.int), [dart.legacy(core.int)]),
    [_convert1to8]: dart.fnType(dart.legacy(core.int), [dart.legacy(core.int)]),
    [_convert2to8]: dart.fnType(dart.legacy(core.int), [dart.legacy(core.int)]),
    [_convert4to8]: dart.fnType(dart.legacy(core.int), [dart.legacy(core.int)]),
    [_crc]: dart.fnType(dart.legacy(core.int), [dart.legacy(core.String), dart.legacy(core.List$(dart.legacy(core.int)))]),
    [_resetBits]: dart.fnType(dart.void, []),
    [_readBits]: dart.fnType(dart.legacy(core.int), [dart.legacy(input_buffer.InputBuffer), dart.legacy(core.int)]),
    [_readPixel]: dart.fnType(dart.void, [dart.legacy(input_buffer.InputBuffer), dart.legacy(core.List$(dart.legacy(core.int)))]),
    [_getColor]: dart.fnType(dart.legacy(core.int), [dart.legacy(core.List$(dart.legacy(core.int)))])
  }));
  dart.setGetterSignature(png_decoder.PngDecoder, () => ({
    __proto__: dart.getGetters(png_decoder.PngDecoder.__proto__),
    info: dart.legacy(png_info.PngInfo)
  }));
  dart.setLibraryUri(png_decoder.PngDecoder, L0);
  dart.setFieldSignature(png_decoder.PngDecoder, () => ({
    __proto__: dart.getFields(png_decoder.PngDecoder.__proto__),
    [_info]: dart.fieldType(dart.legacy(png_info.InternalPngInfo)),
    [_bitBuffer]: dart.fieldType(dart.legacy(core.int)),
    [_bitBufferLen]: dart.fieldType(dart.legacy(core.int)),
    [_input]: dart.fieldType(dart.legacy(input_buffer.InputBuffer)),
    [_progressY]: dart.fieldType(dart.legacy(core.int))
  }));
  dart.defineLazy(png_decoder.PngDecoder, {
    /*png_decoder.PngDecoder.GRAYSCALE*/get GRAYSCALE() {
      return 0;
    },
    /*png_decoder.PngDecoder.RGB*/get RGB() {
      return 2;
    },
    /*png_decoder.PngDecoder.INDEXED*/get INDEXED() {
      return 3;
    },
    /*png_decoder.PngDecoder.GRAYSCALE_ALPHA*/get GRAYSCALE_ALPHA() {
      return 4;
    },
    /*png_decoder.PngDecoder.RGBA*/get RGBA() {
      return 6;
    },
    /*png_decoder.PngDecoder.FILTER_NONE*/get FILTER_NONE() {
      return 0;
    },
    /*png_decoder.PngDecoder.FILTER_SUB*/get FILTER_SUB() {
      return 1;
    },
    /*png_decoder.PngDecoder.FILTER_UP*/get FILTER_UP() {
      return 2;
    },
    /*png_decoder.PngDecoder.FILTER_AVERAGE*/get FILTER_AVERAGE() {
      return 3;
    },
    /*png_decoder.PngDecoder.FILTER_PAETH*/get FILTER_PAETH() {
      return 4;
    }
  }, true);
  dart.trackLibraries("packages/image/src/formats/png_decoder.dart", {
    "package:image/src/formats/png_decoder.dart": png_decoder
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["png_decoder.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../packages/image/src/formats/png_decoder.dart.lib.js"}');
  // Exports:
  return {
    src__formats__png_decoder: png_decoder
  };
}));

//# sourceMappingURL=png_decoder.dart.lib.js.map
