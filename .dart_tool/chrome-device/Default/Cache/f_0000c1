define(['dart_sdk', 'packages/image/src/hdr/half.dart', 'packages/image/src/image.dart'], (function load__packages__image__src__hdr__hdr_slice_dart(dart_sdk, packages__image__src__hdr__half$46dart, packages__image__src__image$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _native_typed_data = dart_sdk._native_typed_data;
  const typed_data = dart_sdk.typed_data;
  const _js_helper = dart_sdk._js_helper;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const half = packages__image__src__hdr__half$46dart.src__hdr__half;
  const image = packages__image__src__image$46dart.src__image;
  var hdr_slice = Object.create(dart.library);
  var hdr_image = Object.create(dart.library);
  var $_get = dartx._get;
  var $keys = dartx.keys;
  var $isEmpty = dartx.isEmpty;
  var $first = dartx.first;
  var $values = dartx.values;
  var $length = dartx.length;
  var $containsKey = dartx.containsKey;
  var $_set = dartx._set;
  var ByteBufferL = () => (ByteBufferL = dart.constFn(dart.legacy(typed_data.ByteBuffer)))();
  var intL = () => (intL = dart.constFn(dart.legacy(core.int)))();
  var doubleL = () => (doubleL = dart.constFn(dart.legacy(core.double)))();
  var StringL = () => (StringL = dart.constFn(dart.legacy(core.String)))();
  var HdrSliceL = () => (HdrSliceL = dart.constFn(dart.legacy(hdr_slice.HdrSlice)))();
  var IdentityMapOfStringL$HdrSliceL = () => (IdentityMapOfStringL$HdrSliceL = dart.constFn(_js_helper.IdentityMap$(StringL(), HdrSliceL())))();
  const CT = Object.create(null);
  var L0 = "package:image/src/hdr/hdr_slice.dart";
  var L1 = "package:image/src/hdr/hdr_image.dart";
  dart.defineLazy(CT, {
    get C0() {
      return C0 = dart.constList(["R", "G", "B", "A"], StringL());
    }
  }, false);
  var _maxIntSize = dart.privateName(hdr_slice, "_maxIntSize");
  var name$ = dart.privateName(hdr_slice, "HdrSlice.name");
  var width$ = dart.privateName(hdr_slice, "HdrSlice.width");
  var height$ = dart.privateName(hdr_slice, "HdrSlice.height");
  var type$ = dart.privateName(hdr_slice, "HdrSlice.type");
  var bitsPerSample$ = dart.privateName(hdr_slice, "HdrSlice.bitsPerSample");
  var data = dart.privateName(hdr_slice, "HdrSlice.data");
  hdr_slice.HdrSlice = class HdrSlice extends core.Object {
    get name() {
      return this[name$];
    }
    set name(value) {
      super.name = value;
    }
    get width() {
      return this[width$];
    }
    set width(value) {
      super.width = value;
    }
    get height() {
      return this[height$];
    }
    set height(value) {
      super.height = value;
    }
    get type() {
      return this[type$];
    }
    set type(value) {
      super.type = value;
    }
    get bitsPerSample() {
      return this[bitsPerSample$];
    }
    set bitsPerSample(value) {
      super.bitsPerSample = value;
    }
    get data() {
      return this[data];
    }
    set data(value) {
      super.data = value;
    }
    static allocateDataForType(size, type, bitsPerSample) {
      switch (type) {
        case 1:
        {
          if (bitsPerSample === 8) {
            return _native_typed_data.NativeInt8List.new(size);
          } else if (bitsPerSample === 16) {
            return _native_typed_data.NativeInt16List.new(size);
          } else if (bitsPerSample === 32) {
            return _native_typed_data.NativeInt32List.new(size);
          }
          break;
        }
        case 0:
        {
          if (bitsPerSample === 8) {
            return _native_typed_data.NativeUint8List.new(size);
          } else if (bitsPerSample === 16) {
            return _native_typed_data.NativeUint16List.new(size);
          } else if (bitsPerSample === 32) {
            return _native_typed_data.NativeUint32List.new(size);
          }
          break;
        }
        case 3:
        {
          if (bitsPerSample === 16) {
            return _native_typed_data.NativeUint16List.new(size);
          } else if (bitsPerSample === 32) {
            return _native_typed_data.NativeFloat32List.new(size);
          } else if (bitsPerSample === 64) {
            return _native_typed_data.NativeFloat64List.new(size);
          }
          break;
        }
      }
      return null;
    }
    getBytes() {
      return typed_data.Uint8List.view(ByteBufferL().as(dart.dload(this.data, 'buffer')));
    }
    get isFloat() {
      return this.type === 3;
    }
    get [_maxIntSize]() {
      let v = this.bitsPerSample === 8 ? 255 : this.bitsPerSample === 16 ? 65535 : 4294967295;
      if (this.type === 1) {
        v = v - 1;
      }
      return v;
    }
    getFloat(x, y) {
      let pi = dart.notNull(y) * dart.notNull(this.width) + dart.notNull(x);
      if (this.type === 1 || this.type === 0) {
        return dart.notNull(intL().as(dart.dsend(this.data, '_get', [pi]))) / dart.notNull(this[_maxIntSize]);
      }
      let s = this.type === 3 && this.bitsPerSample === 16 ? half.Half.HalfToDouble(intL().as(dart.dsend(this.data, '_get', [pi]))) : doubleL().as(dart.dsend(this.data, '_get', [pi]));
      return s;
    }
    setFloat(x, y, v) {
      if (this.type !== 3) {
        return;
      }
      let pi = dart.notNull(y) * dart.notNull(this.width) + dart.notNull(x);
      if (this.bitsPerSample === 16) {
        dart.dsend(this.data, '_set', [pi, half.Half.DoubleToHalf(v)]);
      } else {
        dart.dsend(this.data, '_set', [pi, v]);
      }
    }
    getInt(x, y) {
      let pi = dart.notNull(y) * dart.notNull(this.width) + dart.notNull(x);
      return intL().as(dart.dsend(this.data, '_get', [pi]));
    }
    setInt(x, y, v) {
      let pi = dart.notNull(y) * dart.notNull(this.width) + dart.notNull(x);
      dart.dsend(this.data, '_set', [pi, v]);
    }
  };
  (hdr_slice.HdrSlice.new = function(name, width, height, type, bitsPerSample) {
    this[name$] = name;
    this[width$] = width;
    this[height$] = height;
    this[type$] = type;
    this[bitsPerSample$] = bitsPerSample;
    this[data] = hdr_slice.HdrSlice.allocateDataForType(dart.notNull(width) * dart.notNull(height), type, bitsPerSample);
    ;
  }).prototype = hdr_slice.HdrSlice.prototype;
  (hdr_slice.HdrSlice.from = function(other) {
    this[name$] = other.name;
    this[width$] = other.width;
    this[height$] = other.height;
    this[type$] = other.type;
    this[bitsPerSample$] = other.bitsPerSample;
    this[data] = dart.dsend(other.data, 'sublist', [0]);
    ;
  }).prototype = hdr_slice.HdrSlice.prototype;
  dart.addTypeTests(hdr_slice.HdrSlice);
  dart.addTypeCaches(hdr_slice.HdrSlice);
  dart.setMethodSignature(hdr_slice.HdrSlice, () => ({
    __proto__: dart.getMethods(hdr_slice.HdrSlice.__proto__),
    getBytes: dart.fnType(dart.legacy(typed_data.Uint8List), []),
    getFloat: dart.fnType(dart.legacy(core.double), [dart.legacy(core.int), dart.legacy(core.int)]),
    setFloat: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.num)]),
    getInt: dart.fnType(dart.legacy(core.int), [dart.legacy(core.int), dart.legacy(core.int)]),
    setInt: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int)])
  }));
  dart.setGetterSignature(hdr_slice.HdrSlice, () => ({
    __proto__: dart.getGetters(hdr_slice.HdrSlice.__proto__),
    isFloat: dart.legacy(core.bool),
    [_maxIntSize]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(hdr_slice.HdrSlice, L0);
  dart.setFieldSignature(hdr_slice.HdrSlice, () => ({
    __proto__: dart.getFields(hdr_slice.HdrSlice.__proto__),
    name: dart.finalFieldType(dart.legacy(core.String)),
    width: dart.finalFieldType(dart.legacy(core.int)),
    height: dart.finalFieldType(dart.legacy(core.int)),
    type: dart.finalFieldType(dart.legacy(core.int)),
    bitsPerSample: dart.finalFieldType(dart.legacy(core.int)),
    data: dart.finalFieldType(dart.dynamic)
  }));
  var C0;
  var slices = dart.privateName(hdr_image, "HdrImage.slices");
  var red = dart.privateName(hdr_image, "HdrImage.red");
  var green = dart.privateName(hdr_image, "HdrImage.green");
  var blue = dart.privateName(hdr_image, "HdrImage.blue");
  var alpha = dart.privateName(hdr_image, "HdrImage.alpha");
  var depth = dart.privateName(hdr_image, "HdrImage.depth");
  hdr_image.HdrImage = class HdrImage extends core.Object {
    get slices() {
      return this[slices];
    }
    set slices(value) {
      super.slices = value;
    }
    get red() {
      return this[red];
    }
    set red(value) {
      this[red] = value;
    }
    get green() {
      return this[green];
    }
    set green(value) {
      this[green] = value;
    }
    get blue() {
      return this[blue];
    }
    set blue(value) {
      this[blue] = value;
    }
    get alpha() {
      return this[alpha];
    }
    set alpha(value) {
      this[alpha] = value;
    }
    get depth() {
      return this[depth];
    }
    set depth(value) {
      this[depth] = value;
    }
    get hasColor() {
      return this.red != null || this.green != null || this.blue != null;
    }
    get hasAlpha() {
      return this.alpha != null;
    }
    get hasDepth() {
      return this.depth != null;
    }
    get width() {
      return dart.test(this.slices[$isEmpty]) ? 0 : this.slices[$values][$first].width;
    }
    get height() {
      return dart.test(this.slices[$isEmpty]) ? 0 : this.slices[$values][$first].height;
    }
    getRed(x, y) {
      return this.red != null ? dart.test(this.red.isFloat) ? this.red.getFloat(x, y) : this.red.getInt(x, y) : 0;
    }
    setRed(x, y, c) {
      if (this.red != null) {
        if (dart.test(this.red.isFloat)) {
          this.red.setFloat(x, y, c);
        } else {
          this.red.setInt(x, y, dart.asNullableInt(c));
        }
      }
    }
    setRedInt(x, y, c) {
      if (this.red != null) {
        this.red.setInt(x, y, c);
      }
    }
    getGreen(x, y) {
      return this.green != null ? dart.test(this.green.isFloat) ? this.green.getFloat(x, y) : this.green.getInt(x, y) : 0;
    }
    setGreen(x, y, c) {
      if (this.green != null) {
        if (dart.test(this.red.isFloat)) {
          this.green.setFloat(x, y, c);
        } else {
          this.green.setInt(x, y, dart.asNullableInt(c));
        }
      }
    }
    setGreenInt(x, y, c) {
      if (this.green != null) {
        this.green.setInt(x, y, c);
      }
    }
    getBlue(x, y) {
      return this.blue != null ? dart.test(this.blue.isFloat) ? this.blue.getFloat(x, y) : this.blue.getInt(x, y) : 0;
    }
    setBlue(x, y, c) {
      if (this.green != null) {
        if (dart.test(this.blue.isFloat)) {
          this.blue.setFloat(x, y, c);
        } else {
          this.blue.setInt(x, y, dart.asNullableInt(c));
        }
      }
    }
    setBlueInt(x, y, c) {
      if (this.blue != null) {
        this.blue.setInt(x, y, c);
      }
    }
    getAlpha(x, y) {
      return this.alpha != null ? dart.test(this.alpha.isFloat) ? this.alpha.getFloat(x, y) : this.alpha.getInt(x, y) : 0;
    }
    setAlpha(x, y, c) {
      if (this.alpha != null) {
        if (dart.test(this.alpha.isFloat)) {
          this.alpha.setFloat(x, y, c);
        } else {
          this.alpha.setInt(x, y, dart.asNullableInt(c));
        }
      }
    }
    setAlphaInt(x, y, c) {
      if (this.alpha != null) {
        this.alpha.setInt(x, y, c);
      }
    }
    getDepth(x, y) {
      return this.depth != null ? dart.test(this.depth.isFloat) ? this.depth.getFloat(x, y) : this.depth.getInt(x, y) : 0;
    }
    setDepth(x, y, c) {
      if (this.depth != null) {
        if (dart.test(this.depth.isFloat)) {
          this.depth.setFloat(x, y, c);
        } else {
          this.depth.setInt(x, y, dart.asNullableInt(c));
        }
      }
    }
    get bitsPerSample() {
      return this.red != null ? this.red.bitsPerSample : dart.test(this.slices[$isEmpty]) ? 0 : this.slices[$_get](this.slices[$keys][$first]).bitsPerSample;
    }
    get sampleFormat() {
      return this.red != null ? this.red.type : dart.test(this.slices[$isEmpty]) ? 0 : this.slices[$_get](this.slices[$keys][$first]).type;
    }
    get numberOfChannels() {
      return this.slices[$length];
    }
    hasChannel(ch) {
      return this.slices[$containsKey](ch);
    }
    _get(ch) {
      return this.slices[$_get](ch);
    }
    addSlice(slice) {
      let ch = slice.name;
      this.slices[$_set](ch, slice);
      switch (ch) {
        case "R":
        {
          this.red = slice;
          break;
        }
        case "G":
        {
          this.green = slice;
          break;
        }
        case "B":
        {
          this.blue = slice;
          break;
        }
        case "A":
        {
          this.alpha = slice;
          break;
        }
        case "Z":
        {
          this.depth = slice;
          break;
        }
      }
    }
    toFloatRgba() {
      let t0, t0$, t0$0, t0$1;
      let rgba = _native_typed_data.NativeFloat32List.new(dart.notNull(this.width) * dart.notNull(this.height) * 4);
      let w = this.width;
      let h = this.height;
      for (let y = 0, di = 0; y < dart.notNull(h); y = y + 1) {
        for (let x = 0; x < dart.notNull(w); x = x + 1) {
          rgba[$_set]((t0 = di, di = t0 + 1, t0), this.red == null ? 0.0 : this.red.getFloat(x, y));
          rgba[$_set]((t0$ = di, di = t0$ + 1, t0$), this.green == null ? 0.0 : this.green.getFloat(x, y));
          rgba[$_set]((t0$0 = di, di = t0$0 + 1, t0$0), this.blue == null ? 0.0 : this.blue.getFloat(x, y));
          rgba[$_set]((t0$1 = di, di = t0$1 + 1, t0$1), this.alpha == null ? 1.0 : this.alpha.getFloat(x, y));
        }
      }
      return rgba;
    }
  };
  (hdr_image.HdrImage.new = function() {
    this[slices] = new (IdentityMapOfStringL$HdrSliceL()).new();
    this[red] = null;
    this[green] = null;
    this[blue] = null;
    this[alpha] = null;
    this[depth] = null;
    ;
  }).prototype = hdr_image.HdrImage.prototype;
  (hdr_image.HdrImage.create = function(width, height, channels, type, bitsPerSample) {
    this[slices] = new (IdentityMapOfStringL$HdrSliceL()).new();
    this[red] = null;
    this[green] = null;
    this[blue] = null;
    this[alpha] = null;
    this[depth] = null;
    if (dart.notNull(channels) < 0 || dart.notNull(channels) > 4) {
      return;
    }
    let channelList = C0 || CT.C0;
    for (let i = 0; i < dart.notNull(channels); i = i + 1) {
      this.addSlice(new hdr_slice.HdrSlice.new(channelList[$_get](i), width, height, type, bitsPerSample));
    }
  }).prototype = hdr_image.HdrImage.prototype;
  (hdr_image.HdrImage.from = function(other) {
    this[slices] = new (IdentityMapOfStringL$HdrSliceL()).new();
    this[red] = null;
    this[green] = null;
    this[blue] = null;
    this[alpha] = null;
    this[depth] = null;
    for (let ch of other.slices[$keys]) {
      let slice = other.slices[$_get](ch);
      this.addSlice(new hdr_slice.HdrSlice.from(slice));
    }
  }).prototype = hdr_image.HdrImage.prototype;
  (hdr_image.HdrImage.fromImage = function(other, opts) {
    let t0, t0$, t0$0, t0$1;
    let type = opts && 'type' in opts ? opts.type : 3;
    let bitsPerSample = opts && 'bitsPerSample' in opts ? opts.bitsPerSample : 16;
    this[slices] = new (IdentityMapOfStringL$HdrSliceL()).new();
    this[red] = null;
    this[green] = null;
    this[blue] = null;
    this[alpha] = null;
    this[depth] = null;
    this.addSlice(new hdr_slice.HdrSlice.new("R", other.width, other.height, type, bitsPerSample));
    this.addSlice(new hdr_slice.HdrSlice.new("G", other.width, other.height, type, bitsPerSample));
    this.addSlice(new hdr_slice.HdrSlice.new("B", other.width, other.height, type, bitsPerSample));
    if (other.channels == image.Channels.rgba) {
      this.addSlice(new hdr_slice.HdrSlice.new("A", other.width, other.height, type, bitsPerSample));
    }
    let rgb = other.getBytes();
    for (let y = 0, si = 0; y < dart.notNull(other.height); y = y + 1) {
      for (let x = 0; x < dart.notNull(other.width); x = x + 1) {
        this.red.setFloat(x, y, dart.notNull(rgb[$_get]((t0 = si, si = t0 + 1, t0))) / 255.0);
        this.green.setFloat(x, y, dart.notNull(rgb[$_get]((t0$ = si, si = t0$ + 1, t0$))) / 255.0);
        this.blue.setFloat(x, y, dart.notNull(rgb[$_get]((t0$0 = si, si = t0$0 + 1, t0$0))) / 255.0);
        if (this.alpha != null) {
          this.alpha.setFloat(x, y, dart.notNull(rgb[$_get]((t0$1 = si, si = t0$1 + 1, t0$1))) / 255.0);
        }
      }
    }
  }).prototype = hdr_image.HdrImage.prototype;
  dart.addTypeTests(hdr_image.HdrImage);
  dart.addTypeCaches(hdr_image.HdrImage);
  dart.setMethodSignature(hdr_image.HdrImage, () => ({
    __proto__: dart.getMethods(hdr_image.HdrImage.__proto__),
    getRed: dart.fnType(dart.legacy(core.num), [dart.legacy(core.int), dart.legacy(core.int)]),
    setRed: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.num)]),
    setRedInt: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int)]),
    getGreen: dart.fnType(dart.legacy(core.num), [dart.legacy(core.int), dart.legacy(core.int)]),
    setGreen: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.num)]),
    setGreenInt: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int)]),
    getBlue: dart.fnType(dart.legacy(core.num), [dart.legacy(core.int), dart.legacy(core.int)]),
    setBlue: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.num)]),
    setBlueInt: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int)]),
    getAlpha: dart.fnType(dart.legacy(core.num), [dart.legacy(core.int), dart.legacy(core.int)]),
    setAlpha: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.num)]),
    setAlphaInt: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int)]),
    getDepth: dart.fnType(dart.legacy(core.num), [dart.legacy(core.int), dart.legacy(core.int)]),
    setDepth: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.num)]),
    hasChannel: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.String)]),
    _get: dart.fnType(dart.legacy(hdr_slice.HdrSlice), [dart.legacy(core.String)]),
    addSlice: dart.fnType(dart.void, [dart.legacy(hdr_slice.HdrSlice)]),
    toFloatRgba: dart.fnType(dart.legacy(typed_data.Float32List), [])
  }));
  dart.setGetterSignature(hdr_image.HdrImage, () => ({
    __proto__: dart.getGetters(hdr_image.HdrImage.__proto__),
    hasColor: dart.legacy(core.bool),
    hasAlpha: dart.legacy(core.bool),
    hasDepth: dart.legacy(core.bool),
    width: dart.legacy(core.int),
    height: dart.legacy(core.int),
    bitsPerSample: dart.legacy(core.int),
    sampleFormat: dart.legacy(core.int),
    numberOfChannels: dart.legacy(core.int)
  }));
  dart.setLibraryUri(hdr_image.HdrImage, L1);
  dart.setFieldSignature(hdr_image.HdrImage, () => ({
    __proto__: dart.getFields(hdr_image.HdrImage.__proto__),
    slices: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(hdr_slice.HdrSlice)))),
    red: dart.fieldType(dart.legacy(hdr_slice.HdrSlice)),
    green: dart.fieldType(dart.legacy(hdr_slice.HdrSlice)),
    blue: dart.fieldType(dart.legacy(hdr_slice.HdrSlice)),
    alpha: dart.fieldType(dart.legacy(hdr_slice.HdrSlice)),
    depth: dart.fieldType(dart.legacy(hdr_slice.HdrSlice))
  }));
  dart.defineLazy(hdr_image.HdrImage, {
    /*hdr_image.HdrImage.UINT*/get UINT() {
      return 0;
    },
    /*hdr_image.HdrImage.INT*/get INT() {
      return 1;
    },
    /*hdr_image.HdrImage.FLOAT*/get FLOAT() {
      return 3;
    },
    /*hdr_image.HdrImage.R*/get R() {
      return "R";
    },
    /*hdr_image.HdrImage.G*/get G() {
      return "G";
    },
    /*hdr_image.HdrImage.B*/get B() {
      return "B";
    },
    /*hdr_image.HdrImage.A*/get A() {
      return "A";
    },
    /*hdr_image.HdrImage.Z*/get Z() {
      return "Z";
    },
    /*hdr_image.HdrImage.ID*/get ID() {
      return "id";
    }
  }, true);
  dart.trackLibraries("packages/image/src/hdr/hdr_slice.dart", {
    "package:image/src/hdr/hdr_slice.dart": hdr_slice,
    "package:image/src/hdr/hdr_image.dart": hdr_image
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["hdr_slice.dart","hdr_image.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAOe;;;;;;IACH;;;;;;IACA;;;;;;IAIA;;;;;;IAGA;;;;;;IAII;;;;;;+BAEyB,MAAU,MAAU;AACzD,cAAQ,IAAI;;;AAER,cAAI,AAAc,aAAD,KAAI;AACnB,kBAAO,uCAAS,IAAI;gBACf,KAAI,AAAc,aAAD,KAAI;AAC1B,kBAAO,wCAAU,IAAI;gBAChB,KAAI,AAAc,aAAD,KAAI;AAC1B,kBAAO,wCAAU,IAAI;;AAEvB;;;;AAEA,cAAI,AAAc,aAAD,KAAI;AACnB,kBAAO,wCAAU,IAAI;gBAChB,KAAI,AAAc,aAAD,KAAI;AAC1B,kBAAO,yCAAW,IAAI;gBACjB,KAAI,AAAc,aAAD,KAAI;AAC1B,kBAAO,yCAAW,IAAI;;AAExB;;;;AAEA,cAAI,AAAc,aAAD,KAAI;AACnB,kBAAO,yCAAW,IAAI;gBACjB,KAAI,AAAc,aAAD,KAAI;AAC1B,kBAAO,0CAAY,IAAI;gBAClB,KAAI,AAAc,aAAD,KAAI;AAC1B,kBAAO,0CAAY,IAAI;;AAEzB;;;AAEJ,YAAO;IACT;;AAmBwB,YAAU,2BAAiB,iBAAP,WAAL;IAA0B;;AAG7C,YAAA,AAAK;IAAiB;;AAGpC,cAAK,AAAc,uBAAG,IACpB,MACA,AAAc,uBAAG,KACb,QACA;AACV,UAAI,AAAK;AACD,QAAN,IAAA,AAAE,CAAD,GAAI;;AAEP,YAAO,EAAC;IACV;aAIoB,GAAO;AACnB,eAAO,AAAQ,aAAV,CAAC,iBAAG,2BAAQ,CAAC;AACxB,UAAI,AAAK,mBAAmB,AAAK;AAC/B,cAAyB,cAAR,UAAL,WAAJ,oBAAK,EAAE,oBAAY;;AAEzB,cAAK,AAAK,AAAkB,mBAAG,AAAc,uBAAG,KACzC,uBAAsB,UAAL,WAAJ,oBAAK,EAAE,OAChB,aAAL,WAAJ,oBAAK,EAAE;AACb,YAAO,EAAC;IACV;aAIkB,GAAO,GAAO;AAC9B,UAAI;AACF;;AAEI,eAAO,AAAQ,aAAV,CAAC,iBAAG,2BAAQ,CAAC;AACxB,UAAI,AAAc,uBAAG;AACY,QAA3B,WAAJ,oBAAK,EAAE,EAAS,uBAAa,CAAC;;AAElB,QAAR,WAAJ,oBAAK,EAAE,EAAI,CAAC;;IAEhB;WAIe,GAAO;AACd,eAAO,AAAQ,aAAV,CAAC,iBAAG,2BAAQ,CAAC;AACxB,YAAgB,WAAL,WAAJ,oBAAK,EAAE;IAChB;WAIgB,GAAO,GAAO;AACtB,eAAO,AAAQ,aAAV,CAAC,iBAAG,2BAAQ,CAAC;AACZ,MAAR,WAAJ,oBAAK,EAAE,EAAI,CAAC;IACd;;qCAzEc,MAAU,OAAW,QAAY,MAAU;IAA3C;IACF,eAAE,KAAK;IACN,gBAAE,MAAM;IACV,cAAE,IAAI;IACG,uBAAE,aAAa;IACxB,aAAE,uCAA0B,aAAN,KAAK,iBAAG,MAAM,GAAE,IAAI,EAAE,aAAa;;EAAC;sCAG9C;IACZ,cAAE,AAAM,KAAD;IACN,eAAE,AAAM,KAAD;IACN,gBAAE,AAAM,KAAD;IACT,cAAE,AAAM,KAAD;IACE,uBAAE,AAAM,KAAD;IAChB,aAAa,WAAX,AAAM,KAAD,mBAAc;;EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ICvCN;;;;;;IACnB;;;;;;IACA;;;;;;IACA;;;;;;IACA;;;;;;IACA;;;;;;;AA+CY,YAAA,AAA6B,aAAtB,QAAQ,cAAS,QAAQ,aAAQ;IAAI;;AAG5C,YAAA,AAAM,eAAG;IAAI;;AAGb,YAAA,AAAM,eAAG;IAAI;;AAGjB,uBAAA,AAAO,yBAAU,IAAI,AAAO,AAAO,AAAM;IAAK;;AAG7C,uBAAA,AAAO,yBAAU,IAAI,AAAO,AAAO,AAAM;IAAM;WAGlD,GAAO;AACpB,YAAO,AAAI,aAAG,iBACR,AAAI,oBACA,AAAI,kBAAS,CAAC,EAAE,CAAC,IACjB,AAAI,gBAAO,CAAC,EAAE,CAAC,IACnB;IACR;WAGgB,GAAO,GAAO;AAC5B,UAAI,YAAO;AACT,sBAAI,AAAI;AACe,UAArB,AAAI,kBAAS,CAAC,EAAE,CAAC,EAAE,CAAC;;AAEM,UAA1B,AAAI,gBAAO,CAAC,EAAE,CAAC,EAAI,mBAAF,CAAC;;;IAGxB;cAEmB,GAAO,GAAO;AAC/B,UAAI,YAAO;AACU,QAAnB,AAAI,gBAAO,CAAC,EAAE,CAAC,EAAE,CAAC;;IAEtB;aAGiB,GAAO;AACtB,YAAO,AAAM,eAAG,iBACV,AAAM,sBACF,AAAM,oBAAS,CAAC,EAAE,CAAC,IACnB,AAAM,kBAAO,CAAC,EAAE,CAAC,IACrB;IACR;aAGkB,GAAO,GAAO;AAC9B,UAAI,cAAS;AACX,sBAAI,AAAI;AACiB,UAAvB,AAAM,oBAAS,CAAC,EAAE,CAAC,EAAE,CAAC;;AAEM,UAA5B,AAAM,kBAAO,CAAC,EAAE,CAAC,EAAI,mBAAF,CAAC;;;IAG1B;gBAEqB,GAAO,GAAO;AACjC,UAAI,cAAS;AACU,QAArB,AAAM,kBAAO,CAAC,EAAE,CAAC,EAAE,CAAC;;IAExB;YAGgB,GAAO;AACrB,YAAO,AAAK,cAAG,iBACT,AAAK,qBACD,AAAK,mBAAS,CAAC,EAAE,CAAC,IAClB,AAAK,iBAAO,CAAC,EAAE,CAAC,IACpB;IACR;YAGiB,GAAO,GAAO;AAC7B,UAAI,cAAS;AACX,sBAAI,AAAK;AACe,UAAtB,AAAK,mBAAS,CAAC,EAAE,CAAC,EAAE,CAAC;;AAEM,UAA3B,AAAK,iBAAO,CAAC,EAAE,CAAC,EAAI,mBAAF,CAAC;;;IAGzB;eAEoB,GAAO,GAAO;AAChC,UAAI,aAAQ;AACU,QAApB,AAAK,iBAAO,CAAC,EAAE,CAAC,EAAE,CAAC;;IAEvB;aAGiB,GAAO;AACtB,YAAO,AAAM,eAAG,iBACV,AAAM,sBACF,AAAM,oBAAS,CAAC,EAAE,CAAC,IACnB,AAAM,kBAAO,CAAC,EAAE,CAAC,IACrB;IACR;aAGkB,GAAO,GAAO;AAC9B,UAAI,cAAS;AACX,sBAAI,AAAM;AACe,UAAvB,AAAM,oBAAS,CAAC,EAAE,CAAC,EAAE,CAAC;;AAEM,UAA5B,AAAM,kBAAO,CAAC,EAAE,CAAC,EAAI,mBAAF,CAAC;;;IAG1B;gBAEqB,GAAO,GAAO;AACjC,UAAI,cAAS;AACU,QAArB,AAAM,kBAAO,CAAC,EAAE,CAAC,EAAE,CAAC;;IAExB;aAGiB,GAAO;AACtB,YAAO,AAAM,eAAG,iBACV,AAAM,sBACF,AAAM,oBAAS,CAAC,EAAE,CAAC,IACnB,AAAM,kBAAO,CAAC,EAAE,CAAC,IACrB;IACR;aAGkB,GAAO,GAAO;AAC9B,UAAI,cAAS;AACX,sBAAI,AAAM;AACe,UAAvB,AAAM,oBAAS,CAAC,EAAE,CAAC,EAAE,CAAC;;AAEM,UAA5B,AAAM,kBAAO,CAAC,EAAE,CAAC,EAAI,mBAAF,CAAC;;;IAG1B;;AAGyB,YAAA,AAAI,aAAG,OAC1B,AAAI,mCACJ,AAAO,yBACH,IACA,AAAM,AAAoB,mBAAnB,AAAO,AAAK;IAAoB;;AAEzB,YAAA,AAAI,aAAG,OACzB,AAAI,0BACJ,AAAO,yBACH,IACA,AAAM,AAAoB,mBAAnB,AAAO,AAAK;IAAW;;AAGZ,YAAA,AAAO;IAAM;eAGlB;AAAO,YAAA,AAAO,2BAAY,EAAE;IAAC;SAGxB;AAAO,YAAA,AAAM,oBAAC,EAAE;IAAC;aAGtB;AACf,eAAK,AAAM,KAAD;AACE,MAAlB,AAAM,mBAAC,EAAE,EAAI,KAAK;AAClB,cAAQ,EAAE;;;AAEK,UAAX,WAAM,KAAK;AACX;;;;AAEa,UAAb,aAAQ,KAAK;AACb;;;;AAEY,UAAZ,YAAO,KAAK;AACZ;;;;AAEa,UAAb,aAAQ,KAAK;AACb;;;;AAEa,UAAb,aAAQ,KAAK;AACb;;;IAEN;;;AAKQ,iBAAO,yCAAkB,AAAS,aAAf,2BAAQ,eAAS;AACpC,cAAI;AACJ,cAAI;AACV,eAAS,IAAI,GAAG,KAAK,GAAG,AAAE,CAAD,gBAAG,CAAC,GAAI,IAAF,AAAE,CAAC,GAAH;AAC7B,iBAAS,IAAI,GAAG,AAAE,CAAD,gBAAG,CAAC,GAAI,IAAF,AAAE,CAAC,GAAH;AAC8B,UAAnD,AAAI,IAAA,SAAG,KAAF,EAAE,oBAAM,AAAI,YAAG,OAAO,MAAM,AAAI,kBAAS,CAAC,EAAE,CAAC;AACK,UAAvD,AAAI,IAAA,SAAG,MAAF,EAAE,sBAAM,AAAM,cAAG,OAAO,MAAM,AAAM,oBAAS,CAAC,EAAE,CAAC;AACD,UAArD,AAAI,IAAA,SAAG,OAAF,EAAE,wBAAM,AAAK,aAAG,OAAO,MAAM,AAAK,mBAAS,CAAC,EAAE,CAAC;AACG,UAAvD,AAAI,IAAA,SAAG,OAAF,EAAE,wBAAM,AAAM,cAAG,OAAO,MAAM,AAAM,oBAAS,CAAC,EAAE,CAAC;;;AAI1D,YAAO,KAAI;IACb;;;IA3P4B,eAAS;IAC5B;IACA;IACA;IACA;IACA;;EAEC;wCAIF,OAAW,QAAY,UAAc,MAAU;IAX3B,eAAS;IAC5B;IACA;IACA;IACA;IACA;AAOP,QAAa,aAAT,QAAQ,IAAG,KAAc,aAAT,QAAQ,IAAG;AAC7B;;AAEI;AACN,aAAS,IAAI,GAAG,AAAE,CAAD,gBAAG,QAAQ,GAAI,IAAF,AAAE,CAAC,GAAH;AAC0C,MAAtE,cAAS,2BAAS,AAAW,WAAA,QAAC,CAAC,GAAG,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE,aAAa;;EAExE;sCAGuB;IAtBK,eAAS;IAC5B;IACA;IACA;IACA;IACA;AAkBP,aAAW,KAAM,AAAM,AAAO,MAAR;AACd,kBAAQ,AAAM,AAAM,KAAP,eAAQ,EAAE;AACC,MAA9B,cAAkB,4BAAK,KAAK;;EAEhC;2CAIyB;;QAAY;QAAkB;IA/B3B,eAAS;IAC5B;IACA;IACA;IACA;IACA;AA2B8D,IAArE,cAAS,gCAAY,AAAM,KAAD,QAAQ,AAAM,KAAD,SAAS,IAAI,EAAE,aAAa;AACE,IAArE,cAAS,gCAAY,AAAM,KAAD,QAAQ,AAAM,KAAD,SAAS,IAAI,EAAE,aAAa;AACE,IAArE,cAAS,gCAAY,AAAM,KAAD,QAAQ,AAAM,KAAD,SAAS,IAAI,EAAE,aAAa;AACnE,QAAI,AAAM,AAAS,KAAV,aAAsB;AACwC,MAArE,cAAS,gCAAY,AAAM,KAAD,QAAQ,AAAM,KAAD,SAAS,IAAI,EAAE,aAAa;;AAE/D,cAAM,AAAM,KAAD;AACjB,aAAS,IAAI,GAAG,KAAK,GAAG,AAAE,CAAD,gBAAG,AAAM,KAAD,UAAW,IAAF,AAAE,CAAC,GAAH;AACxC,eAAS,IAAI,GAAG,AAAE,CAAD,gBAAG,AAAM,KAAD,SAAU,IAAF,AAAE,CAAC,GAAH;AACM,QAArC,AAAI,kBAAS,CAAC,EAAE,CAAC,EAAY,aAAV,AAAG,GAAA,SAAG,KAAF,EAAE,uBAAM;AACQ,QAAvC,AAAM,oBAAS,CAAC,EAAE,CAAC,EAAY,aAAV,AAAG,GAAA,SAAG,MAAF,EAAE,yBAAM;AACK,QAAtC,AAAK,mBAAS,CAAC,EAAE,CAAC,EAAY,aAAV,AAAG,GAAA,SAAG,OAAF,EAAE,2BAAM;AAChC,YAAI,cAAS;AAC4B,UAAvC,AAAM,oBAAS,CAAC,EAAE,CAAC,EAAY,aAAV,AAAG,GAAA,SAAG,OAAF,EAAE,2BAAM;;;;EAIzC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAvEa,uBAAI;;;MACJ,sBAAG;;;MACH,wBAAK;;;MAGE,oBAAC;;;MAGD,oBAAC;;;MAGD,oBAAC;;;MAGD,oBAAC;;;MAGD,oBAAC;;;MAGD,qBAAE","file":"../../../../../../../../../packages/image/src/hdr/hdr_slice.dart.lib.js"}');
  // Exports:
  return {
    src__hdr__hdr_slice: hdr_slice,
    src__hdr__hdr_image: hdr_image
  };
}));

//# sourceMappingURL=hdr_slice.dart.lib.js.map
