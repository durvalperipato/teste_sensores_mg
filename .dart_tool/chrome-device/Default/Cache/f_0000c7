define(['dart_sdk', 'packages/image/src/image_exception.dart', 'packages/image/src/util/input_buffer.dart', 'packages/archive/src/zlib_decoder.dart', 'packages/image/src/util/output_buffer.dart', 'packages/image/src/formats/exr/exr_huffman.dart', 'packages/image/src/formats/exr/exr_wavelet.dart', 'packages/image/src/hdr/hdr_slice.dart', 'packages/image/src/formats/exr/exr_channel.dart', 'packages/image/src/formats/exr/exr_attribute.dart'], (function load__packages__image__src__formats__exr__exr_zip_compressor_dart(dart_sdk, packages__image__src__image_exception$46dart, packages__image__src__util__input_buffer$46dart, packages__archive__src__zlib_decoder$46dart, packages__image__src__util__output_buffer$46dart, packages__image__src__formats__exr__exr_huffman$46dart, packages__image__src__formats__exr__exr_wavelet$46dart, packages__image__src__hdr__hdr_slice$46dart, packages__image__src__formats__exr__exr_channel$46dart, packages__image__src__formats__exr__exr_attribute$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const typed_data = dart_sdk.typed_data;
  const _native_typed_data = dart_sdk._native_typed_data;
  const _interceptors = dart_sdk._interceptors;
  const _js_helper = dart_sdk._js_helper;
  const math = dart_sdk.math;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const image_exception = packages__image__src__image_exception$46dart.src__image_exception;
  const input_buffer = packages__image__src__util__input_buffer$46dart.src__util__input_buffer;
  const zlib_decoder = packages__archive__src__zlib_decoder$46dart.src__zlib_decoder;
  const output_buffer = packages__image__src__util__output_buffer$46dart.src__util__output_buffer;
  const exr_huffman = packages__image__src__formats__exr__exr_huffman$46dart.src__formats__exr__exr_huffman;
  const exr_wavelet = packages__image__src__formats__exr__exr_wavelet$46dart.src__formats__exr__exr_wavelet;
  const hdr_image = packages__image__src__hdr__hdr_slice$46dart.src__hdr__hdr_image;
  const exr_channel = packages__image__src__formats__exr__exr_channel$46dart.src__formats__exr__exr_channel;
  const exr_attribute = packages__image__src__formats__exr__exr_attribute$46dart.src__formats__exr__exr_attribute;
  var exr_zip_compressor = Object.create(dart.library);
  var exr_rle_compressor = Object.create(dart.library);
  var exr_pxr24_compressor = Object.create(dart.library);
  var exr_piz_compressor = Object.create(dart.library);
  var exr_part = Object.create(dart.library);
  var exr_compressor = Object.create(dart.library);
  var exr_b44_compressor = Object.create(dart.library);
  var $length = dartx.length;
  var $_get = dartx._get;
  var $_set = dartx._set;
  var $truncate = dartx.truncate;
  var $buffer = dartx.buffer;
  var $modulo = dartx['%'];
  var $rightShift = dartx['>>'];
  var $isEmpty = dartx.isEmpty;
  var $add = dartx.add;
  var $leftShift = dartx['<<'];
  var InternalExrPartL = () => (InternalExrPartL = dart.constFn(dart.legacy(exr_part.InternalExrPart)))();
  var Uint8ListL = () => (Uint8ListL = dart.constFn(dart.legacy(typed_data.Uint8List)))();
  var intL = () => (intL = dart.constFn(dart.legacy(core.int)))();
  var JSArrayOfintL = () => (JSArrayOfintL = dart.constFn(_interceptors.JSArray$(intL())))();
  var _PizChannelDataL = () => (_PizChannelDataL = dart.constFn(dart.legacy(exr_piz_compressor._PizChannelData)))();
  var ListOf_PizChannelDataL = () => (ListOf_PizChannelDataL = dart.constFn(core.List$(_PizChannelDataL())))();
  var ExrChannelL = () => (ExrChannelL = dart.constFn(dart.legacy(exr_channel.ExrChannel)))();
  var JSArrayOfExrChannelL = () => (JSArrayOfExrChannelL = dart.constFn(_interceptors.JSArray$(ExrChannelL())))();
  var StringL = () => (StringL = dart.constFn(dart.legacy(core.String)))();
  var ExrAttributeL = () => (ExrAttributeL = dart.constFn(dart.legacy(exr_attribute.ExrAttribute)))();
  var IdentityMapOfStringL$ExrAttributeL = () => (IdentityMapOfStringL$ExrAttributeL = dart.constFn(_js_helper.IdentityMap$(StringL(), ExrAttributeL())))();
  var ListOfintL = () => (ListOfintL = dart.constFn(core.List$(intL())))();
  var Uint32ListL = () => (Uint32ListL = dart.constFn(dart.legacy(typed_data.Uint32List)))();
  var ListOfUint32ListL = () => (ListOfUint32ListL = dart.constFn(core.List$(Uint32ListL())))();
  var JSArrayOfUint32ListL = () => (JSArrayOfUint32ListL = dart.constFn(_interceptors.JSArray$(Uint32ListL())))();
  const CT = Object.create(null);
  var L5 = "package:image/src/formats/exr/exr_part.dart";
  var L3 = "package:image/src/formats/exr/exr_pxr24_compressor.dart";
  var L6 = "package:image/src/formats/exr/exr_b44_compressor.dart";
  var L4 = "package:image/src/formats/exr/exr_piz_compressor.dart";
  var L1 = "package:image/src/formats/exr/exr_zip_compressor.dart";
  var L2 = "package:image/src/formats/exr/exr_rle_compressor.dart";
  var L0 = "package:image/src/formats/exr/exr_compressor.dart";
  var _header$ = dart.privateName(exr_compressor, "_header");
  var decodedWidth = dart.privateName(exr_compressor, "ExrCompressor.decodedWidth");
  var decodedHeight = dart.privateName(exr_compressor, "ExrCompressor.decodedHeight");
  exr_compressor.ExrCompressor = class ExrCompressor extends core.Object {
    get decodedWidth() {
      return this[decodedWidth];
    }
    set decodedWidth(value) {
      this[decodedWidth] = value;
    }
    get decodedHeight() {
      return this[decodedHeight];
    }
    set decodedHeight(value) {
      this[decodedHeight] = value;
    }
    static new(type, hdr, maxScanLineSize, numScanLines = null) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3;
      switch (type) {
        case 1:
        {
          return new exr_rle_compressor.InternalExrRleCompressor.new(hdr, maxScanLineSize);
        }
        case 2:
        {
          return new exr_zip_compressor.InternalExrZipCompressor.new(hdr, maxScanLineSize, (t0 = numScanLines, t0 == null ? 1 : t0));
        }
        case 3:
        {
          return new exr_zip_compressor.InternalExrZipCompressor.new(hdr, maxScanLineSize, (t0$ = numScanLines, t0$ == null ? 16 : t0$));
        }
        case 4:
        {
          return new exr_piz_compressor.InternalExrPizCompressor.new(hdr, maxScanLineSize, (t0$0 = numScanLines, t0$0 == null ? 32 : t0$0));
        }
        case 5:
        {
          return new exr_pxr24_compressor.InternalExrPxr24Compressor.new(hdr, maxScanLineSize, (t0$1 = numScanLines, t0$1 == null ? 16 : t0$1));
        }
        case 6:
        {
          return new exr_b44_compressor.InternalExrB44Compressor.new(hdr, maxScanLineSize, (t0$2 = numScanLines, t0$2 == null ? 32 : t0$2), false);
        }
        case 7:
        {
          return new exr_b44_compressor.InternalExrB44Compressor.new(hdr, maxScanLineSize, (t0$3 = numScanLines, t0$3 == null ? 32 : t0$3), true);
        }
        default:
        {
          dart.throw(new image_exception.ImageException.new("Invalid compression type: " + dart.str(type)));
        }
      }
    }
    static tile(type, tileLineSize, numTileLines, hdr) {
      switch (type) {
        case 1:
        {
          return new exr_rle_compressor.InternalExrRleCompressor.new(hdr, dart.notNull(tileLineSize) * dart.notNull(numTileLines));
        }
        case 2:
        case 3:
        {
          return new exr_zip_compressor.InternalExrZipCompressor.new(hdr, tileLineSize, numTileLines);
        }
        case 4:
        {
          return new exr_piz_compressor.InternalExrPizCompressor.new(hdr, tileLineSize, numTileLines);
        }
        case 5:
        {
          return new exr_pxr24_compressor.InternalExrPxr24Compressor.new(hdr, tileLineSize, numTileLines);
        }
        case 6:
        {
          return new exr_b44_compressor.InternalExrB44Compressor.new(hdr, tileLineSize, numTileLines, false);
        }
        case 7:
        {
          return new exr_b44_compressor.InternalExrB44Compressor.new(hdr, tileLineSize, numTileLines, true);
        }
        default:
        {
          dart.throw(new image_exception.ImageException.new("Invalid compression type: " + dart.str(type)));
        }
      }
    }
    compress(inPtr, x, y, width = null, height = null) {
      dart.throw(new image_exception.ImageException.new("Unsupported compression type"));
    }
    uncompress(inPtr, x, y, width = null, height = null) {
      dart.throw(new image_exception.ImageException.new("Unsupported compression type"));
    }
  };
  (exr_compressor.ExrCompressor.__ = function(_header) {
    this[decodedWidth] = 0;
    this[decodedHeight] = 0;
    this[_header$] = _header;
    ;
  }).prototype = exr_compressor.ExrCompressor.prototype;
  dart.addTypeTests(exr_compressor.ExrCompressor);
  dart.addTypeCaches(exr_compressor.ExrCompressor);
  dart.setMethodSignature(exr_compressor.ExrCompressor, () => ({
    __proto__: dart.getMethods(exr_compressor.ExrCompressor.__proto__),
    compress: dart.fnType(dart.legacy(typed_data.Uint8List), [dart.legacy(input_buffer.InputBuffer), dart.legacy(core.int), dart.legacy(core.int)], [dart.legacy(core.int), dart.legacy(core.int)]),
    uncompress: dart.fnType(dart.legacy(typed_data.Uint8List), [dart.legacy(input_buffer.InputBuffer), dart.legacy(core.int), dart.legacy(core.int)], [dart.legacy(core.int), dart.legacy(core.int)])
  }));
  dart.setLibraryUri(exr_compressor.ExrCompressor, L0);
  dart.setFieldSignature(exr_compressor.ExrCompressor, () => ({
    __proto__: dart.getFields(exr_compressor.ExrCompressor.__proto__),
    decodedWidth: dart.fieldType(dart.legacy(core.int)),
    decodedHeight: dart.fieldType(dart.legacy(core.int)),
    [_header$]: dart.fieldType(dart.legacy(exr_part.ExrPart))
  }));
  dart.defineLazy(exr_compressor.ExrCompressor, {
    /*exr_compressor.ExrCompressor.NO_COMPRESSION*/get NO_COMPRESSION() {
      return 0;
    },
    /*exr_compressor.ExrCompressor.RLE_COMPRESSION*/get RLE_COMPRESSION() {
      return 1;
    },
    /*exr_compressor.ExrCompressor.ZIPS_COMPRESSION*/get ZIPS_COMPRESSION() {
      return 2;
    },
    /*exr_compressor.ExrCompressor.ZIP_COMPRESSION*/get ZIP_COMPRESSION() {
      return 3;
    },
    /*exr_compressor.ExrCompressor.PIZ_COMPRESSION*/get PIZ_COMPRESSION() {
      return 4;
    },
    /*exr_compressor.ExrCompressor.PXR24_COMPRESSION*/get PXR24_COMPRESSION() {
      return 5;
    },
    /*exr_compressor.ExrCompressor.B44_COMPRESSION*/get B44_COMPRESSION() {
      return 6;
    },
    /*exr_compressor.ExrCompressor.B44A_COMPRESSION*/get B44A_COMPRESSION() {
      return 7;
    }
  }, true);
  exr_zip_compressor.ExrZipCompressor = class ExrZipCompressor extends exr_compressor.ExrCompressor {};
  dart.addTypeTests(exr_zip_compressor.ExrZipCompressor);
  dart.addTypeCaches(exr_zip_compressor.ExrZipCompressor);
  dart.setLibraryUri(exr_zip_compressor.ExrZipCompressor, L1);
  var _outCache = dart.privateName(exr_zip_compressor, "_outCache");
  var _numScanLines$ = dart.privateName(exr_zip_compressor, "_numScanLines");
  exr_compressor.InternalExrCompressor = class InternalExrCompressor extends exr_compressor.ExrCompressor {
    get header() {
      return InternalExrPartL().as(this[_header$]);
    }
    numSamples(s, a, b) {
      let a1 = (dart.notNull(a) / dart.notNull(s))[$truncate]();
      let b1 = (dart.notNull(b) / dart.notNull(s))[$truncate]();
      return b1 - a1 + (a1 * dart.notNull(s) < dart.notNull(a) ? 0 : 1);
    }
  };
  (exr_compressor.InternalExrCompressor.new = function(header) {
    exr_compressor.InternalExrCompressor.__proto__.__.call(this, header);
    ;
  }).prototype = exr_compressor.InternalExrCompressor.prototype;
  dart.addTypeTests(exr_compressor.InternalExrCompressor);
  dart.addTypeCaches(exr_compressor.InternalExrCompressor);
  dart.setMethodSignature(exr_compressor.InternalExrCompressor, () => ({
    __proto__: dart.getMethods(exr_compressor.InternalExrCompressor.__proto__),
    numSamples: dart.fnType(dart.legacy(core.int), [dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int)])
  }));
  dart.setGetterSignature(exr_compressor.InternalExrCompressor, () => ({
    __proto__: dart.getGetters(exr_compressor.InternalExrCompressor.__proto__),
    header: dart.legacy(exr_part.InternalExrPart)
  }));
  dart.setLibraryUri(exr_compressor.InternalExrCompressor, L0);
  var zlib = dart.privateName(exr_zip_compressor, "InternalExrZipCompressor.zlib");
  exr_zip_compressor.InternalExrZipCompressor = class InternalExrZipCompressor extends exr_compressor.InternalExrCompressor {
    get zlib() {
      return this[zlib];
    }
    set zlib(value) {
      this[zlib] = value;
    }
    numScanLines() {
      return this[_numScanLines$];
    }
    compress(input, x, y, width = null, height = null) {
      dart.throw(new image_exception.ImageException.new("Zip compression not yet supported"));
    }
    uncompress(input, x, y, width = null, height = null) {
      let t0, t0$, t0$0, t0$1;
      let data = this.zlib.decodeBytes(input.toUint8List());
      width == null ? width = this.header.width : null;
      height == null ? height = this.header.linesInBuffer : null;
      let minX = x;
      let maxX = dart.notNull(x) + dart.notNull(width) - 1;
      let minY = y;
      let maxY = dart.notNull(y) + dart.notNull(height) - 1;
      if (maxX > dart.notNull(this.header.width)) {
        maxX = dart.notNull(this.header.width) - 1;
      }
      if (maxY > dart.notNull(this.header.height)) {
        maxY = dart.notNull(this.header.height) - 1;
      }
      this.decodedWidth = maxX - dart.notNull(minX) + 1;
      this.decodedHeight = maxY - dart.notNull(minY) + 1;
      for (let i = 1, len = data[$length]; i < dart.notNull(len); i = i + 1) {
        data[$_set](i, dart.notNull(data[$_get](i - 1)) + dart.notNull(data[$_get](i)) - 128);
      }
      if (this[_outCache] == null || this[_outCache][$length] != data[$length]) {
        this[_outCache] = _native_typed_data.NativeUint8List.new(data[$length]);
      }
      let len = data[$length];
      let t1 = 0;
      let t2 = ((dart.notNull(len) + 1) / 2)[$truncate]();
      let si = 0;
      while (true) {
        if (si < dart.notNull(len)) {
          this[_outCache][$_set]((t0 = si, si = t0 + 1, t0), data[$_get]((t0$ = t1, t1 = t0$ + 1, t0$)));
        } else {
          break;
        }
        if (si < dart.notNull(len)) {
          this[_outCache][$_set]((t0$0 = si, si = t0$0 + 1, t0$0), data[$_get]((t0$1 = t2, t2 = t0$1 + 1, t0$1)));
        } else {
          break;
        }
      }
      return this[_outCache];
    }
  };
  (exr_zip_compressor.InternalExrZipCompressor.new = function(header, maxScanLineSize, _numScanLines) {
    this[zlib] = new zlib_decoder.ZLibDecoder.new();
    this[_outCache] = null;
    this[_numScanLines$] = _numScanLines;
    exr_zip_compressor.InternalExrZipCompressor.__proto__.new.call(this, InternalExrPartL().as(header));
    ;
  }).prototype = exr_zip_compressor.InternalExrZipCompressor.prototype;
  dart.addTypeTests(exr_zip_compressor.InternalExrZipCompressor);
  dart.addTypeCaches(exr_zip_compressor.InternalExrZipCompressor);
  exr_zip_compressor.InternalExrZipCompressor[dart.implements] = () => [exr_zip_compressor.ExrZipCompressor];
  dart.setMethodSignature(exr_zip_compressor.InternalExrZipCompressor, () => ({
    __proto__: dart.getMethods(exr_zip_compressor.InternalExrZipCompressor.__proto__),
    numScanLines: dart.fnType(dart.legacy(core.int), [])
  }));
  dart.setLibraryUri(exr_zip_compressor.InternalExrZipCompressor, L1);
  dart.setFieldSignature(exr_zip_compressor.InternalExrZipCompressor, () => ({
    __proto__: dart.getFields(exr_zip_compressor.InternalExrZipCompressor.__proto__),
    zlib: dart.fieldType(dart.legacy(zlib_decoder.ZLibDecoder)),
    [_numScanLines$]: dart.finalFieldType(dart.legacy(core.int)),
    [_outCache]: dart.fieldType(dart.legacy(typed_data.Uint8List))
  }));
  exr_rle_compressor.ExrRleCompressor = class ExrRleCompressor extends exr_compressor.ExrCompressor {};
  dart.addTypeTests(exr_rle_compressor.ExrRleCompressor);
  dart.addTypeCaches(exr_rle_compressor.ExrRleCompressor);
  dart.setLibraryUri(exr_rle_compressor.ExrRleCompressor, L2);
  var _outCache$ = dart.privateName(exr_rle_compressor, "_outCache");
  exr_rle_compressor.InternalExrRleCompressor = class InternalExrRleCompressor extends exr_compressor.InternalExrCompressor {
    numScanLines() {
      return 1;
    }
    compress(inPtr, x, y, width = null, height = null) {
      dart.throw(new image_exception.ImageException.new("Rle compression not yet supported."));
    }
    uncompress(inPtr, x, y, width = null, height = null) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3;
      let out = new output_buffer.OutputBuffer.new({size: dart.notNull(inPtr.length) * 2});
      width == null ? width = this.header.width : null;
      height == null ? height = this.header.linesInBuffer : null;
      let minX = x;
      let maxX = dart.notNull(x) + dart.notNull(width) - 1;
      let minY = y;
      let maxY = dart.notNull(y) + dart.notNull(height) - 1;
      if (maxX > dart.notNull(this.header.width)) {
        maxX = dart.notNull(this.header.width) - 1;
      }
      if (maxY > dart.notNull(this.header.height)) {
        maxY = dart.notNull(this.header.height) - 1;
      }
      this.decodedWidth = maxX - dart.notNull(minX) + 1;
      this.decodedHeight = maxY - dart.notNull(minY) + 1;
      while (!dart.test(inPtr.isEOS)) {
        let n = inPtr.readInt8();
        if (dart.notNull(n) < 0) {
          let count = -dart.notNull(n);
          while ((t0 = count, count = t0 - 1, t0) > 0) {
            out.writeByte(inPtr.readByte());
          }
        } else {
          let count = n;
          while (dart.notNull((t0$ = count, count = dart.notNull(t0$) - 1, t0$)) >= 0) {
            out.writeByte(inPtr.readByte());
          }
        }
      }
      let data = Uint8ListL().as(out.getBytes());
      for (let i = 1, len = data[$length]; i < dart.notNull(len); i = i + 1) {
        data[$_set](i, dart.notNull(data[$_get](i - 1)) + dart.notNull(data[$_get](i)) - 128);
      }
      if (this[_outCache$] == null || this[_outCache$][$length] != data[$length]) {
        this[_outCache$] = _native_typed_data.NativeUint8List.new(data[$length]);
      }
      let len = data[$length];
      let t1 = 0;
      let t2 = ((dart.notNull(len) + 1) / 2)[$truncate]();
      let si = 0;
      while (true) {
        if (si < dart.notNull(len)) {
          this[_outCache$][$_set]((t0$0 = si, si = t0$0 + 1, t0$0), data[$_get]((t0$1 = t1, t1 = t0$1 + 1, t0$1)));
        } else {
          break;
        }
        if (si < dart.notNull(len)) {
          this[_outCache$][$_set]((t0$2 = si, si = t0$2 + 1, t0$2), data[$_get]((t0$3 = t2, t2 = t0$3 + 1, t0$3)));
        } else {
          break;
        }
      }
      return this[_outCache$];
    }
  };
  (exr_rle_compressor.InternalExrRleCompressor.new = function(header, maxScanLineSize) {
    this[_outCache$] = null;
    exr_rle_compressor.InternalExrRleCompressor.__proto__.new.call(this, InternalExrPartL().as(header));
    ;
  }).prototype = exr_rle_compressor.InternalExrRleCompressor.prototype;
  dart.addTypeTests(exr_rle_compressor.InternalExrRleCompressor);
  dart.addTypeCaches(exr_rle_compressor.InternalExrRleCompressor);
  exr_rle_compressor.InternalExrRleCompressor[dart.implements] = () => [exr_rle_compressor.ExrRleCompressor];
  dart.setMethodSignature(exr_rle_compressor.InternalExrRleCompressor, () => ({
    __proto__: dart.getMethods(exr_rle_compressor.InternalExrRleCompressor.__proto__),
    numScanLines: dart.fnType(dart.legacy(core.int), [])
  }));
  dart.setLibraryUri(exr_rle_compressor.InternalExrRleCompressor, L2);
  dart.setFieldSignature(exr_rle_compressor.InternalExrRleCompressor, () => ({
    __proto__: dart.getFields(exr_rle_compressor.InternalExrRleCompressor.__proto__),
    [_outCache$]: dart.fieldType(dart.legacy(typed_data.Uint8List))
  }));
  exr_pxr24_compressor.ExrPxr24Compressor = class ExrPxr24Compressor extends exr_compressor.ExrCompressor {};
  dart.addTypeTests(exr_pxr24_compressor.ExrPxr24Compressor);
  dart.addTypeCaches(exr_pxr24_compressor.ExrPxr24Compressor);
  dart.setLibraryUri(exr_pxr24_compressor.ExrPxr24Compressor, L3);
  var _zlib = dart.privateName(exr_pxr24_compressor, "_zlib");
  var _output = dart.privateName(exr_pxr24_compressor, "_output");
  var _maxScanLineSize$ = dart.privateName(exr_pxr24_compressor, "_maxScanLineSize");
  var _numScanLines$0 = dart.privateName(exr_pxr24_compressor, "_numScanLines");
  exr_pxr24_compressor.InternalExrPxr24Compressor = class InternalExrPxr24Compressor extends exr_compressor.InternalExrCompressor {
    numScanLines() {
      return this[_numScanLines$0];
    }
    compress(inPtr, x, y, width = null, height = null) {
      dart.throw(new image_exception.ImageException.new("Pxr24 compression not yet supported."));
    }
    uncompress(inPtr, x, y, width = null, height = null) {
      let t2, t1, t0, t2$, t1$, t0$, t2$0, t1$0, t0$0, t1$1, t0$1, t2$1, t1$2, t0$2, t2$2, t1$3, t0$3, t1$4, t0$4, t2$3, t1$5, t0$5, t2$4, t1$6, t0$6, t2$5, t1$7, t0$7, t1$8, t0$8;
      let data = this[_zlib].decodeBytes(inPtr.toUint8List());
      if (data == null) {
        dart.throw(new image_exception.ImageException.new("Error decoding pxr24 compressed data"));
      }
      this[_output] == null ? this[_output] = new output_buffer.OutputBuffer.new({size: dart.notNull(this[_numScanLines$0]) * dart.notNull(this[_maxScanLineSize$])}) : null;
      this[_output].rewind();
      let tmpEnd = 0;
      let ptr = JSArrayOfintL().of([0, 0, 0, 0]);
      let pixel = _native_typed_data.NativeUint32List.new(1);
      let pixelBytes = typed_data.Uint8List.view(pixel[$buffer]);
      width == null ? width = this.header.width : null;
      height == null ? height = this.header.linesInBuffer : null;
      let minX = x;
      let maxX = dart.notNull(x) + dart.notNull(width) - 1;
      let minY = y;
      let maxY = dart.notNull(y) + dart.notNull(height) - 1;
      if (maxX > dart.notNull(this.header.width)) {
        maxX = dart.notNull(this.header.width) - 1;
      }
      if (maxY > dart.notNull(this.header.height)) {
        maxY = dart.notNull(this.header.height) - 1;
      }
      this.decodedWidth = maxX - dart.notNull(minX) + 1;
      this.decodedHeight = maxY - dart.notNull(minY) + 1;
      let numChannels = this.header.channels[$length];
      for (let yi = minY; dart.notNull(yi) <= maxY; yi = dart.notNull(yi) + 1) {
        for (let ci = 0; ci < dart.notNull(numChannels); ci = ci + 1) {
          let ch = this.header.channels[$_get](ci);
          if (y[$modulo](ch.ySampling) !== 0) {
            continue;
          }
          let n = this.numSamples(ch.xSampling, minX, maxX);
          pixel[$_set](0, 0);
          switch (ch.type) {
            case 0:
            {
              ptr[$_set](0, tmpEnd);
              ptr[$_set](1, dart.notNull(ptr[$_get](0)) + dart.notNull(n));
              ptr[$_set](2, dart.notNull(ptr[$_get](1)) + dart.notNull(n));
              tmpEnd = dart.notNull(ptr[$_get](2)) + dart.notNull(n);
              for (let j = 0; j < dart.notNull(n); j = j + 1) {
                let diff = (dart.notNull(data[$_get]((t0 = ptr, t1 = 0, t2 = t0[$_get](t1), t0[$_set](t1, dart.notNull(t2) + 1), t2))) << 24 | dart.notNull(data[$_get]((t0$ = ptr, t1$ = 1, t2$ = t0$[$_get](t1$), t0$[$_set](t1$, dart.notNull(t2$) + 1), t2$))) << 16 >>> 0 | dart.notNull(data[$_get]((t0$0 = ptr, t1$0 = 2, t2$0 = t0$0[$_get](t1$0), t0$0[$_set](t1$0, dart.notNull(t2$0) + 1), t2$0))) << 8 >>> 0) >>> 0;
                t0$1 = pixel;
                t1$1 = 0;
                t0$1[$_set](t1$1, dart.notNull(t0$1[$_get](t1$1)) + diff);
                for (let k = 0; k < 4; k = k + 1) {
                  this[_output].writeByte(pixelBytes[$_get](k));
                }
              }
              break;
            }
            case 1:
            {
              ptr[$_set](0, tmpEnd);
              ptr[$_set](1, dart.notNull(ptr[$_get](0)) + dart.notNull(n));
              tmpEnd = dart.notNull(ptr[$_get](1)) + dart.notNull(n);
              for (let j = 0; j < dart.notNull(n); j = j + 1) {
                let diff = (dart.notNull(data[$_get]((t0$2 = ptr, t1$2 = 0, t2$1 = t0$2[$_get](t1$2), t0$2[$_set](t1$2, dart.notNull(t2$1) + 1), t2$1))) << 8 | dart.notNull(data[$_get]((t0$3 = ptr, t1$3 = 1, t2$2 = t0$3[$_get](t1$3), t0$3[$_set](t1$3, dart.notNull(t2$2) + 1), t2$2)))) >>> 0;
                t0$4 = pixel;
                t1$4 = 0;
                t0$4[$_set](t1$4, dart.notNull(t0$4[$_get](t1$4)) + diff);
                for (let k = 0; k < 2; k = k + 1) {
                  this[_output].writeByte(pixelBytes[$_get](k));
                }
              }
              break;
            }
            case 2:
            {
              ptr[$_set](0, tmpEnd);
              ptr[$_set](1, dart.notNull(ptr[$_get](0)) + dart.notNull(n));
              ptr[$_set](2, dart.notNull(ptr[$_get](1)) + dart.notNull(n));
              tmpEnd = dart.notNull(ptr[$_get](2)) + dart.notNull(n);
              for (let j = 0; j < dart.notNull(n); j = j + 1) {
                let diff = (dart.notNull(data[$_get]((t0$5 = ptr, t1$5 = 0, t2$3 = t0$5[$_get](t1$5), t0$5[$_set](t1$5, dart.notNull(t2$3) + 1), t2$3))) << 24 | dart.notNull(data[$_get]((t0$6 = ptr, t1$6 = 1, t2$4 = t0$6[$_get](t1$6), t0$6[$_set](t1$6, dart.notNull(t2$4) + 1), t2$4))) << 16 >>> 0 | dart.notNull(data[$_get]((t0$7 = ptr, t1$7 = 2, t2$5 = t0$7[$_get](t1$7), t0$7[$_set](t1$7, dart.notNull(t2$5) + 1), t2$5))) << 8 >>> 0) >>> 0;
                t0$8 = pixel;
                t1$8 = 0;
                t0$8[$_set](t1$8, dart.notNull(t0$8[$_get](t1$8)) + diff);
                for (let k = 0; k < 4; k = k + 1) {
                  this[_output].writeByte(pixelBytes[$_get](k));
                }
              }
              break;
            }
          }
        }
      }
      return Uint8ListL().as(this[_output].getBytes());
    }
  };
  (exr_pxr24_compressor.InternalExrPxr24Compressor.new = function(header, _maxScanLineSize, _numScanLines) {
    this[_zlib] = new zlib_decoder.ZLibDecoder.new();
    this[_output] = null;
    this[_maxScanLineSize$] = _maxScanLineSize;
    this[_numScanLines$0] = _numScanLines;
    exr_pxr24_compressor.InternalExrPxr24Compressor.__proto__.new.call(this, InternalExrPartL().as(header));
    ;
  }).prototype = exr_pxr24_compressor.InternalExrPxr24Compressor.prototype;
  dart.addTypeTests(exr_pxr24_compressor.InternalExrPxr24Compressor);
  dart.addTypeCaches(exr_pxr24_compressor.InternalExrPxr24Compressor);
  exr_pxr24_compressor.InternalExrPxr24Compressor[dart.implements] = () => [exr_pxr24_compressor.ExrPxr24Compressor];
  dart.setMethodSignature(exr_pxr24_compressor.InternalExrPxr24Compressor, () => ({
    __proto__: dart.getMethods(exr_pxr24_compressor.InternalExrPxr24Compressor.__proto__),
    numScanLines: dart.fnType(dart.legacy(core.int), [])
  }));
  dart.setLibraryUri(exr_pxr24_compressor.InternalExrPxr24Compressor, L3);
  dart.setFieldSignature(exr_pxr24_compressor.InternalExrPxr24Compressor, () => ({
    __proto__: dart.getFields(exr_pxr24_compressor.InternalExrPxr24Compressor.__proto__),
    [_zlib]: dart.finalFieldType(dart.legacy(zlib_decoder.ZLibDecoder)),
    [_maxScanLineSize$]: dart.finalFieldType(dart.legacy(core.int)),
    [_numScanLines$0]: dart.finalFieldType(dart.legacy(core.int)),
    [_output]: dart.fieldType(dart.legacy(output_buffer.OutputBuffer))
  }));
  exr_piz_compressor.ExrPizCompressor = class ExrPizCompressor extends exr_compressor.ExrCompressor {};
  dart.addTypeTests(exr_piz_compressor.ExrPizCompressor);
  dart.addTypeCaches(exr_piz_compressor.ExrPizCompressor);
  dart.setLibraryUri(exr_piz_compressor.ExrPizCompressor, L4);
  var _output$ = dart.privateName(exr_piz_compressor, "_output");
  var _channelData = dart.privateName(exr_piz_compressor, "_channelData");
  var _tmpBuffer = dart.privateName(exr_piz_compressor, "_tmpBuffer");
  var _maxScanLineSize$0 = dart.privateName(exr_piz_compressor, "_maxScanLineSize");
  var _numScanLines$1 = dart.privateName(exr_piz_compressor, "_numScanLines");
  var _reverseLutFromBitmap = dart.privateName(exr_piz_compressor, "_reverseLutFromBitmap");
  var _applyLut = dart.privateName(exr_piz_compressor, "_applyLut");
  exr_piz_compressor.InternalExrPizCompressor = class InternalExrPizCompressor extends exr_compressor.InternalExrCompressor {
    numScanLines() {
      return this[_numScanLines$1];
    }
    compress(inPtr, x, y, width = null, height = null) {
      dart.throw(new image_exception.ImageException.new("Piz compression not yet supported."));
    }
    uncompress(inPtr, x, y, width = null, height = null) {
      let t0, t1, t0$;
      width == null ? width = this.header.width : null;
      height == null ? height = this.header.linesInBuffer : null;
      let minX = x;
      let maxX = dart.notNull(x) + dart.notNull(width) - 1;
      let minY = y;
      let maxY = dart.notNull(y) + dart.notNull(height) - 1;
      if (maxX > dart.notNull(this.header.width)) {
        maxX = dart.notNull(this.header.width) - 1;
      }
      if (maxY > dart.notNull(this.header.height)) {
        maxY = dart.notNull(this.header.height) - 1;
      }
      this.decodedWidth = maxX - dart.notNull(minX) + 1;
      this.decodedHeight = maxY - dart.notNull(minY) + 1;
      let tmpBufferEnd = 0;
      let channels = this.header.channels;
      let numChannels = channels[$length];
      for (let i = 0; i < dart.notNull(numChannels); i = i + 1) {
        let ch = channels[$_get](i);
        let cd = this[_channelData][$_get](i);
        cd.start = tmpBufferEnd;
        cd.end = cd.start;
        cd.nx = this.numSamples(ch.xSampling, minX, maxX);
        cd.ny = this.numSamples(ch.ySampling, minY, maxY);
        cd.ys = ch.ySampling;
        cd.size = (dart.notNull(ch.size) / 2)[$truncate]();
        tmpBufferEnd = tmpBufferEnd + dart.notNull(cd.nx) * dart.notNull(cd.ny) * dart.notNull(cd.size);
      }
      let minNonZero = inPtr.readUint16();
      let maxNonZero = inPtr.readUint16();
      if (dart.notNull(maxNonZero) >= 8192) {
        dart.throw(new image_exception.ImageException.new("Error in header for PIZ-compressed data " + "(invalid bitmap size)."));
      }
      let bitmap = _native_typed_data.NativeUint8List.new(8192);
      if (dart.notNull(minNonZero) <= dart.notNull(maxNonZero)) {
        let b = inPtr.readBytes(dart.notNull(maxNonZero) - dart.notNull(minNonZero) + 1);
        for (let i = 0, j = minNonZero, len = b.length; i < dart.notNull(len); i = i + 1) {
          bitmap[$_set]((t0 = j, j = dart.notNull(t0) + 1, t0), b._get(i));
        }
      }
      let lut = _native_typed_data.NativeUint16List.new(65536);
      let maxValue = this[_reverseLutFromBitmap](bitmap, lut);
      let length = inPtr.readUint32();
      exr_huffman.ExrHuffman.uncompress(inPtr, length, this[_tmpBuffer], tmpBufferEnd);
      for (let i = 0; i < dart.notNull(numChannels); i = i + 1) {
        let cd = this[_channelData][$_get](i);
        for (let j = 0; j < dart.notNull(cd.size); j = j + 1) {
          exr_wavelet.ExrWavelet.decode(this[_tmpBuffer], dart.notNull(cd.start) + j, cd.nx, cd.size, cd.ny, dart.notNull(cd.nx) * dart.notNull(cd.size), maxValue);
        }
      }
      this[_applyLut](lut, this[_tmpBuffer], tmpBufferEnd);
      this[_output$] == null ? this[_output$] = new output_buffer.OutputBuffer.new({size: dart.notNull(this[_maxScanLineSize$0]) * dart.notNull(this[_numScanLines$1]) + (65536 + 8192)}) : null;
      this[_output$].rewind();
      for (let y = minY; dart.notNull(y) <= maxY; y = dart.notNull(y) + 1) {
        for (let i = 0; i < dart.notNull(numChannels); i = i + 1) {
          let cd = this[_channelData][$_get](i);
          if (y[$modulo](cd.ys) !== 0) {
            continue;
          }
          for (let x = dart.notNull(cd.nx) * dart.notNull(cd.size); x > 0; x = x - 1) {
            this[_output$].writeUint16(this[_tmpBuffer][$_get]((t0$ = cd, t1 = t0$.end, t0$.end = dart.notNull(t1) + 1, t1)));
          }
        }
      }
      return Uint8ListL().as(this[_output$].getBytes());
    }
    [_applyLut](lut, data, nData) {
      for (let i = 0; i < dart.notNull(nData); i = i + 1) {
        data[$_set](i, lut[$_get](data[$_get](i)));
      }
    }
    [_reverseLutFromBitmap](bitmap, lut) {
      let t0, t0$;
      let k = 0;
      for (let i = 0; i < 65536; i = i + 1) {
        if (i === 0 || (dart.notNull(bitmap[$_get](i[$rightShift](3))) & 1 << (i & 7)) !== 0) {
          lut[$_set]((t0 = k, k = t0 + 1, t0), i);
        }
      }
      let n = k - 1;
      while (k < 65536) {
        lut[$_set]((t0$ = k, k = t0$ + 1, t0$), 0);
      }
      return n;
    }
  };
  (exr_piz_compressor.InternalExrPizCompressor.new = function(header, _maxScanLineSize, _numScanLines) {
    this[_output$] = null;
    this[_channelData] = null;
    this[_tmpBuffer] = null;
    this[_maxScanLineSize$0] = _maxScanLineSize;
    this[_numScanLines$1] = _numScanLines;
    exr_piz_compressor.InternalExrPizCompressor.__proto__.new.call(this, InternalExrPartL().as(header));
    this[_channelData] = ListOf_PizChannelDataL().new(header.channels[$length]);
    for (let i = 0; i < dart.notNull(this[_channelData][$length]); i = i + 1) {
      this[_channelData][$_set](i, new exr_piz_compressor._PizChannelData.new());
    }
    let tmpBufferSize = (dart.notNull(this[_maxScanLineSize$0]) * dart.notNull(this[_numScanLines$1]) / 2)[$truncate]();
    this[_tmpBuffer] = _native_typed_data.NativeUint16List.new(tmpBufferSize);
  }).prototype = exr_piz_compressor.InternalExrPizCompressor.prototype;
  dart.addTypeTests(exr_piz_compressor.InternalExrPizCompressor);
  dart.addTypeCaches(exr_piz_compressor.InternalExrPizCompressor);
  exr_piz_compressor.InternalExrPizCompressor[dart.implements] = () => [exr_piz_compressor.ExrPizCompressor];
  dart.setMethodSignature(exr_piz_compressor.InternalExrPizCompressor, () => ({
    __proto__: dart.getMethods(exr_piz_compressor.InternalExrPizCompressor.__proto__),
    numScanLines: dart.fnType(dart.legacy(core.int), []),
    [_applyLut]: dart.fnType(dart.void, [dart.legacy(core.List$(dart.legacy(core.int))), dart.legacy(core.List$(dart.legacy(core.int))), dart.legacy(core.int)]),
    [_reverseLutFromBitmap]: dart.fnType(dart.legacy(core.int), [dart.legacy(typed_data.Uint8List), dart.legacy(typed_data.Uint16List)])
  }));
  dart.setLibraryUri(exr_piz_compressor.InternalExrPizCompressor, L4);
  dart.setFieldSignature(exr_piz_compressor.InternalExrPizCompressor, () => ({
    __proto__: dart.getFields(exr_piz_compressor.InternalExrPizCompressor.__proto__),
    [_output$]: dart.fieldType(dart.legacy(output_buffer.OutputBuffer)),
    [_maxScanLineSize$0]: dart.finalFieldType(dart.legacy(core.int)),
    [_numScanLines$1]: dart.finalFieldType(dart.legacy(core.int)),
    [_channelData]: dart.fieldType(dart.legacy(core.List$(dart.legacy(exr_piz_compressor._PizChannelData)))),
    [_tmpBuffer]: dart.fieldType(dart.legacy(typed_data.Uint16List))
  }));
  dart.defineLazy(exr_piz_compressor.InternalExrPizCompressor, {
    /*exr_piz_compressor.InternalExrPizCompressor.USHORT_RANGE*/get USHORT_RANGE() {
      return 65536;
    },
    /*exr_piz_compressor.InternalExrPizCompressor.BITMAP_SIZE*/get BITMAP_SIZE() {
      return 8192;
    }
  }, true);
  exr_piz_compressor._PizChannelData = class _PizChannelData extends core.Object {};
  (exr_piz_compressor._PizChannelData.new = function() {
    this.start = null;
    this.end = null;
    this.nx = null;
    this.ny = null;
    this.ys = null;
    this.size = null;
    ;
  }).prototype = exr_piz_compressor._PizChannelData.prototype;
  dart.addTypeTests(exr_piz_compressor._PizChannelData);
  dart.addTypeCaches(exr_piz_compressor._PizChannelData);
  dart.setLibraryUri(exr_piz_compressor._PizChannelData, L4);
  dart.setFieldSignature(exr_piz_compressor._PizChannelData, () => ({
    __proto__: dart.getFields(exr_piz_compressor._PizChannelData.__proto__),
    start: dart.fieldType(dart.legacy(core.int)),
    end: dart.fieldType(dart.legacy(core.int)),
    nx: dart.fieldType(dart.legacy(core.int)),
    ny: dart.fieldType(dart.legacy(core.int)),
    ys: dart.fieldType(dart.legacy(core.int)),
    size: dart.fieldType(dart.legacy(core.int))
  }));
  var _compressionType = dart.privateName(exr_part, "_compressionType");
  var _offsets = dart.privateName(exr_part, "_offsets");
  var _bytesPerLine = dart.privateName(exr_part, "_bytesPerLine");
  var _compressor = dart.privateName(exr_part, "_compressor");
  var _linesInBuffer = dart.privateName(exr_part, "_linesInBuffer");
  var _offsetInLineBuffer = dart.privateName(exr_part, "_offsetInLineBuffer");
  var _tileWidth = dart.privateName(exr_part, "_tileWidth");
  var _tileHeight = dart.privateName(exr_part, "_tileHeight");
  var _tileLevelMode = dart.privateName(exr_part, "_tileLevelMode");
  var _tileRoundingMode = dart.privateName(exr_part, "_tileRoundingMode");
  var _numXTiles = dart.privateName(exr_part, "_numXTiles");
  var _numYTiles = dart.privateName(exr_part, "_numYTiles");
  var _numXLevels = dart.privateName(exr_part, "_numXLevels");
  var _numYLevels = dart.privateName(exr_part, "_numYLevels");
  var _bytesPerPixel = dart.privateName(exr_part, "_bytesPerPixel");
  var _maxBytesPerTileLine = dart.privateName(exr_part, "_maxBytesPerTileLine");
  var _tiled$ = dart.privateName(exr_part, "_tiled");
  var _calculateNumXLevels = dart.privateName(exr_part, "_calculateNumXLevels");
  var _calculateNumYLevels = dart.privateName(exr_part, "_calculateNumYLevels");
  var _calculateNumTiles = dart.privateName(exr_part, "_calculateNumTiles");
  var _calculateBytesPerPixel = dart.privateName(exr_part, "_calculateBytesPerPixel");
  var _roundLog2 = dart.privateName(exr_part, "_roundLog2");
  var _floorLog2 = dart.privateName(exr_part, "_floorLog2");
  var _ceilLog2 = dart.privateName(exr_part, "_ceilLog2");
  var _levelSize = dart.privateName(exr_part, "_levelSize");
  var framebuffer = dart.privateName(exr_part, "ExrPart.framebuffer");
  var channels = dart.privateName(exr_part, "ExrPart.channels");
  var attributes = dart.privateName(exr_part, "ExrPart.attributes");
  var displayWindow = dart.privateName(exr_part, "ExrPart.displayWindow");
  var dataWindow = dart.privateName(exr_part, "ExrPart.dataWindow");
  var width = dart.privateName(exr_part, "ExrPart.width");
  var height = dart.privateName(exr_part, "ExrPart.height");
  var pixelAspectRatio = dart.privateName(exr_part, "ExrPart.pixelAspectRatio");
  var screenWindowCenterX = dart.privateName(exr_part, "ExrPart.screenWindowCenterX");
  var screenWindowCenterY = dart.privateName(exr_part, "ExrPart.screenWindowCenterY");
  var screenWindowWidth = dart.privateName(exr_part, "ExrPart.screenWindowWidth");
  var chromaticities = dart.privateName(exr_part, "ExrPart.chromaticities");
  exr_part.ExrPart = class ExrPart extends core.Object {
    get framebuffer() {
      return this[framebuffer];
    }
    set framebuffer(value) {
      this[framebuffer] = value;
    }
    get channels() {
      return this[channels];
    }
    set channels(value) {
      this[channels] = value;
    }
    get attributes() {
      return this[attributes];
    }
    set attributes(value) {
      this[attributes] = value;
    }
    get displayWindow() {
      return this[displayWindow];
    }
    set displayWindow(value) {
      this[displayWindow] = value;
    }
    get dataWindow() {
      return this[dataWindow];
    }
    set dataWindow(value) {
      this[dataWindow] = value;
    }
    get width() {
      return this[width];
    }
    set width(value) {
      this[width] = value;
    }
    get height() {
      return this[height];
    }
    set height(value) {
      this[height] = value;
    }
    get pixelAspectRatio() {
      return this[pixelAspectRatio];
    }
    set pixelAspectRatio(value) {
      this[pixelAspectRatio] = value;
    }
    get screenWindowCenterX() {
      return this[screenWindowCenterX];
    }
    set screenWindowCenterX(value) {
      this[screenWindowCenterX] = value;
    }
    get screenWindowCenterY() {
      return this[screenWindowCenterY];
    }
    set screenWindowCenterY(value) {
      this[screenWindowCenterY] = value;
    }
    get screenWindowWidth() {
      return this[screenWindowWidth];
    }
    set screenWindowWidth(value) {
      this[screenWindowWidth] = value;
    }
    get chromaticities() {
      return this[chromaticities];
    }
    set chromaticities(value) {
      this[chromaticities] = value;
    }
    get left() {
      return this.dataWindow[$_get](0);
    }
    get top() {
      return this.dataWindow[$_get](1);
    }
    get right() {
      return this.dataWindow[$_get](2);
    }
    get bottom() {
      return this.dataWindow[$_get](3);
    }
    get isValid() {
      return this.width != null;
    }
    [_calculateNumXLevels](minX, maxX, minY, maxY) {
      let num = 0;
      switch (this[_tileLevelMode]) {
        case 0:
        {
          num = 1;
          break;
        }
        case 1:
        {
          let w = dart.notNull(maxX) - dart.notNull(minX) + 1;
          let h = dart.notNull(maxY) - dart.notNull(minY) + 1;
          num = dart.notNull(this[_roundLog2](math.max(intL(), w, h), this[_tileRoundingMode])) + 1;
          break;
        }
        case 2:
        {
          let w = dart.notNull(maxX) - dart.notNull(minX) + 1;
          num = dart.notNull(this[_roundLog2](w, this[_tileRoundingMode])) + 1;
          break;
        }
        default:
        {
          dart.throw(new image_exception.ImageException.new("Unknown LevelMode format."));
        }
      }
      return num;
    }
    [_calculateNumYLevels](minX, maxX, minY, maxY) {
      let num = 0;
      switch (this[_tileLevelMode]) {
        case 0:
        {
          num = 1;
          break;
        }
        case 1:
        {
          let w = dart.notNull(maxX) - dart.notNull(minX) + 1;
          let h = dart.notNull(maxY) - dart.notNull(minY) + 1;
          num = dart.notNull(this[_roundLog2](math.max(intL(), w, h), this[_tileRoundingMode])) + 1;
          break;
        }
        case 2:
        {
          let h = dart.notNull(maxY) - dart.notNull(minY) + 1;
          num = dart.notNull(this[_roundLog2](h, this[_tileRoundingMode])) + 1;
          break;
        }
        default:
        {
          dart.throw(new image_exception.ImageException.new("Unknown LevelMode format."));
        }
      }
      return num;
    }
    [_roundLog2](x, rmode) {
      return rmode === 0 ? this[_floorLog2](x) : this[_ceilLog2](x);
    }
    [_floorLog2](x) {
      let y = 0;
      while (dart.notNull(x) > 1) {
        y = y + 1;
        x = x[$rightShift](1);
      }
      return y;
    }
    [_ceilLog2](x) {
      let y = 0;
      let r = 0;
      while (dart.notNull(x) > 1) {
        if ((dart.notNull(x) & 1) !== 0) {
          r = 1;
        }
        y = y + 1;
        x = x[$rightShift](1);
      }
      return y + r;
    }
    [_calculateBytesPerPixel]() {
      let bytesPerPixel = 0;
      for (let ch of this.channels) {
        bytesPerPixel = bytesPerPixel + dart.notNull(ch.size);
      }
      return bytesPerPixel;
    }
    [_calculateNumTiles](numTiles, numLevels, min, max, size, rmode) {
      for (let i = 0; i < dart.notNull(numLevels); i = i + 1) {
        numTiles[$_set](i, ((dart.notNull(this[_levelSize](min, max, i, rmode)) + dart.notNull(size) - 1) / dart.notNull(size))[$truncate]());
      }
    }
    [_levelSize](_min, _max, l, rmode) {
      if (dart.notNull(l) < 0) {
        dart.throw(new image_exception.ImageException.new("Argument not in valid range."));
      }
      let a = dart.notNull(_max) - dart.notNull(_min) + 1;
      let b = (1)[$leftShift](l);
      let size = (a / b)[$truncate]();
      if (rmode === 1 && size * b < a) {
        size = size + 1;
      }
      return math.max(intL(), size, 1);
    }
  };
  (exr_part.ExrPart.new = function(_tiled, input) {
    let t1, t0;
    this[framebuffer] = new hdr_image.HdrImage.new();
    this[channels] = JSArrayOfExrChannelL().of([]);
    this[attributes] = new (IdentityMapOfStringL$ExrAttributeL()).new();
    this[displayWindow] = null;
    this[dataWindow] = null;
    this[width] = null;
    this[height] = null;
    this[pixelAspectRatio] = 1.0;
    this[screenWindowCenterX] = 0.0;
    this[screenWindowCenterY] = 0.0;
    this[screenWindowWidth] = 1.0;
    this[chromaticities] = null;
    this[_compressionType] = 0;
    this[_offsets] = null;
    this[_bytesPerLine] = null;
    this[_compressor] = null;
    this[_linesInBuffer] = null;
    this[_offsetInLineBuffer] = null;
    this[_tileWidth] = null;
    this[_tileHeight] = null;
    this[_tileLevelMode] = null;
    this[_tileRoundingMode] = null;
    this[_numXTiles] = null;
    this[_numYTiles] = null;
    this[_numXLevels] = null;
    this[_numYLevels] = null;
    this[_bytesPerPixel] = null;
    this[_maxBytesPerTileLine] = null;
    this[_tiled$] = _tiled;
    while (true) {
      let name = input.readString();
      if (name == null || name[$isEmpty]) {
        break;
      }
      let type = input.readString();
      let size = input.readUint32();
      let value = input.readBytes(size);
      this.attributes[$_set](name, new exr_attribute.ExrAttribute.new(name, type, size, value));
      switch (name) {
        case "channels":
        {
          while (true) {
            let channel = new exr_channel.ExrChannel.new(value);
            if (!dart.test(channel.isValid)) {
              break;
            }
            this.channels[$add](channel);
          }
          break;
        }
        case "chromaticities":
        {
          this.chromaticities = _native_typed_data.NativeFloat32List.new(8);
          this.chromaticities[$_set](0, value.readFloat32());
          this.chromaticities[$_set](1, value.readFloat32());
          this.chromaticities[$_set](2, value.readFloat32());
          this.chromaticities[$_set](3, value.readFloat32());
          this.chromaticities[$_set](4, value.readFloat32());
          this.chromaticities[$_set](5, value.readFloat32());
          this.chromaticities[$_set](6, value.readFloat32());
          this.chromaticities[$_set](7, value.readFloat32());
          break;
        }
        case "compression":
        {
          this[_compressionType] = value.readByte();
          if (dart.notNull(this[_compressionType]) > 7) {
            dart.throw(new image_exception.ImageException.new("EXR Invalid compression type"));
          }
          break;
        }
        case "dataWindow":
        {
          this.dataWindow = JSArrayOfintL().of([value.readInt32(), value.readInt32(), value.readInt32(), value.readInt32()]);
          this.width = dart.notNull(this.dataWindow[$_get](2)) - dart.notNull(this.dataWindow[$_get](0)) + 1;
          this.height = dart.notNull(this.dataWindow[$_get](3)) - dart.notNull(this.dataWindow[$_get](1)) + 1;
          break;
        }
        case "displayWindow":
        {
          this.displayWindow = JSArrayOfintL().of([value.readInt32(), value.readInt32(), value.readInt32(), value.readInt32()]);
          break;
        }
        case "lineOrder":
        {
          break;
        }
        case "pixelAspectRatio":
        {
          this.pixelAspectRatio = value.readFloat32();
          break;
        }
        case "screenWindowCenter":
        {
          this.screenWindowCenterX = value.readFloat32();
          this.screenWindowCenterY = value.readFloat32();
          break;
        }
        case "screenWindowWidth":
        {
          this.screenWindowWidth = value.readFloat32();
          break;
        }
        case "tiles":
        {
          this[_tileWidth] = value.readUint32();
          this[_tileHeight] = value.readUint32();
          let mode = value.readByte();
          this[_tileLevelMode] = dart.notNull(mode) & 15;
          this[_tileRoundingMode] = dart.notNull(mode) >> 4 & 15;
          break;
        }
        case "type":
        {
          let s = value.readString();
          if (s === "deepscanline") {
          } else if (s === "deeptile") {
          } else {
            dart.throw(new image_exception.ImageException.new("EXR Invalid type: " + dart.str(s)));
          }
          break;
        }
        default:
        {
          break;
        }
      }
    }
    if (dart.test(this[_tiled$])) {
      this[_numXLevels] = this[_calculateNumXLevels](this.left, this.right, this.top, this.bottom);
      this[_numYLevels] = this[_calculateNumYLevels](this.left, this.right, this.top, this.bottom);
      if (this[_tileLevelMode] !== 2) {
        this[_numYLevels] = 1;
      }
      this[_numXTiles] = ListOfintL().new(this[_numXLevels]);
      this[_numYTiles] = ListOfintL().new(this[_numYLevels]);
      this[_calculateNumTiles](this[_numXTiles], this[_numXLevels], this.left, this.right, this[_tileWidth], this[_tileRoundingMode]);
      this[_calculateNumTiles](this[_numYTiles], this[_numYLevels], this.top, this.bottom, this[_tileHeight], this[_tileRoundingMode]);
      this[_bytesPerPixel] = this[_calculateBytesPerPixel]();
      this[_maxBytesPerTileLine] = dart.notNull(this[_bytesPerPixel]) * dart.notNull(this[_tileWidth]);
      this[_compressor] = exr_compressor.ExrCompressor.new(this[_compressionType], this, this[_maxBytesPerTileLine], this[_tileHeight]);
      this[_offsets] = ListOfUint32ListL().new(dart.notNull(this[_numXLevels]) * dart.notNull(this[_numYLevels]));
      for (let ly = 0, l = 0; ly < dart.notNull(this[_numYLevels]); ly = ly + 1) {
        for (let lx = 0; lx < dart.notNull(this[_numXLevels]); lx = lx + 1, l = l + 1) {
          this[_offsets][$_set](l, _native_typed_data.NativeUint32List.new(dart.notNull(this[_numXTiles][$_get](lx)) * dart.notNull(this[_numYTiles][$_get](ly))));
        }
      }
    } else {
      this[_bytesPerLine] = _native_typed_data.NativeUint32List.new(dart.notNull(this.height) + 1);
      for (let ch of this.channels) {
        let nBytes = (dart.notNull(ch.size) * dart.notNull(this.width) / dart.notNull(ch.xSampling))[$truncate]();
        for (let y = 0; y < dart.notNull(this.height); y = y + 1) {
          if ((y + dart.notNull(this.top))[$modulo](ch.ySampling) === 0) {
            t0 = this[_bytesPerLine];
            t1 = y;
            t0[$_set](t1, dart.notNull(t0[$_get](t1)) + nBytes);
          }
        }
      }
      let maxBytesPerLine = 0;
      for (let y = 0; y < dart.notNull(this.height); y = y + 1) {
        maxBytesPerLine = math.max(intL(), maxBytesPerLine, this[_bytesPerLine][$_get](y));
      }
      this[_compressor] = exr_compressor.ExrCompressor.new(this[_compressionType], this, maxBytesPerLine);
      this[_linesInBuffer] = this[_compressor].numScanLines();
      this[_offsetInLineBuffer] = _native_typed_data.NativeUint32List.new(this[_bytesPerLine][$length]);
      let offset = 0;
      for (let i = 0; i <= dart.notNull(this[_bytesPerLine][$length]) - 1; i = i + 1) {
        if (i[$modulo](this[_linesInBuffer]) === 0) {
          offset = 0;
        }
        this[_offsetInLineBuffer][$_set](i, offset);
        offset = offset + dart.notNull(this[_bytesPerLine][$_get](i));
      }
      let numOffsets = ((dart.notNull(this.height) + dart.notNull(this[_linesInBuffer])) / dart.notNull(this[_linesInBuffer]))[$truncate]() - 1;
      this[_offsets] = JSArrayOfUint32ListL().of([_native_typed_data.NativeUint32List.new(numOffsets)]);
    }
  }).prototype = exr_part.ExrPart.prototype;
  dart.addTypeTests(exr_part.ExrPart);
  dart.addTypeCaches(exr_part.ExrPart);
  dart.setMethodSignature(exr_part.ExrPart, () => ({
    __proto__: dart.getMethods(exr_part.ExrPart.__proto__),
    [_calculateNumXLevels]: dart.fnType(dart.legacy(core.int), [dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int)]),
    [_calculateNumYLevels]: dart.fnType(dart.legacy(core.int), [dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int)]),
    [_roundLog2]: dart.fnType(dart.legacy(core.int), [dart.legacy(core.int), dart.legacy(core.int)]),
    [_floorLog2]: dart.fnType(dart.legacy(core.int), [dart.legacy(core.int)]),
    [_ceilLog2]: dart.fnType(dart.legacy(core.int), [dart.legacy(core.int)]),
    [_calculateBytesPerPixel]: dart.fnType(dart.legacy(core.int), []),
    [_calculateNumTiles]: dart.fnType(dart.void, [dart.legacy(core.List$(dart.legacy(core.int))), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int)]),
    [_levelSize]: dart.fnType(dart.legacy(core.int), [dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int)])
  }));
  dart.setGetterSignature(exr_part.ExrPart, () => ({
    __proto__: dart.getGetters(exr_part.ExrPart.__proto__),
    left: dart.legacy(core.int),
    top: dart.legacy(core.int),
    right: dart.legacy(core.int),
    bottom: dart.legacy(core.int),
    isValid: dart.legacy(core.bool)
  }));
  dart.setLibraryUri(exr_part.ExrPart, L5);
  dart.setFieldSignature(exr_part.ExrPart, () => ({
    __proto__: dart.getFields(exr_part.ExrPart.__proto__),
    framebuffer: dart.fieldType(dart.legacy(hdr_image.HdrImage)),
    channels: dart.fieldType(dart.legacy(core.List$(dart.legacy(exr_channel.ExrChannel)))),
    attributes: dart.fieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(exr_attribute.ExrAttribute)))),
    displayWindow: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.int)))),
    dataWindow: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.int)))),
    width: dart.fieldType(dart.legacy(core.int)),
    height: dart.fieldType(dart.legacy(core.int)),
    pixelAspectRatio: dart.fieldType(dart.legacy(core.double)),
    screenWindowCenterX: dart.fieldType(dart.legacy(core.double)),
    screenWindowCenterY: dart.fieldType(dart.legacy(core.double)),
    screenWindowWidth: dart.fieldType(dart.legacy(core.double)),
    chromaticities: dart.fieldType(dart.legacy(typed_data.Float32List)),
    [_compressionType]: dart.fieldType(dart.legacy(core.int)),
    [_offsets]: dart.fieldType(dart.legacy(core.List$(dart.legacy(typed_data.Uint32List)))),
    [_bytesPerLine]: dart.fieldType(dart.legacy(typed_data.Uint32List)),
    [_compressor]: dart.fieldType(dart.legacy(exr_compressor.ExrCompressor)),
    [_linesInBuffer]: dart.fieldType(dart.legacy(core.int)),
    [_offsetInLineBuffer]: dart.fieldType(dart.legacy(typed_data.Uint32List)),
    [_tiled$]: dart.finalFieldType(dart.legacy(core.bool)),
    [_tileWidth]: dart.fieldType(dart.legacy(core.int)),
    [_tileHeight]: dart.fieldType(dart.legacy(core.int)),
    [_tileLevelMode]: dart.fieldType(dart.legacy(core.int)),
    [_tileRoundingMode]: dart.fieldType(dart.legacy(core.int)),
    [_numXTiles]: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.int)))),
    [_numYTiles]: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.int)))),
    [_numXLevels]: dart.fieldType(dart.legacy(core.int)),
    [_numYLevels]: dart.fieldType(dart.legacy(core.int)),
    [_bytesPerPixel]: dart.fieldType(dart.legacy(core.int)),
    [_maxBytesPerTileLine]: dart.fieldType(dart.legacy(core.int))
  }));
  dart.defineLazy(exr_part.ExrPart, {
    /*exr_part.ExrPart.TYPE_SCANLINE*/get TYPE_SCANLINE() {
      return 0;
    },
    /*exr_part.ExrPart.TYPE_TILE*/get TYPE_TILE() {
      return 1;
    },
    /*exr_part.ExrPart.TYPE_DEEP_SCANLINE*/get TYPE_DEEP_SCANLINE() {
      return 2;
    },
    /*exr_part.ExrPart.TYPE_DEEP_TILE*/get TYPE_DEEP_TILE() {
      return 3;
    },
    /*exr_part.ExrPart.INCREASING_Y*/get INCREASING_Y() {
      return 0;
    },
    /*exr_part.ExrPart.DECREASING_Y*/get DECREASING_Y() {
      return 1;
    },
    /*exr_part.ExrPart.RANDOM_Y*/get RANDOM_Y() {
      return 2;
    },
    /*exr_part.ExrPart.ONE_LEVEL*/get ONE_LEVEL() {
      return 0;
    },
    /*exr_part.ExrPart.MIPMAP_LEVELS*/get MIPMAP_LEVELS() {
      return 1;
    },
    /*exr_part.ExrPart.RIPMAP_LEVELS*/get RIPMAP_LEVELS() {
      return 2;
    },
    /*exr_part.ExrPart.ROUND_DOWN*/get ROUND_DOWN() {
      return 0;
    },
    /*exr_part.ExrPart.ROUND_UP*/get ROUND_UP() {
      return 1;
    }
  }, true);
  exr_part.InternalExrPart = class InternalExrPart extends exr_part.ExrPart {
    get offsets() {
      return this[_offsets];
    }
    get compressor() {
      return this[_compressor];
    }
    get linesInBuffer() {
      return this[_linesInBuffer];
    }
    get offsetInLineBuffer() {
      return this[_offsetInLineBuffer];
    }
    get tiled() {
      return this[_tiled$];
    }
    get tileWidth() {
      return this[_tileWidth];
    }
    get tileHeight() {
      return this[_tileHeight];
    }
    get numXTiles() {
      return this[_numXTiles];
    }
    get numYTiles() {
      return this[_numYTiles];
    }
    get numXLevels() {
      return this[_numXLevels];
    }
    get numYLevels() {
      return this[_numYLevels];
    }
    readOffsets(input) {
      if (dart.test(this[_tiled$])) {
        for (let i = 0; i < dart.notNull(this[_offsets][$length]); i = i + 1) {
          for (let j = 0; j < dart.notNull(this[_offsets][$_get](i)[$length]); j = j + 1) {
            this[_offsets][$_get](i)[$_set](j, input.readUint64());
          }
        }
      } else {
        let numOffsets = this[_offsets][$_get](0)[$length];
        for (let i = 0; i < dart.notNull(numOffsets); i = i + 1) {
          this[_offsets][$_get](0)[$_set](i, input.readUint64());
        }
      }
    }
  };
  (exr_part.InternalExrPart.new = function(tiled, input) {
    exr_part.InternalExrPart.__proto__.new.call(this, tiled, input);
    ;
  }).prototype = exr_part.InternalExrPart.prototype;
  dart.addTypeTests(exr_part.InternalExrPart);
  dart.addTypeCaches(exr_part.InternalExrPart);
  dart.setMethodSignature(exr_part.InternalExrPart, () => ({
    __proto__: dart.getMethods(exr_part.InternalExrPart.__proto__),
    readOffsets: dart.fnType(dart.void, [dart.legacy(input_buffer.InputBuffer)])
  }));
  dart.setGetterSignature(exr_part.InternalExrPart, () => ({
    __proto__: dart.getGetters(exr_part.InternalExrPart.__proto__),
    offsets: dart.legacy(core.List$(dart.legacy(typed_data.Uint32List))),
    compressor: dart.legacy(exr_compressor.ExrCompressor),
    linesInBuffer: dart.legacy(core.int),
    offsetInLineBuffer: dart.legacy(typed_data.Uint32List),
    tiled: dart.legacy(core.bool),
    tileWidth: dart.legacy(core.int),
    tileHeight: dart.legacy(core.int),
    numXTiles: dart.legacy(core.List$(dart.legacy(core.int))),
    numYTiles: dart.legacy(core.List$(dart.legacy(core.int))),
    numXLevels: dart.legacy(core.int),
    numYLevels: dart.legacy(core.int)
  }));
  dart.setLibraryUri(exr_part.InternalExrPart, L5);
  exr_b44_compressor.ExrB44Compressor = class ExrB44Compressor extends exr_compressor.ExrCompressor {};
  dart.addTypeTests(exr_b44_compressor.ExrB44Compressor);
  dart.addTypeCaches(exr_b44_compressor.ExrB44Compressor);
  dart.setLibraryUri(exr_b44_compressor.ExrB44Compressor, L6);
  var _numScanLines$2 = dart.privateName(exr_b44_compressor, "_numScanLines");
  exr_b44_compressor.InternalExrB44Compressor = class InternalExrB44Compressor extends exr_compressor.InternalExrCompressor {
    numScanLines() {
      return this[_numScanLines$2];
    }
    compress(inPtr, x, y, width = null, height = null) {
      dart.throw(new image_exception.ImageException.new("B44 compression not yet supported."));
    }
    uncompress(inPtr, x, y, width = null, height = null) {
      dart.throw(new image_exception.ImageException.new("B44 compression not yet supported."));
    }
  };
  (exr_b44_compressor.InternalExrB44Compressor.new = function(header, maxScanLineSize, _numScanLines, optFlatFields) {
    this[_numScanLines$2] = _numScanLines;
    exr_b44_compressor.InternalExrB44Compressor.__proto__.new.call(this, InternalExrPartL().as(header));
    ;
  }).prototype = exr_b44_compressor.InternalExrB44Compressor.prototype;
  dart.addTypeTests(exr_b44_compressor.InternalExrB44Compressor);
  dart.addTypeCaches(exr_b44_compressor.InternalExrB44Compressor);
  exr_b44_compressor.InternalExrB44Compressor[dart.implements] = () => [exr_b44_compressor.ExrB44Compressor];
  dart.setMethodSignature(exr_b44_compressor.InternalExrB44Compressor, () => ({
    __proto__: dart.getMethods(exr_b44_compressor.InternalExrB44Compressor.__proto__),
    numScanLines: dart.fnType(dart.legacy(core.int), [])
  }));
  dart.setLibraryUri(exr_b44_compressor.InternalExrB44Compressor, L6);
  dart.setFieldSignature(exr_b44_compressor.InternalExrB44Compressor, () => ({
    __proto__: dart.getFields(exr_b44_compressor.InternalExrB44Compressor.__proto__),
    [_numScanLines$2]: dart.finalFieldType(dart.legacy(core.int))
  }));
  dart.trackLibraries("packages/image/src/formats/exr/exr_zip_compressor.dart", {
    "package:image/src/formats/exr/exr_zip_compressor.dart": exr_zip_compressor,
    "package:image/src/formats/exr/exr_rle_compressor.dart": exr_rle_compressor,
    "package:image/src/formats/exr/exr_pxr24_compressor.dart": exr_pxr24_compressor,
    "package:image/src/formats/exr/exr_piz_compressor.dart": exr_piz_compressor,
    "package:image/src/formats/exr/exr_part.dart": exr_part,
    "package:image/src/formats/exr/exr_compressor.dart": exr_compressor,
    "package:image/src/formats/exr/exr_b44_compressor.dart": exr_b44_compressor
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["exr_compressor.dart","exr_zip_compressor.dart","exr_rle_compressor.dart","exr_pxr24_compressor.dart","exr_piz_compressor.dart","exr_part.dart","exr_b44_compressor.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../packages/image/src/formats/exr/exr_zip_compressor.dart.lib.js"}');
  // Exports:
  return {
    src__formats__exr__exr_zip_compressor: exr_zip_compressor,
    src__formats__exr__exr_rle_compressor: exr_rle_compressor,
    src__formats__exr__exr_pxr24_compressor: exr_pxr24_compressor,
    src__formats__exr__exr_piz_compressor: exr_piz_compressor,
    src__formats__exr__exr_part: exr_part,
    src__formats__exr__exr_compressor: exr_compressor,
    src__formats__exr__exr_b44_compressor: exr_b44_compressor
  };
}));

//# sourceMappingURL=exr_zip_compressor.dart.lib.js.map
