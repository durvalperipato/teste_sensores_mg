define(['dart_sdk'], (function load__packages__pdf__src__pdf__color_dart(dart_sdk) {
  'use strict';
  const core = dart_sdk.core;
  const math = dart_sdk.math;
  const _interceptors = dart_sdk._interceptors;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  var color$ = Object.create(dart.library);
  var $rightShift = dartx['>>'];
  var $startsWith = dartx.startsWith;
  var $substring = dartx.substring;
  var $times = dartx['*'];
  var $_get = dartx._get;
  var $round = dartx.round;
  var $toRadixString = dartx.toRadixString;
  var $clamp = dartx.clamp;
  var $runtimeType = dartx.runtimeType;
  var $toString = dartx.toString;
  var $_equals = dartx._equals;
  var $hashCode = dartx.hashCode;
  var $modulo = dartx['%'];
  var $abs = dartx.abs;
  var $isNaN = dartx.isNaN;
  var doubleL = () => (doubleL = dart.constFn(dart.legacy(core.double)))();
  var ListOfdoubleL = () => (ListOfdoubleL = dart.constFn(core.List$(doubleL())))();
  var ListLOfdoubleL = () => (ListLOfdoubleL = dart.constFn(dart.legacy(ListOfdoubleL())))();
  var doubleLAnddoubleLAnddoubleLTodoubleL = () => (doubleLAnddoubleLAnddoubleLTodoubleL = dart.constFn(dart.fnType(doubleL(), [doubleL(), doubleL(), doubleL()])))();
  var PdfColorL = () => (PdfColorL = dart.constFn(dart.legacy(color$.PdfColor)))();
  var PdfColorHsvL = () => (PdfColorHsvL = dart.constFn(dart.legacy(color$.PdfColorHsv)))();
  var JSArrayOfPdfColorHsvL = () => (JSArrayOfPdfColorHsvL = dart.constFn(_interceptors.JSArray$(PdfColorHsvL())))();
  const CT = Object.create(null);
  var L0 = "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-2.0.0/lib/src/pdf/color.dart";
  var L1 = "package:pdf/src/pdf/color.dart";
  dart.defineLazy(CT, {
    get C1() {
      return C1 = dart.constList([1, 1, 1], doubleL());
    },
    get C2() {
      return C2 = dart.constList([1, 1, 0], doubleL());
    },
    get C3() {
      return C3 = dart.constList([1, 0, 0], doubleL());
    },
    get C4() {
      return C4 = dart.constList([1, 0.5, 0], doubleL());
    },
    get C5() {
      return C5 = dart.constList([0.163, 0.373, 0.6], doubleL());
    },
    get C6() {
      return C6 = dart.constList([0, 0.66, 0.2], doubleL());
    },
    get C7() {
      return C7 = dart.constList([0.5, 0, 0.5], doubleL());
    },
    get C8() {
      return C8 = dart.constList([0.2, 0.094, 0], doubleL());
    },
    get C0() {
      return C0 = dart.constList([C1 || CT.C1, C2 || CT.C2, C3 || CT.C3, C4 || CT.C4, C5 || CT.C5, C6 || CT.C6, C7 || CT.C7, C8 || CT.C8], ListLOfdoubleL());
    }
  }, false);
  var C1;
  var C2;
  var C3;
  var C4;
  var C5;
  var C6;
  var C7;
  var C8;
  var C0;
  var alpha$ = dart.privateName(color$, "PdfColor.alpha");
  var red$ = dart.privateName(color$, "PdfColor.red");
  var green$ = dart.privateName(color$, "PdfColor.green");
  var blue$ = dart.privateName(color$, "PdfColor.blue");
  color$.PdfColor = class PdfColor extends core.Object {
    get alpha() {
      return this[alpha$];
    }
    set alpha(value) {
      super.alpha = value;
    }
    get red() {
      return this[red$];
    }
    set red(value) {
      super.red = value;
    }
    get green() {
      return this[green$];
    }
    set green(value) {
      super.green = value;
    }
    get blue() {
      return this[blue$];
    }
    set blue(value) {
      super.blue = value;
    }
    static fromHex(color) {
      if (color[$startsWith]("#")) {
        color = color[$substring](1);
      }
      let red = null;
      let green = null;
      let blue = null;
      let alpha = 1.0;
      if (color.length === 3) {
        red = dart.notNull(core.int.parse(color[$substring](0, 1)[$times](2), {radix: 16})) / 255;
        green = dart.notNull(core.int.parse(color[$substring](1, 2)[$times](2), {radix: 16})) / 255;
        blue = dart.notNull(core.int.parse(color[$substring](2, 3)[$times](2), {radix: 16})) / 255;
        return new color$.PdfColor.new(red, green, blue, alpha);
      }
      if (!(color.length === 3 || color.length === 6 || color.length === 8)) dart.assertFailed(null, L0, 60, 12, "color.length == 3 || color.length == 6 || color.length == 8");
      red = dart.notNull(core.int.parse(color[$substring](0, 2), {radix: 16})) / 255;
      green = dart.notNull(core.int.parse(color[$substring](2, 4), {radix: 16})) / 255;
      blue = dart.notNull(core.int.parse(color[$substring](4, 6), {radix: 16})) / 255;
      if (color.length === 8) {
        alpha = dart.notNull(core.int.parse(color[$substring](6, 8), {radix: 16})) / 255;
      }
      return new color$.PdfColor.new(red, green, blue, alpha);
    }
    static fromRYB(red, yellow, blue, alpha = 1) {
      if (!(dart.notNull(red) >= 0 && dart.notNull(red) <= 1)) dart.assertFailed(null, L0, 76, 12, "red >= 0 && red <= 1");
      if (!(dart.notNull(yellow) >= 0 && dart.notNull(yellow) <= 1)) dart.assertFailed(null, L0, 77, 12, "yellow >= 0 && yellow <= 1");
      if (!(dart.notNull(blue) >= 0 && dart.notNull(blue) <= 1)) dart.assertFailed(null, L0, 78, 12, "blue >= 0 && blue <= 1");
      if (!(dart.notNull(alpha) >= 0 && dart.notNull(alpha) <= 1)) dart.assertFailed(null, L0, 79, 12, "alpha >= 0 && alpha <= 1");
      let magic = C0 || CT.C0;
      function cubicInt(t, A, B) {
        let weight = dart.notNull(t) * dart.notNull(t) * (3 - 2 * dart.notNull(t));
        return dart.notNull(A) + weight * (dart.notNull(B) - dart.notNull(A));
      }
      dart.fn(cubicInt, doubleLAnddoubleLAnddoubleLTodoubleL());
      function getRed(iR, iY, iB) {
        let x0 = cubicInt(iB, magic[$_get](0)[$_get](0), magic[$_get](4)[$_get](0));
        let x1 = cubicInt(iB, magic[$_get](1)[$_get](0), magic[$_get](5)[$_get](0));
        let x2 = cubicInt(iB, magic[$_get](2)[$_get](0), magic[$_get](6)[$_get](0));
        let x3 = cubicInt(iB, magic[$_get](3)[$_get](0), magic[$_get](7)[$_get](0));
        let y0 = cubicInt(iY, x0, x1);
        let y1 = cubicInt(iY, x2, x3);
        return cubicInt(iR, y0, y1);
      }
      dart.fn(getRed, doubleLAnddoubleLAnddoubleLTodoubleL());
      function getGreen(iR, iY, iB) {
        let x0 = cubicInt(iB, magic[$_get](0)[$_get](1), magic[$_get](4)[$_get](1));
        let x1 = cubicInt(iB, magic[$_get](1)[$_get](1), magic[$_get](5)[$_get](1));
        let x2 = cubicInt(iB, magic[$_get](2)[$_get](1), magic[$_get](6)[$_get](1));
        let x3 = cubicInt(iB, magic[$_get](3)[$_get](1), magic[$_get](7)[$_get](1));
        let y0 = cubicInt(iY, x0, x1);
        let y1 = cubicInt(iY, x2, x3);
        return cubicInt(iR, y0, y1);
      }
      dart.fn(getGreen, doubleLAnddoubleLAnddoubleLTodoubleL());
      function getBlue(iR, iY, iB) {
        let x0 = cubicInt(iB, magic[$_get](0)[$_get](2), magic[$_get](4)[$_get](2));
        let x1 = cubicInt(iB, magic[$_get](1)[$_get](2), magic[$_get](5)[$_get](2));
        let x2 = cubicInt(iB, magic[$_get](2)[$_get](2), magic[$_get](6)[$_get](2));
        let x3 = cubicInt(iB, magic[$_get](3)[$_get](2), magic[$_get](7)[$_get](2));
        let y0 = cubicInt(iY, x0, x1);
        let y1 = cubicInt(iY, x2, x3);
        return cubicInt(iR, y0, y1);
      }
      dart.fn(getBlue, doubleLAnddoubleLAnddoubleLTodoubleL());
      let redValue = getRed(red, yellow, blue);
      let greenValue = getGreen(red, yellow, blue);
      let blueValue = getBlue(red, yellow, blue);
      return new color$.PdfColor.new(redValue, greenValue, blueValue, alpha);
    }
    toInt() {
      return ((((dart.notNull(this.alpha) * 255.0)[$round]() & 255) << 24 | ((dart.notNull(this.red) * 255.0)[$round]() & 255) << 16 | ((dart.notNull(this.green) * 255.0)[$round]() & 255) << 8 | ((dart.notNull(this.blue) * 255.0)[$round]() & 255) << 0) & 4294967295) >>> 0;
    }
    toHex() {
      let i = this.toInt();
      let rgb = (dart.notNull(i) & 16777215)[$toRadixString](16);
      let a = ((dart.notNull(i) & 4278190080) >>> 24)[$toRadixString](16);
      return "#" + rgb + a;
    }
    toCmyk() {
      return new color$.PdfColorCmyk.fromRgb(this.red, this.green, this.blue, this.alpha);
    }
    toHsv() {
      return color$.PdfColorHsv.fromRgb(this.red, this.green, this.blue, this.alpha);
    }
    toHsl() {
      return color$.PdfColorHsl.fromRgb(this.red, this.green, this.blue, this.alpha);
    }
    static _linearizeColorComponent(component) {
      if (dart.notNull(component) <= 0.03928) {
        return dart.notNull(component) / 12.92;
      }
      return math.pow((dart.notNull(component) + 0.055) / 1.055, 2.4);
    }
    get luminance() {
      let R = color$.PdfColor._linearizeColorComponent(this.red);
      let G = color$.PdfColor._linearizeColorComponent(this.green);
      let B = color$.PdfColor._linearizeColorComponent(this.blue);
      return 0.2126 * dart.notNull(R) + 0.7152 * dart.notNull(G) + 0.0722 * dart.notNull(B);
    }
    shade(strength) {
      let ds = 1.5 - dart.notNull(strength);
      let hsl = this.toHsl();
      return color$.PdfColorHsl.new(hsl.hue, hsl.saturation, (dart.notNull(hsl.lightness) * ds)[$clamp](0.0, 1.0));
    }
    get complementary() {
      return this.toHsv().complementary;
    }
    get monochromatic() {
      return this.toHsv().monochromatic;
    }
    get splitcomplementary() {
      return this.toHsv().splitcomplementary;
    }
    get tetradic() {
      return this.toHsv().tetradic;
    }
    get triadic() {
      return this.toHsv().triadic;
    }
    get analagous() {
      return this.toHsv().analagous;
    }
    toString() {
      return dart.str(this.runtimeType) + "(" + dart.str(this.red) + ", " + dart.str(this.green) + ", " + dart.str(this.blue) + ", " + dart.str(this.alpha) + ")";
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!dart.equals(dart.runtimeType(other), this.runtimeType)) {
        return false;
      }
      return PdfColorL().is(other) && other.red == this.red && other.green == this.green && other.blue == this.blue && other.alpha == this.alpha;
    }
    get hashCode() {
      return this.toInt();
    }
  };
  (color$.PdfColor.new = function(red, green, blue, alpha = 1) {
    this[red$] = red;
    this[green$] = green;
    this[blue$] = blue;
    this[alpha$] = alpha;
    if (!(dart.notNull(red) >= 0 && dart.notNull(red) <= 1)) dart.assertFailed(null, L0, 24, 16, "red >= 0 && red <= 1");
    if (!(dart.notNull(green) >= 0 && dart.notNull(green) <= 1)) dart.assertFailed(null, L0, 25, 16, "green >= 0 && green <= 1");
    if (!(dart.notNull(blue) >= 0 && dart.notNull(blue) <= 1)) dart.assertFailed(null, L0, 26, 16, "blue >= 0 && blue <= 1");
    if (!(dart.notNull(alpha) >= 0 && dart.notNull(alpha) <= 1)) dart.assertFailed(null, L0, 27, 16, "alpha >= 0 && alpha <= 1");
    ;
  }).prototype = color$.PdfColor.prototype;
  (color$.PdfColor.fromInt = function(color) {
    this[red$] = (dart.notNull(color) >> 16 & 255) / 255.0;
    this[green$] = (dart.notNull(color) >> 8 & 255) / 255.0;
    this[blue$] = (dart.notNull(color) & 255) / 255.0;
    this[alpha$] = (color[$rightShift](24) & 255) / 255.0;
    ;
  }).prototype = color$.PdfColor.prototype;
  dart.addTypeTests(color$.PdfColor);
  dart.addTypeCaches(color$.PdfColor);
  dart.setMethodSignature(color$.PdfColor, () => ({
    __proto__: dart.getMethods(color$.PdfColor.__proto__),
    toInt: dart.fnType(dart.legacy(core.int), []),
    toHex: dart.fnType(dart.legacy(core.String), []),
    toCmyk: dart.fnType(dart.legacy(color$.PdfColorCmyk), []),
    toHsv: dart.fnType(dart.legacy(color$.PdfColorHsv), []),
    toHsl: dart.fnType(dart.legacy(color$.PdfColorHsl), []),
    shade: dart.fnType(dart.legacy(color$.PdfColor), [dart.legacy(core.double)]),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(color$.PdfColor, () => ({
    __proto__: dart.getGetters(color$.PdfColor.__proto__),
    luminance: dart.legacy(core.double),
    complementary: dart.legacy(color$.PdfColor),
    monochromatic: dart.legacy(core.List$(dart.legacy(color$.PdfColor))),
    splitcomplementary: dart.legacy(core.List$(dart.legacy(color$.PdfColor))),
    tetradic: dart.legacy(core.List$(dart.legacy(color$.PdfColor))),
    triadic: dart.legacy(core.List$(dart.legacy(color$.PdfColor))),
    analagous: dart.legacy(core.List$(dart.legacy(color$.PdfColor))),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(color$.PdfColor, L1);
  dart.setFieldSignature(color$.PdfColor, () => ({
    __proto__: dart.getFields(color$.PdfColor.__proto__),
    alpha: dart.finalFieldType(dart.legacy(core.double)),
    red: dart.finalFieldType(dart.legacy(core.double)),
    green: dart.finalFieldType(dart.legacy(core.double)),
    blue: dart.finalFieldType(dart.legacy(core.double))
  }));
  dart.defineExtensionMethods(color$.PdfColor, ['toString', '_equals']);
  dart.defineExtensionAccessors(color$.PdfColor, ['hashCode']);
  var cyan$ = dart.privateName(color$, "PdfColorCmyk.cyan");
  var magenta$ = dart.privateName(color$, "PdfColorCmyk.magenta");
  var yellow$ = dart.privateName(color$, "PdfColorCmyk.yellow");
  var black$ = dart.privateName(color$, "PdfColorCmyk.black");
  color$.PdfColorCmyk = class PdfColorCmyk extends color$.PdfColor {
    get cyan() {
      return this[cyan$];
    }
    set cyan(value) {
      super.cyan = value;
    }
    get magenta() {
      return this[magenta$];
    }
    set magenta(value) {
      super.magenta = value;
    }
    get yellow() {
      return this[yellow$];
    }
    set yellow(value) {
      super.yellow = value;
    }
    get black() {
      return this[black$];
    }
    set black(value) {
      super.black = value;
    }
    toCmyk() {
      return this;
    }
    toString() {
      return dart.str(this.runtimeType) + "(" + dart.str(this.cyan) + ", " + dart.str(this.magenta) + ", " + dart.str(this.yellow) + ", " + dart.str(this.black) + ", " + dart.str(this.alpha) + ")";
    }
  };
  (color$.PdfColorCmyk.new = function(cyan, magenta, yellow, black, a = 1) {
    this[cyan$] = cyan;
    this[magenta$] = magenta;
    this[yellow$] = yellow;
    this[black$] = black;
    color$.PdfColorCmyk.__proto__.new.call(this, (1.0 - dart.notNull(cyan)) * (1.0 - dart.notNull(black)), (1.0 - dart.notNull(magenta)) * (1.0 - dart.notNull(black)), (1.0 - dart.notNull(yellow)) * (1.0 - dart.notNull(black)), a);
    ;
  }).prototype = color$.PdfColorCmyk.prototype;
  (color$.PdfColorCmyk.fromRgb = function(r, g, b, a = 1) {
    this[black$] = 1.0 - dart.notNull(r) > dart.notNull(g) ? r : dart.notNull(g) > dart.notNull(b) ? dart.notNull(r) > dart.notNull(g) ? r : g : b;
    this[cyan$] = (1.0 - dart.notNull(r) - dart.notNull(1.0 - dart.notNull(r) > dart.notNull(g) ? r : dart.notNull(g) > dart.notNull(b) ? dart.notNull(r) > dart.notNull(g) ? r : g : b)) / (1.0 - dart.notNull(1.0 - dart.notNull(r) > dart.notNull(g) ? r : dart.notNull(g) > dart.notNull(b) ? dart.notNull(r) > dart.notNull(g) ? r : g : b));
    this[magenta$] = (1.0 - dart.notNull(g) - dart.notNull(1.0 - dart.notNull(r) > dart.notNull(g) ? r : dart.notNull(g) > dart.notNull(b) ? dart.notNull(r) > dart.notNull(g) ? r : g : b)) / (1.0 - dart.notNull(1.0 - dart.notNull(r) > dart.notNull(g) ? r : dart.notNull(g) > dart.notNull(b) ? dart.notNull(r) > dart.notNull(g) ? r : g : b));
    this[yellow$] = (1.0 - dart.notNull(b) - dart.notNull(1.0 - dart.notNull(r) > dart.notNull(g) ? r : dart.notNull(g) > dart.notNull(b) ? dart.notNull(r) > dart.notNull(g) ? r : g : b)) / (1.0 - dart.notNull(1.0 - dart.notNull(r) > dart.notNull(g) ? r : dart.notNull(g) > dart.notNull(b) ? dart.notNull(r) > dart.notNull(g) ? r : g : b));
    color$.PdfColorCmyk.__proto__.new.call(this, r, g, b, a);
    ;
  }).prototype = color$.PdfColorCmyk.prototype;
  dart.addTypeTests(color$.PdfColorCmyk);
  dart.addTypeCaches(color$.PdfColorCmyk);
  dart.setLibraryUri(color$.PdfColorCmyk, L1);
  dart.setFieldSignature(color$.PdfColorCmyk, () => ({
    __proto__: dart.getFields(color$.PdfColorCmyk.__proto__),
    cyan: dart.finalFieldType(dart.legacy(core.double)),
    magenta: dart.finalFieldType(dart.legacy(core.double)),
    yellow: dart.finalFieldType(dart.legacy(core.double)),
    black: dart.finalFieldType(dart.legacy(core.double))
  }));
  dart.defineExtensionMethods(color$.PdfColorCmyk, ['toString']);
  var hue$ = dart.privateName(color$, "PdfColorHsv.hue");
  var saturation$ = dart.privateName(color$, "PdfColorHsv.saturation");
  var value$ = dart.privateName(color$, "PdfColorHsv.value");
  color$.PdfColorHsv = class PdfColorHsv extends color$.PdfColor {
    get hue() {
      return this[hue$];
    }
    set hue(value) {
      super.hue = value;
    }
    get saturation() {
      return this[saturation$];
    }
    set saturation(value) {
      super.saturation = value;
    }
    get value() {
      return this[value$];
    }
    set value(value) {
      super.value = value;
    }
    static new(hue, saturation, value, alpha = 1) {
      let chroma = dart.notNull(saturation) * dart.notNull(value);
      let secondary = chroma * (1.0 - ((dart.notNull(hue) / 60.0)[$modulo](2.0) - 1.0)[$abs]());
      let match = dart.notNull(value) - chroma;
      let red = null;
      let green = null;
      let blue = null;
      if (dart.notNull(hue) < 60.0) {
        red = chroma;
        green = secondary;
        blue = 0.0;
      } else if (dart.notNull(hue) < 120.0) {
        red = secondary;
        green = chroma;
        blue = 0.0;
      } else if (dart.notNull(hue) < 180.0) {
        red = 0.0;
        green = chroma;
        blue = secondary;
      } else if (dart.notNull(hue) < 240.0) {
        red = 0.0;
        green = secondary;
        blue = chroma;
      } else if (dart.notNull(hue) < 300.0) {
        red = secondary;
        green = 0.0;
        blue = chroma;
      } else {
        red = chroma;
        green = 0.0;
        blue = secondary;
      }
      return new color$.PdfColorHsv.__(hue, saturation, value, (dart.notNull(red) + match)[$clamp](0.0, 1.0), (dart.notNull(green) + match)[$clamp](0.0, 1.0), (dart.notNull(blue) + match)[$clamp](0.0, 1.0), alpha);
    }
    static fromRgb(red, green, blue, alpha = 1) {
      let max = math.max(doubleL(), red, math.max(doubleL(), green, blue));
      let min = math.min(doubleL(), red, math.min(doubleL(), green, blue));
      let delta = max - min;
      let hue = color$._getHue(red, green, blue, max, delta);
      let saturation = max === 0.0 ? 0.0 : delta / max;
      return new color$.PdfColorHsv.__(hue, saturation, max, red, green, blue, alpha);
    }
    toHsv() {
      return this;
    }
    get complementary() {
      return color$.PdfColorHsv.new((dart.notNull(this.hue) - 120)[$modulo](360), this.saturation, this.value, this.alpha);
    }
    get monochromatic() {
      return JSArrayOfPdfColorHsvL().of([color$.PdfColorHsv.new(this.hue, (dart.notNull(this.saturation) > 0.5 ? dart.notNull(this.saturation) - 0.2 : dart.notNull(this.saturation) + 0.2)[$clamp](0, 1), (dart.notNull(this.value) > 0.5 ? dart.notNull(this.value) - 0.1 : dart.notNull(this.value) + 0.1)[$clamp](0, 1)), color$.PdfColorHsv.new(this.hue, (dart.notNull(this.saturation) > 0.5 ? dart.notNull(this.saturation) - 0.4 : dart.notNull(this.saturation) + 0.4)[$clamp](0, 1), (dart.notNull(this.value) > 0.5 ? dart.notNull(this.value) - 0.2 : dart.notNull(this.value) + 0.2)[$clamp](0, 1)), color$.PdfColorHsv.new(this.hue, (dart.notNull(this.saturation) > 0.5 ? dart.notNull(this.saturation) - 0.15 : dart.notNull(this.saturation) + 0.15)[$clamp](0, 1), (dart.notNull(this.value) > 0.5 ? dart.notNull(this.value) - 0.05 : dart.notNull(this.value) + 0.05)[$clamp](0, 1))]);
    }
    get splitcomplementary() {
      return JSArrayOfPdfColorHsvL().of([color$.PdfColorHsv.new((dart.notNull(this.hue) - 150)[$modulo](360), this.saturation, this.value, this.alpha), color$.PdfColorHsv.new((dart.notNull(this.hue) - 180)[$modulo](360), this.saturation, this.value, this.alpha)]);
    }
    get triadic() {
      return JSArrayOfPdfColorHsvL().of([color$.PdfColorHsv.new((dart.notNull(this.hue) + 80)[$modulo](360), this.saturation, this.value, this.alpha), color$.PdfColorHsv.new((dart.notNull(this.hue) - 120)[$modulo](360), this.saturation, this.value, this.alpha)]);
    }
    get tetradic() {
      return JSArrayOfPdfColorHsvL().of([color$.PdfColorHsv.new((dart.notNull(this.hue) + 120)[$modulo](360), this.saturation, this.value, this.alpha), color$.PdfColorHsv.new((dart.notNull(this.hue) - 150)[$modulo](360), this.saturation, this.value, this.alpha), color$.PdfColorHsv.new((dart.notNull(this.hue) + 60)[$modulo](360), this.saturation, this.value, this.alpha)]);
    }
    get analagous() {
      return JSArrayOfPdfColorHsvL().of([color$.PdfColorHsv.new((dart.notNull(this.hue) + 30)[$modulo](360), this.saturation, this.value, this.alpha), color$.PdfColorHsv.new((dart.notNull(this.hue) - 20)[$modulo](360), this.saturation, this.value, this.alpha)]);
    }
    toString() {
      return dart.str(this.runtimeType) + "(" + dart.str(this.hue) + ", " + dart.str(this.saturation) + ", " + dart.str(this.value) + ", " + dart.str(this.alpha) + ")";
    }
  };
  (color$.PdfColorHsv.__ = function(hue, saturation, value, red, green, blue, alpha) {
    this[hue$] = hue;
    this[saturation$] = saturation;
    this[value$] = value;
    if (!(dart.notNull(hue) >= 0 && dart.notNull(hue) < 360)) dart.assertFailed(null, L0, 398, 16, "hue >= 0 && hue < 360");
    if (!(dart.notNull(saturation) >= 0 && dart.notNull(saturation) <= 1)) dart.assertFailed(null, L0, 399, 16, "saturation >= 0 && saturation <= 1");
    if (!(dart.notNull(value) >= 0 && dart.notNull(value) <= 1)) dart.assertFailed(null, L0, 400, 16, "value >= 0 && value <= 1");
    color$.PdfColorHsv.__proto__.new.call(this, red, green, blue, alpha);
    ;
  }).prototype = color$.PdfColorHsv.prototype;
  dart.addTypeTests(color$.PdfColorHsv);
  dart.addTypeCaches(color$.PdfColorHsv);
  dart.setGetterSignature(color$.PdfColorHsv, () => ({
    __proto__: dart.getGetters(color$.PdfColorHsv.__proto__),
    complementary: dart.legacy(color$.PdfColorHsv),
    monochromatic: dart.legacy(core.List$(dart.legacy(color$.PdfColorHsv))),
    splitcomplementary: dart.legacy(core.List$(dart.legacy(color$.PdfColorHsv))),
    triadic: dart.legacy(core.List$(dart.legacy(color$.PdfColorHsv))),
    tetradic: dart.legacy(core.List$(dart.legacy(color$.PdfColorHsv))),
    analagous: dart.legacy(core.List$(dart.legacy(color$.PdfColorHsv)))
  }));
  dart.setLibraryUri(color$.PdfColorHsv, L1);
  dart.setFieldSignature(color$.PdfColorHsv, () => ({
    __proto__: dart.getFields(color$.PdfColorHsv.__proto__),
    hue: dart.finalFieldType(dart.legacy(core.double)),
    saturation: dart.finalFieldType(dart.legacy(core.double)),
    value: dart.finalFieldType(dart.legacy(core.double))
  }));
  dart.defineExtensionMethods(color$.PdfColorHsv, ['toString']);
  var hue$0 = dart.privateName(color$, "PdfColorHsl.hue");
  var saturation$0 = dart.privateName(color$, "PdfColorHsl.saturation");
  var lightness$ = dart.privateName(color$, "PdfColorHsl.lightness");
  color$.PdfColorHsl = class PdfColorHsl extends color$.PdfColor {
    get hue() {
      return this[hue$0];
    }
    set hue(value) {
      super.hue = value;
    }
    get saturation() {
      return this[saturation$0];
    }
    set saturation(value) {
      super.saturation = value;
    }
    get lightness() {
      return this[lightness$];
    }
    set lightness(value) {
      super.lightness = value;
    }
    static new(hue, saturation, lightness, alpha = 1) {
      let chroma = (1.0 - (2.0 * dart.notNull(lightness) - 1.0)[$abs]()) * dart.notNull(saturation);
      let secondary = chroma * (1.0 - ((dart.notNull(hue) / 60.0)[$modulo](2.0) - 1.0)[$abs]());
      let match = dart.notNull(lightness) - chroma / 2.0;
      let red = null;
      let green = null;
      let blue = null;
      if (dart.notNull(hue) < 60.0) {
        red = chroma;
        green = secondary;
        blue = 0.0;
      } else if (dart.notNull(hue) < 120.0) {
        red = secondary;
        green = chroma;
        blue = 0.0;
      } else if (dart.notNull(hue) < 180.0) {
        red = 0.0;
        green = chroma;
        blue = secondary;
      } else if (dart.notNull(hue) < 240.0) {
        red = 0.0;
        green = secondary;
        blue = chroma;
      } else if (dart.notNull(hue) < 300.0) {
        red = secondary;
        green = 0.0;
        blue = chroma;
      } else {
        red = chroma;
        green = 0.0;
        blue = secondary;
      }
      return new color$.PdfColorHsl.__(hue, saturation, lightness, alpha, (dart.notNull(red) + match)[$clamp](0.0, 1.0), (dart.notNull(green) + match)[$clamp](0.0, 1.0), (dart.notNull(blue) + match)[$clamp](0.0, 1.0));
    }
    static fromRgb(red, green, blue, alpha = 1) {
      let max = math.max(doubleL(), red, math.max(doubleL(), green, blue));
      let min = math.min(doubleL(), red, math.min(doubleL(), green, blue));
      let delta = max - min;
      let hue = color$._getHue(red, green, blue, max, delta);
      let lightness = (max + min) / 2.0;
      let saturation = lightness === 1.0 ? 0.0 : (delta / (1.0 - (2.0 * lightness - 1.0)[$abs]()))[$clamp](0.0, 1.0);
      return new color$.PdfColorHsl.__(hue, saturation, lightness, alpha, red, green, blue);
    }
    toHsl() {
      return this;
    }
    toString() {
      return dart.str(this.runtimeType) + "(" + dart.str(this.hue) + ", " + dart.str(this.saturation) + ", " + dart.str(this.lightness) + ", " + dart.str(this.alpha) + ")";
    }
  };
  (color$.PdfColorHsl.__ = function(hue, saturation, lightness, alpha, red, green, blue) {
    this[hue$0] = hue;
    this[saturation$0] = saturation;
    this[lightness$] = lightness;
    if (!(dart.notNull(hue) >= 0 && dart.notNull(hue) < 360)) dart.assertFailed(null, L0, 534, 16, "hue >= 0 && hue < 360");
    if (!(dart.notNull(saturation) >= 0 && dart.notNull(saturation) <= 1)) dart.assertFailed(null, L0, 535, 16, "saturation >= 0 && saturation <= 1");
    if (!(dart.notNull(lightness) >= 0 && dart.notNull(lightness) <= 1)) dart.assertFailed(null, L0, 536, 16, "lightness >= 0 && lightness <= 1");
    color$.PdfColorHsl.__proto__.new.call(this, red, green, blue, alpha);
    ;
  }).prototype = color$.PdfColorHsl.prototype;
  dart.addTypeTests(color$.PdfColorHsl);
  dart.addTypeCaches(color$.PdfColorHsl);
  dart.setLibraryUri(color$.PdfColorHsl, L1);
  dart.setFieldSignature(color$.PdfColorHsl, () => ({
    __proto__: dart.getFields(color$.PdfColorHsl.__proto__),
    hue: dart.finalFieldType(dart.legacy(core.double)),
    saturation: dart.finalFieldType(dart.legacy(core.double)),
    lightness: dart.finalFieldType(dart.legacy(core.double))
  }));
  dart.defineExtensionMethods(color$.PdfColorHsl, ['toString']);
  color$._getHue = function _getHue(red, green, blue, max, delta) {
    let hue = null;
    if (max === 0.0) {
      hue = 0.0;
    } else if (max == red) {
      hue = 60.0 * ((dart.notNull(green) - dart.notNull(blue)) / dart.notNull(delta))[$modulo](6);
    } else if (max == green) {
      hue = 60.0 * ((dart.notNull(blue) - dart.notNull(red)) / dart.notNull(delta) + 2);
    } else if (max == blue) {
      hue = 60.0 * ((dart.notNull(red) - dart.notNull(green)) / dart.notNull(delta) + 4);
    }
    hue = hue[$isNaN] ? 0.0 : hue;
    return hue;
  };
  dart.trackLibraries("packages/pdf/src/pdf/color.dart", {
    "package:pdf/src/pdf/color.dart": color$
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["color.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../packages/pdf/src/pdf/color.dart.lib.js"}');
  // Exports:
  return {
    src__pdf__color: color$
  };
}));

//# sourceMappingURL=color.dart.lib.js.map
