define(['dart_sdk', 'packages/pdf/src/pdf/stream.dart', 'packages/pdf/src/pdf/xref.dart', 'packages/archive/src/zlib_encoder.dart', 'packages/pdf/src/pdf/rect.dart', 'packages/pdf/src/pdf/color.dart', 'packages/pdf/src/pdf/point.dart', 'packages/vector_math/vector_math_64.dart', 'packages/pdf/src/pdf/ascii85.dart', 'packages/image/src/image.dart', 'packages/image/src/formats/jpeg_decoder.dart', 'packages/image/src/formats/cur_encoder.dart', 'packages/path_parsing/src/path_parsing.dart', 'packages/pdf/src/pdf/ttf_parser.dart', 'packages/pdf/src/pdf/font_metrics.dart', 'packages/pdf/src/pdf/arabic.dart', 'packages/pdf/src/pdf/ttf_writer.dart', 'packages/pdf/src/pdf/type1_fonts.dart', 'packages/pdf/src/pdf/page_format.dart', 'packages/crypto/src/sha256.dart'], (function load__packages__pdf__src__pdf__signature_dart(dart_sdk, packages__pdf__src__pdf__stream$46dart, packages__pdf__src__pdf__xref$46dart, packages__archive__src__zlib_encoder$46dart, packages__pdf__src__pdf__rect$46dart, packages__pdf__src__pdf__color$46dart, packages__pdf__src__pdf__point$46dart, packages__vector_math__vector_math_64$46dart, packages__pdf__src__pdf__ascii85$46dart, packages__image__src__image$46dart, packages__image__src__formats__jpeg_decoder$46dart, packages__image__src__formats__cur_encoder$46dart, packages__path_parsing__src__path_parsing$46dart, packages__pdf__src__pdf__ttf_parser$46dart, packages__pdf__src__pdf__font_metrics$46dart, packages__pdf__src__pdf__arabic$46dart, packages__pdf__src__pdf__ttf_writer$46dart, packages__pdf__src__pdf__type1_fonts$46dart, packages__pdf__src__pdf__page_format$46dart, packages__crypto__src__sha256$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const typed_data = dart_sdk.typed_data;
  const convert = dart_sdk.convert;
  const _js_helper = dart_sdk._js_helper;
  const _native_typed_data = dart_sdk._native_typed_data;
  const collection = dart_sdk.collection;
  const math = dart_sdk.math;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const stream = packages__pdf__src__pdf__stream$46dart.src__pdf__stream;
  const xref$ = packages__pdf__src__pdf__xref$46dart.src__pdf__xref;
  const zlib_encoder = packages__archive__src__zlib_encoder$46dart.src__zlib_encoder;
  const rect = packages__pdf__src__pdf__rect$46dart.src__pdf__rect;
  const color = packages__pdf__src__pdf__color$46dart.src__pdf__color;
  const point = packages__pdf__src__pdf__point$46dart.src__pdf__point;
  const vector_math_64 = packages__vector_math__vector_math_64$46dart.vector_math_64;
  const ascii85 = packages__pdf__src__pdf__ascii85$46dart.src__pdf__ascii85;
  const image$ = packages__image__src__image$46dart.src__image;
  const jpeg_decoder = packages__image__src__formats__jpeg_decoder$46dart.src__formats__jpeg_decoder;
  const formats = packages__image__src__formats__cur_encoder$46dart.src__formats__formats;
  const path_parsing = packages__path_parsing__src__path_parsing$46dart.src__path_parsing;
  const ttf_parser = packages__pdf__src__pdf__ttf_parser$46dart.src__pdf__ttf_parser;
  const font_metrics = packages__pdf__src__pdf__font_metrics$46dart.src__pdf__font_metrics;
  const arabic = packages__pdf__src__pdf__arabic$46dart.src__pdf__arabic;
  const ttf_writer = packages__pdf__src__pdf__ttf_writer$46dart.src__pdf__ttf_writer;
  const type1_fonts = packages__pdf__src__pdf__type1_fonts$46dart.src__pdf__type1_fonts;
  const page_format = packages__pdf__src__pdf__page_format$46dart.src__pdf__page_format;
  const sha256 = packages__crypto__src__sha256$46dart.src__sha256;
  var signature = Object.create(dart.library);
  var output = Object.create(dart.library);
  var js = Object.create(dart.library);
  var info = Object.create(dart.library);
  var encryption = Object.create(dart.library);
  var document_parser = Object.create(dart.library);
  var page_list = Object.create(dart.library);
  var outline = Object.create(dart.library);
  var shading = Object.create(dart.library);
  var pattern = Object.create(dart.library);
  var xobject = Object.create(dart.library);
  var exif = Object.create(dart.library);
  var image$0 = Object.create(dart.library);
  var graphics = Object.create(dart.library);
  var $function = Object.create(dart.library);
  var smask = Object.create(dart.library);
  var graphic_state = Object.create(dart.library);
  var unicode_cmap = Object.create(dart.library);
  var object_stream = Object.create(dart.library);
  var font_descriptor = Object.create(dart.library);
  var array$ = Object.create(dart.library);
  var ttffont = Object.create(dart.library);
  var type1_font = Object.create(dart.library);
  var font = Object.create(dart.library);
  var graphic_stream = Object.create(dart.library);
  var page = Object.create(dart.library);
  var names = Object.create(dart.library);
  var catalog = Object.create(dart.library);
  var document = Object.create(dart.library);
  var object = Object.create(dart.library);
  var data_types = Object.create(dart.library);
  var border = Object.create(dart.library);
  var annotation = Object.create(dart.library);
  var pdf = Object.create(dart.library);
  var $toString = dartx.toString;
  var $rightShift = dartx['>>'];
  var $map = dartx.map;
  var $reduce = dartx.reduce;
  var $add = dartx.add;
  var $compareTo = dartx.compareTo;
  var $sort = dartx.sort;
  var $clear = dartx.clear;
  var $length = dartx.length;
  var $isNotEmpty = dartx.isNotEmpty;
  var $_get = dartx._get;
  var $indexOf = dartx.indexOf;
  var $lengthInBytes = dartx.lengthInBytes;
  var $buffer = dartx.buffer;
  var $asByteData = dartx.asByteData;
  var $offsetInBytes = dartx.offsetInBytes;
  var $getUint8 = dartx.getUint8;
  var $getUint16 = dartx.getUint16;
  var $_set = dartx._set;
  var $getUint32 = dartx.getUint32;
  var $getInt32 = dartx.getInt32;
  var $getFloat32 = dartx.getFloat32;
  var $getFloat64 = dartx.getFloat64;
  var $containsKey = dartx.containsKey;
  var $addAll = dartx.addAll;
  var $toDouble = dartx.toDouble;
  var $sign = dartx.sign;
  var $abs = dartx.abs;
  var $modulo = dartx['%'];
  var $ceil = dartx.ceil;
  var $toInt = dartx.toInt;
  var $isEmpty = dartx.isEmpty;
  var $first = dartx.first;
  var $insert = dartx.insert;
  var $last = dartx.last;
  var $sublist = dartx.sublist;
  var $round = dartx.round;
  var $truncate = dartx.truncate;
  var $substring = dartx.substring;
  var $toUpperCase = dartx.toUpperCase;
  var $hashCode = dartx.hashCode;
  var $_equals = dartx._equals;
  var $fillRange = dartx.fillRange;
  var $toRadixString = dartx.toRadixString;
  var $padLeft = dartx.padLeft;
  var $asUint8List = dartx.asUint8List;
  var $runes = dartx.runes;
  var $forEach = dartx.forEach;
  var $elementAt = dartx.elementAt;
  var $insertAll = dartx.insertAll;
  var $keys = dartx.keys;
  var $toList = dartx.toList;
  var $plus = dartx['+'];
  var $codeUnits = dartx.codeUnits;
  var $toStringAsFixed = dartx.toStringAsFixed;
  var $contains = dartx.contains;
  var $leftShift = dartx['<<'];
  var PdfSigFlagsL = () => (PdfSigFlagsL = dart.constFn(dart.legacy(signature.PdfSigFlags)))();
  var intL = () => (intL = dart.constFn(dart.legacy(core.int)))();
  var PdfSigFlagsLTointL = () => (PdfSigFlagsLTointL = dart.constFn(dart.fnType(intL(), [PdfSigFlagsL()])))();
  var intLAndintLTointL = () => (intLAndintLTointL = dart.constFn(dart.fnType(intL(), [intL(), intL()])))();
  var PdfXrefL = () => (PdfXrefL = dart.constFn(dart.legacy(xref$.PdfXref)))();
  var JSArrayOfPdfXrefL = () => (JSArrayOfPdfXrefL = dart.constFn(_interceptors.JSArray$(PdfXrefL())))();
  var PdfCatalogL = () => (PdfCatalogL = dart.constFn(dart.legacy(catalog.PdfCatalog)))();
  var PdfInfoL = () => (PdfInfoL = dart.constFn(dart.legacy(info.PdfInfo)))();
  var PdfEncryptionL = () => (PdfEncryptionL = dart.constFn(dart.legacy(encryption.PdfEncryption)))();
  var PdfSignatureL = () => (PdfSignatureL = dart.constFn(dart.legacy(signature.PdfSignature)))();
  var PdfXrefLAndPdfXrefLTointL = () => (PdfXrefLAndPdfXrefLTointL = dart.constFn(dart.fnType(intL(), [PdfXrefL(), PdfXrefL()])))();
  var PdfDataTypeL = () => (PdfDataTypeL = dart.constFn(dart.legacy(data_types.PdfDataType)))();
  var JSArrayOfPdfDataTypeL = () => (JSArrayOfPdfDataTypeL = dart.constFn(_interceptors.JSArray$(PdfDataTypeL())))();
  var PdfPageL = () => (PdfPageL = dart.constFn(dart.legacy(page.PdfPage)))();
  var JSArrayOfPdfPageL = () => (JSArrayOfPdfPageL = dart.constFn(_interceptors.JSArray$(PdfPageL())))();
  var PdfOutlineModeL = () => (PdfOutlineModeL = dart.constFn(dart.legacy(outline.PdfOutlineMode)))();
  var PdfOutlineStyleL = () => (PdfOutlineStyleL = dart.constFn(dart.legacy(outline.PdfOutlineStyle)))();
  var PdfOutlineL = () => (PdfOutlineL = dart.constFn(dart.legacy(outline.PdfOutline)))();
  var JSArrayOfPdfOutlineL = () => (JSArrayOfPdfOutlineL = dart.constFn(_interceptors.JSArray$(PdfOutlineL())))();
  var PdfShadingTypeL = () => (PdfShadingTypeL = dart.constFn(dart.legacy(shading.PdfShadingType)))();
  var doubleL = () => (doubleL = dart.constFn(dart.legacy(core.double)))();
  var JSArrayOfdoubleL = () => (JSArrayOfdoubleL = dart.constFn(_interceptors.JSArray$(doubleL())))();
  var PdfBoolL = () => (PdfBoolL = dart.constFn(dart.legacy(data_types.PdfBool)))();
  var JSArrayOfPdfBoolL = () => (JSArrayOfPdfBoolL = dart.constFn(_interceptors.JSArray$(PdfBoolL())))();
  var Uint8ListL = () => (Uint8ListL = dart.constFn(dart.legacy(typed_data.Uint8List)))();
  var ListOfint = () => (ListOfint = dart.constFn(core.List$(core.int)))();
  var RangeErrorL = () => (RangeErrorL = dart.constFn(dart.legacy(core.RangeError)))();
  var PdfExifTagL = () => (PdfExifTagL = dart.constFn(dart.legacy(exif.PdfExifTag)))();
  var LinkedMapOfPdfExifTagL$dynamic = () => (LinkedMapOfPdfExifTagL$dynamic = dart.constFn(_js_helper.LinkedMap$(PdfExifTagL(), dart.dynamic)))();
  var JSArrayOfintL = () => (JSArrayOfintL = dart.constFn(_interceptors.JSArray$(intL())))();
  var ListOfintL = () => (ListOfintL = dart.constFn(core.List$(intL())))();
  var ListLOfintL = () => (ListLOfintL = dart.constFn(dart.legacy(ListOfintL())))();
  var JSArrayOfListLOfintL = () => (JSArrayOfListLOfintL = dart.constFn(_interceptors.JSArray$(ListLOfintL())))();
  var intLTointL = () => (intLTointL = dart.constFn(dart.fnType(intL(), [intL()])))();
  var PdfImageOrientationL = () => (PdfImageOrientationL = dart.constFn(dart.legacy(image$0.PdfImageOrientation)))();
  var PdfLineJoinL = () => (PdfLineJoinL = dart.constFn(dart.legacy(graphics.PdfLineJoin)))();
  var PdfLineCapL = () => (PdfLineCapL = dart.constFn(dart.legacy(graphics.PdfLineCap)))();
  var PdfTextRenderingModeL = () => (PdfTextRenderingModeL = dart.constFn(dart.legacy(graphics.PdfTextRenderingMode)))();
  var _PdfGraphicsContextL = () => (_PdfGraphicsContextL = dart.constFn(dart.legacy(graphics._PdfGraphicsContext)))();
  var ListQueueOf_PdfGraphicsContextL = () => (ListQueueOf_PdfGraphicsContextL = dart.constFn(collection.ListQueue$(_PdfGraphicsContextL())))();
  var PdfColorCmykL = () => (PdfColorCmykL = dart.constFn(dart.legacy(color.PdfColorCmyk)))();
  var numL = () => (numL = dart.constFn(dart.legacy(core.num)))();
  var PdfColorL = () => (PdfColorL = dart.constFn(dart.legacy(color.PdfColor)))();
  var ListOfPdfColorL = () => (ListOfPdfColorL = dart.constFn(core.List$(PdfColorL())))();
  var ListOfdoubleL = () => (ListOfdoubleL = dart.constFn(core.List$(doubleL())))();
  var PdfFunctionL = () => (PdfFunctionL = dart.constFn(dart.legacy($function.PdfFunction)))();
  var JSArrayOfPdfFunctionL = () => (JSArrayOfPdfFunctionL = dart.constFn(_interceptors.JSArray$(PdfFunctionL())))();
  var JSArrayOfPdfColorL = () => (JSArrayOfPdfColorL = dart.constFn(_interceptors.JSArray$(PdfColorL())))();
  var JSArrayOfnumL = () => (JSArrayOfnumL = dart.constFn(_interceptors.JSArray$(numL())))();
  var StringL = () => (StringL = dart.constFn(dart.legacy(core.String)))();
  var IdentityMapOfStringL$PdfDataTypeL = () => (IdentityMapOfStringL$PdfDataTypeL = dart.constFn(_js_helper.IdentityMap$(StringL(), PdfDataTypeL())))();
  var PdfBlendModeL = () => (PdfBlendModeL = dart.constFn(dart.legacy(graphic_state.PdfBlendMode)))();
  var PdfGraphicStateL = () => (PdfGraphicStateL = dart.constFn(dart.legacy(graphic_state.PdfGraphicState)))();
  var JSArrayOfPdfGraphicStateL = () => (JSArrayOfPdfGraphicStateL = dart.constFn(_interceptors.JSArray$(PdfGraphicStateL())))();
  var PdfFontMetricsL = () => (PdfFontMetricsL = dart.constFn(dart.legacy(font_metrics.PdfFontMetrics)))();
  var boolL = () => (boolL = dart.constFn(dart.legacy(core.bool)))();
  var VoidToboolL = () => (VoidToboolL = dart.constFn(dart.fnType(boolL(), [])))();
  var PdfFontL = () => (PdfFontL = dart.constFn(dart.legacy(font.PdfFont)))();
  var IdentityMapOfStringL$PdfFontL = () => (IdentityMapOfStringL$PdfFontL = dart.constFn(_js_helper.IdentityMap$(StringL(), PdfFontL())))();
  var PdfShadingL = () => (PdfShadingL = dart.constFn(dart.legacy(shading.PdfShading)))();
  var IdentityMapOfStringL$PdfShadingL = () => (IdentityMapOfStringL$PdfShadingL = dart.constFn(_js_helper.IdentityMap$(StringL(), PdfShadingL())))();
  var PdfPatternL = () => (PdfPatternL = dart.constFn(dart.legacy(pattern.PdfPattern)))();
  var IdentityMapOfStringL$PdfPatternL = () => (IdentityMapOfStringL$PdfPatternL = dart.constFn(_js_helper.IdentityMap$(StringL(), PdfPatternL())))();
  var PdfXObjectL = () => (PdfXObjectL = dart.constFn(dart.legacy(xobject.PdfXObject)))();
  var IdentityMapOfStringL$PdfXObjectL = () => (IdentityMapOfStringL$PdfXObjectL = dart.constFn(_js_helper.IdentityMap$(StringL(), PdfXObjectL())))();
  var PdfNameL = () => (PdfNameL = dart.constFn(dart.legacy(data_types.PdfName)))();
  var PdfDictL = () => (PdfDictL = dart.constFn(dart.legacy(data_types.PdfDict)))();
  var PdfObjectStreamL = () => (PdfObjectStreamL = dart.constFn(dart.legacy(object_stream.PdfObjectStream)))();
  var JSArrayOfPdfObjectStreamL = () => (JSArrayOfPdfObjectStreamL = dart.constFn(_interceptors.JSArray$(PdfObjectStreamL())))();
  var PdfAnnotL = () => (PdfAnnotL = dart.constFn(dart.legacy(annotation.PdfAnnot)))();
  var JSArrayOfPdfAnnotL = () => (JSArrayOfPdfAnnotL = dart.constFn(_interceptors.JSArray$(PdfAnnotL())))();
  var PdfArrayL = () => (PdfArrayL = dart.constFn(dart.legacy(data_types.PdfArray)))();
  var PdfPageModeL = () => (PdfPageModeL = dart.constFn(dart.legacy(document.PdfPageMode)))();
  var PdfObjectL = () => (PdfObjectL = dart.constFn(dart.legacy(object.PdfObject)))();
  var LinkedHashSetOfPdfObjectL = () => (LinkedHashSetOfPdfObjectL = dart.constFn(collection.LinkedHashSet$(PdfObjectL())))();
  var LinkedHashSetOfPdfFontL = () => (LinkedHashSetOfPdfFontL = dart.constFn(collection.LinkedHashSet$(PdfFontL())))();
  var PdfNumL = () => (PdfNumL = dart.constFn(dart.legacy(data_types.PdfNum)))();
  var PdfNumListL = () => (PdfNumListL = dart.constFn(dart.legacy(data_types.PdfNumList)))();
  var PdfStringFormatL = () => (PdfStringFormatL = dart.constFn(dart.legacy(data_types.PdfStringFormat)))();
  var intLToNull = () => (intLToNull = dart.constFn(dart.fnType(core.Null, [intL()])))();
  var PdfStringL = () => (PdfStringL = dart.constFn(dart.legacy(data_types.PdfString)))();
  var PdfNullL = () => (PdfNullL = dart.constFn(dart.legacy(data_types.PdfNull)))();
  var PdfIndirectL = () => (PdfIndirectL = dart.constFn(dart.legacy(data_types.PdfIndirect)))();
  var PdfObjectLToPdfIndirectL = () => (PdfObjectLToPdfIndirectL = dart.constFn(dart.fnType(PdfIndirectL(), [PdfObjectL()])))();
  var numLToPdfNumL = () => (numLToPdfNumL = dart.constFn(dart.fnType(PdfNumL(), [numL()])))();
  var LinkedMapOfPdfDataTypeL$boolL = () => (LinkedMapOfPdfDataTypeL$boolL = dart.constFn(_js_helper.LinkedMap$(PdfDataTypeL(), boolL())))();
  var MapEntryOfStringL$PdfIndirectL = () => (MapEntryOfStringL$PdfIndirectL = dart.constFn(core.MapEntry$(StringL(), PdfIndirectL())))();
  var MapEntryLOfStringL$PdfIndirectL = () => (MapEntryLOfStringL$PdfIndirectL = dart.constFn(dart.legacy(MapEntryOfStringL$PdfIndirectL())))();
  var StringLAndPdfObjectLToMapEntryLOfStringL$PdfIndirectL = () => (StringLAndPdfObjectLToMapEntryLOfStringL$PdfIndirectL = dart.constFn(dart.fnType(MapEntryLOfStringL$PdfIndirectL(), [StringL(), PdfObjectL()])))();
  var StringLAndPdfDataTypeLToNull = () => (StringLAndPdfDataTypeLToNull = dart.constFn(dart.fnType(core.Null, [StringL(), PdfDataTypeL()])))();
  var PdfColorTypeL = () => (PdfColorTypeL = dart.constFn(dart.legacy(data_types.PdfColorType)))();
  var PdfBorderStyleL = () => (PdfBorderStyleL = dart.constFn(dart.legacy(border.PdfBorderStyle)))();
  var PdfAnnotFlagsL = () => (PdfAnnotFlagsL = dart.constFn(dart.legacy(annotation.PdfAnnotFlags)))();
  var PdfAnnotApparenceL = () => (PdfAnnotApparenceL = dart.constFn(dart.legacy(annotation.PdfAnnotApparence)))();
  var PdfAnnotFlagsLTointL = () => (PdfAnnotFlagsLTointL = dart.constFn(dart.fnType(intL(), [PdfAnnotFlagsL()])))();
  var PdfAnnotHighlightingL = () => (PdfAnnotHighlightingL = dart.constFn(dart.legacy(annotation.PdfAnnotHighlighting)))();
  var PdfFieldFlagsL = () => (PdfFieldFlagsL = dart.constFn(dart.legacy(annotation.PdfFieldFlags)))();
  var PdfFieldFlagsLTointL = () => (PdfFieldFlagsLTointL = dart.constFn(dart.fnType(intL(), [PdfFieldFlagsL()])))();
  var PdfTextFieldAlignL = () => (PdfTextFieldAlignL = dart.constFn(dart.legacy(annotation.PdfTextFieldAlign)))();
  const CT = Object.create(null);
  var L32 = "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-2.0.0/lib/src/pdf/array.dart";
  var L42 = "package:pdf/src/pdf/names.dart";
  var L34 = "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-2.0.0/lib/src/pdf/font.dart";
  var L35 = "package:pdf/src/pdf/font.dart";
  var L50 = "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-2.0.0/lib/src/pdf/annotation.dart";
  var L4 = "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-2.0.0/lib/src/pdf/output.dart";
  var L51 = "package:pdf/src/pdf/annotation.dart";
  var L45 = "package:pdf/src/pdf/document.dart";
  var L11 = "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-2.0.0/lib/src/pdf/outline.dart";
  var L16 = "package:pdf/src/pdf/object_stream.dart";
  var L8 = "package:pdf/src/pdf/document_parser.dart";
  var L22 = "package:pdf/src/pdf/graphics.dart";
  var L17 = "package:pdf/src/pdf/xobject.dart";
  var L3 = "package:pdf/src/pdf/object.dart";
  var L47 = "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-2.0.0/lib/src/pdf/data_types.dart";
  var L9 = "package:pdf/src/pdf/page_list.dart";
  var L46 = "package:pdf/src/pdf/data_types.dart";
  var L27 = "package:pdf/src/pdf/smask.dart";
  var L12 = "package:pdf/src/pdf/shading.dart";
  var L10 = "package:pdf/src/pdf/outline.dart";
  var L25 = "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-2.0.0/lib/src/pdf/function.dart";
  var L20 = "package:pdf/src/pdf/image.dart";
  var L1 = "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-2.0.0/lib/src/pdf/signature.dart";
  var L41 = "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-2.0.0/lib/src/pdf/names.dart";
  var L37 = "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-2.0.0/lib/src/pdf/type1_font.dart";
  var L30 = "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-2.0.0/lib/src/pdf/font_descriptor.dart";
  var L13 = "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-2.0.0/lib/src/pdf/shading.dart";
  var L44 = "package:pdf/src/pdf/catalog.dart";
  var L2 = "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-2.0.0/lib/src/pdf/object.dart";
  var L18 = "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-2.0.0/lib/src/pdf/exif.dart";
  var L28 = "package:pdf/src/pdf/graphic_state.dart";
  var L7 = "package:pdf/src/pdf/encryption.dart";
  var L26 = "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-2.0.0/lib/src/pdf/smask.dart";
  var L14 = "package:pdf/src/pdf/pattern.dart";
  var L0 = "package:pdf/src/pdf/signature.dart";
  var L49 = "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-2.0.0/lib/src/pdf/border.dart";
  var L21 = "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-2.0.0/lib/src/pdf/image.dart";
  var L36 = "package:pdf/src/pdf/ttffont.dart";
  var L43 = "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-2.0.0/lib/src/pdf/catalog.dart";
  var L38 = "package:pdf/src/pdf/type1_font.dart";
  var L23 = "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-2.0.0/lib/src/pdf/graphics.dart";
  var L24 = "package:pdf/src/pdf/function.dart";
  var L31 = "package:pdf/src/pdf/font_descriptor.dart";
  var L19 = "package:pdf/src/pdf/exif.dart";
  var L40 = "package:pdf/src/pdf/page.dart";
  var L15 = "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-2.0.0/lib/src/pdf/pattern.dart";
  var L39 = "package:pdf/src/pdf/graphic_stream.dart";
  var L48 = "package:pdf/src/pdf/border.dart";
  var L33 = "package:pdf/src/pdf/array.dart";
  var L6 = "package:pdf/src/pdf/info.dart";
  var L29 = "package:pdf/src/pdf/unicode_cmap.dart";
  var L5 = "package:pdf/src/pdf/output.dart";
  dart.defineLazy(CT, {
    get C0() {
      return C0 = dart.const({
        __proto__: signature.PdfSigFlags.prototype,
        [_name$]: "PdfSigFlags.signaturesExist",
        index: 0
      });
    },
    get C1() {
      return C1 = dart.const({
        __proto__: signature.PdfSigFlags.prototype,
        [_name$]: "PdfSigFlags.appendOnly",
        index: 1
      });
    },
    get C2() {
      return C2 = dart.constList([C0 || CT.C0, C1 || CT.C1], PdfSigFlagsL());
    },
    get C3() {
      return C3 = dart.constSet(PdfSigFlagsL(), [C0 || CT.C0]);
    },
    get C4() {
      return C4 = dart.constList([37, 194, 165, 194, 177, 195, 171, 10], intL());
    },
    get C5() {
      return C5 = dart.const({
        __proto__: outline.PdfOutlineMode.prototype,
        [_name$0]: "PdfOutlineMode.fitPage",
        index: 0
      });
    },
    get C6() {
      return C6 = dart.const({
        __proto__: outline.PdfOutlineMode.prototype,
        [_name$0]: "PdfOutlineMode.fitRect",
        index: 1
      });
    },
    get C7() {
      return C7 = dart.constList([C5 || CT.C5, C6 || CT.C6], PdfOutlineModeL());
    },
    get C8() {
      return C8 = dart.const({
        __proto__: outline.PdfOutlineStyle.prototype,
        [_name$0]: "PdfOutlineStyle.normal",
        index: 0
      });
    },
    get C9() {
      return C9 = dart.const({
        __proto__: outline.PdfOutlineStyle.prototype,
        [_name$0]: "PdfOutlineStyle.italic",
        index: 1
      });
    },
    get C10() {
      return C10 = dart.const({
        __proto__: outline.PdfOutlineStyle.prototype,
        [_name$0]: "PdfOutlineStyle.bold",
        index: 2
      });
    },
    get C11() {
      return C11 = dart.const({
        __proto__: outline.PdfOutlineStyle.prototype,
        [_name$0]: "PdfOutlineStyle.italicBold",
        index: 3
      });
    },
    get C12() {
      return C12 = dart.constList([C8 || CT.C8, C9 || CT.C9, C10 || CT.C10, C11 || CT.C11], PdfOutlineStyleL());
    },
    get C13() {
      return C13 = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/Fit"
      });
    },
    get C14() {
      return C14 = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/FitR"
      });
    },
    get C15() {
      return C15 = dart.const({
        __proto__: shading.PdfShadingType.prototype,
        [_name$1]: "PdfShadingType.axial",
        index: 0
      });
    },
    get C16() {
      return C16 = dart.const({
        __proto__: shading.PdfShadingType.prototype,
        [_name$1]: "PdfShadingType.radial",
        index: 1
      });
    },
    get C17() {
      return C17 = dart.constList([C15 || CT.C15, C16 || CT.C16], PdfShadingTypeL());
    },
    get C18() {
      return C18 = dart.const({
        __proto__: data_types.PdfBool.prototype,
        [PdfBool_value]: true
      });
    },
    get C19() {
      return C19 = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/DeviceRGB"
      });
    },
    get C20() {
      return C20 = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/FlateDecode"
      });
    },
    get C21() {
      return C21 = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/ASCII85Decode"
      });
    },
    get C23() {
      return C23 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.ExifVersion",
        index: 0
      });
    },
    get C24() {
      return C24 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.FlashpixVersion",
        index: 1
      });
    },
    get C25() {
      return C25 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.ColorSpace",
        index: 2
      });
    },
    get C26() {
      return C26 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.PixelXDimension",
        index: 3
      });
    },
    get C27() {
      return C27 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.PixelYDimension",
        index: 4
      });
    },
    get C28() {
      return C28 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.ComponentsConfiguration",
        index: 5
      });
    },
    get C29() {
      return C29 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.CompressedBitsPerPixel",
        index: 6
      });
    },
    get C30() {
      return C30 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.MakerNote",
        index: 7
      });
    },
    get C31() {
      return C31 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.UserComment",
        index: 8
      });
    },
    get C32() {
      return C32 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.RelatedSoundFile",
        index: 9
      });
    },
    get C33() {
      return C33 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.DateTimeOriginal",
        index: 10
      });
    },
    get C34() {
      return C34 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.DateTimeDigitized",
        index: 11
      });
    },
    get C35() {
      return C35 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.SubsecTime",
        index: 12
      });
    },
    get C36() {
      return C36 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.SubsecTimeOriginal",
        index: 13
      });
    },
    get C37() {
      return C37 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.SubsecTimeDigitized",
        index: 14
      });
    },
    get C38() {
      return C38 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.ExposureTime",
        index: 15
      });
    },
    get C39() {
      return C39 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.FNumber",
        index: 16
      });
    },
    get C40() {
      return C40 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.ExposureProgram",
        index: 17
      });
    },
    get C41() {
      return C41 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.SpectralSensitivity",
        index: 18
      });
    },
    get C42() {
      return C42 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.ISOSpeedRatings",
        index: 19
      });
    },
    get C43() {
      return C43 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.OECF",
        index: 20
      });
    },
    get C44() {
      return C44 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.ShutterSpeedValue",
        index: 21
      });
    },
    get C45() {
      return C45 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.ApertureValue",
        index: 22
      });
    },
    get C46() {
      return C46 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.BrightnessValue",
        index: 23
      });
    },
    get C47() {
      return C47 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.ExposureBias",
        index: 24
      });
    },
    get C48() {
      return C48 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.MaxApertureValue",
        index: 25
      });
    },
    get C49() {
      return C49 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.SubjectDistance",
        index: 26
      });
    },
    get C50() {
      return C50 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.MeteringMode",
        index: 27
      });
    },
    get C51() {
      return C51 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.LightSource",
        index: 28
      });
    },
    get C52() {
      return C52 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.Flash",
        index: 29
      });
    },
    get C53() {
      return C53 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.SubjectArea",
        index: 30
      });
    },
    get C54() {
      return C54 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.FocalLength",
        index: 31
      });
    },
    get C55() {
      return C55 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.FlashEnergy",
        index: 32
      });
    },
    get C56() {
      return C56 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.SpatialFrequencyResponse",
        index: 33
      });
    },
    get C57() {
      return C57 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.FocalPlaneXResolution",
        index: 34
      });
    },
    get C58() {
      return C58 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.FocalPlaneYResolution",
        index: 35
      });
    },
    get C59() {
      return C59 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.FocalPlaneResolutionUnit",
        index: 36
      });
    },
    get C60() {
      return C60 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.SubjectLocation",
        index: 37
      });
    },
    get C61() {
      return C61 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.ExposureIndex",
        index: 38
      });
    },
    get C62() {
      return C62 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.SensingMethod",
        index: 39
      });
    },
    get C63() {
      return C63 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.FileSource",
        index: 40
      });
    },
    get C64() {
      return C64 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.SceneType",
        index: 41
      });
    },
    get C65() {
      return C65 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.CFAPattern",
        index: 42
      });
    },
    get C66() {
      return C66 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.CustomRendered",
        index: 43
      });
    },
    get C67() {
      return C67 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.ExposureMode",
        index: 44
      });
    },
    get C68() {
      return C68 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.WhiteBalance",
        index: 45
      });
    },
    get C69() {
      return C69 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.DigitalZoomRation",
        index: 46
      });
    },
    get C70() {
      return C70 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.FocalLengthIn35mmFilm",
        index: 47
      });
    },
    get C71() {
      return C71 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.SceneCaptureType",
        index: 48
      });
    },
    get C72() {
      return C72 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.GainControl",
        index: 49
      });
    },
    get C73() {
      return C73 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.Contrast",
        index: 50
      });
    },
    get C74() {
      return C74 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.Saturation",
        index: 51
      });
    },
    get C75() {
      return C75 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.Sharpness",
        index: 52
      });
    },
    get C76() {
      return C76 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.DeviceSettingDescription",
        index: 53
      });
    },
    get C77() {
      return C77 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.SubjectDistanceRange",
        index: 54
      });
    },
    get C78() {
      return C78 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.InteroperabilityIFDPointer",
        index: 55
      });
    },
    get C79() {
      return C79 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.ImageUniqueID",
        index: 56
      });
    },
    get C80() {
      return C80 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.ImageWidth",
        index: 57
      });
    },
    get C81() {
      return C81 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.ImageHeight",
        index: 58
      });
    },
    get C82() {
      return C82 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.ExifIFDPointer",
        index: 59
      });
    },
    get C83() {
      return C83 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.GPSInfoIFDPointer",
        index: 60
      });
    },
    get C84() {
      return C84 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.BitsPerSample",
        index: 61
      });
    },
    get C85() {
      return C85 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.Compression",
        index: 62
      });
    },
    get C86() {
      return C86 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.PhotometricInterpretation",
        index: 63
      });
    },
    get C87() {
      return C87 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.Orientation",
        index: 64
      });
    },
    get C88() {
      return C88 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.SamplesPerPixel",
        index: 65
      });
    },
    get C89() {
      return C89 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.PlanarConfiguration",
        index: 66
      });
    },
    get C90() {
      return C90 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.YCbCrSubSampling",
        index: 67
      });
    },
    get C91() {
      return C91 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.YCbCrPositioning",
        index: 68
      });
    },
    get C92() {
      return C92 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.XResolution",
        index: 69
      });
    },
    get C93() {
      return C93 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.YResolution",
        index: 70
      });
    },
    get C94() {
      return C94 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.ResolutionUnit",
        index: 71
      });
    },
    get C95() {
      return C95 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.StripOffsets",
        index: 72
      });
    },
    get C96() {
      return C96 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.RowsPerStrip",
        index: 73
      });
    },
    get C97() {
      return C97 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.StripByteCounts",
        index: 74
      });
    },
    get C98() {
      return C98 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.JPEGInterchangeFormat",
        index: 75
      });
    },
    get C99() {
      return C99 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.JPEGInterchangeFormatLength",
        index: 76
      });
    },
    get C100() {
      return C100 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.TransferFunction",
        index: 77
      });
    },
    get C101() {
      return C101 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.WhitePoint",
        index: 78
      });
    },
    get C102() {
      return C102 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.PrimaryChromaticities",
        index: 79
      });
    },
    get C103() {
      return C103 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.YCbCrCoefficients",
        index: 80
      });
    },
    get C104() {
      return C104 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.ReferenceBlackWhite",
        index: 81
      });
    },
    get C105() {
      return C105 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.DateTime",
        index: 82
      });
    },
    get C106() {
      return C106 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.ImageDescription",
        index: 83
      });
    },
    get C107() {
      return C107 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.Make",
        index: 84
      });
    },
    get C108() {
      return C108 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.Model",
        index: 85
      });
    },
    get C109() {
      return C109 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.Software",
        index: 86
      });
    },
    get C110() {
      return C110 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.Artist",
        index: 87
      });
    },
    get C111() {
      return C111 = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_name$2]: "PdfExifTag.Copyright",
        index: 88
      });
    },
    get C22() {
      return C22 = dart.constMap(intL(), PdfExifTagL(), [36864, C23 || CT.C23, 40960, C24 || CT.C24, 40961, C25 || CT.C25, 40962, C26 || CT.C26, 40963, C27 || CT.C27, 37121, C28 || CT.C28, 37122, C29 || CT.C29, 37500, C30 || CT.C30, 37510, C31 || CT.C31, 40964, C32 || CT.C32, 36867, C33 || CT.C33, 36868, C34 || CT.C34, 37520, C35 || CT.C35, 37521, C36 || CT.C36, 37522, C37 || CT.C37, 33434, C38 || CT.C38, 33437, C39 || CT.C39, 34850, C40 || CT.C40, 34852, C41 || CT.C41, 34855, C42 || CT.C42, 34856, C43 || CT.C43, 37377, C44 || CT.C44, 37378, C45 || CT.C45, 37379, C46 || CT.C46, 37380, C47 || CT.C47, 37381, C48 || CT.C48, 37382, C49 || CT.C49, 37383, C50 || CT.C50, 37384, C51 || CT.C51, 37385, C52 || CT.C52, 37396, C53 || CT.C53, 37386, C54 || CT.C54, 41483, C55 || CT.C55, 41484, C56 || CT.C56, 41486, C57 || CT.C57, 41487, C58 || CT.C58, 41488, C59 || CT.C59, 41492, C60 || CT.C60, 41493, C61 || CT.C61, 41495, C62 || CT.C62, 41728, C63 || CT.C63, 41729, C64 || CT.C64, 41730, C65 || CT.C65, 41985, C66 || CT.C66, 41986, C67 || CT.C67, 41987, C68 || CT.C68, 41988, C69 || CT.C69, 41989, C70 || CT.C70, 41990, C71 || CT.C71, 41991, C72 || CT.C72, 41992, C73 || CT.C73, 41993, C74 || CT.C74, 41994, C75 || CT.C75, 41995, C76 || CT.C76, 41996, C77 || CT.C77, 40965, C78 || CT.C78, 42016, C79 || CT.C79, 256, C80 || CT.C80, 257, C81 || CT.C81, 34665, C82 || CT.C82, 34853, C83 || CT.C83, 258, C84 || CT.C84, 259, C85 || CT.C85, 262, C86 || CT.C86, 274, C87 || CT.C87, 277, C88 || CT.C88, 284, C89 || CT.C89, 530, C90 || CT.C90, 531, C91 || CT.C91, 282, C92 || CT.C92, 283, C93 || CT.C93, 296, C94 || CT.C94, 273, C95 || CT.C95, 278, C96 || CT.C96, 279, C97 || CT.C97, 513, C98 || CT.C98, 514, C99 || CT.C99, 301, C100 || CT.C100, 318, C101 || CT.C101, 319, C102 || CT.C102, 529, C103 || CT.C103, 532, C104 || CT.C104, 306, C105 || CT.C105, 270, C106 || CT.C106, 271, C107 || CT.C107, 272, C108 || CT.C108, 305, C109 || CT.C109, 315, C110 || CT.C110, 33432, C111 || CT.C111]);
    },
    get C112() {
      return C112 = dart.constList([C23 || CT.C23, C24 || CT.C24, C25 || CT.C25, C26 || CT.C26, C27 || CT.C27, C28 || CT.C28, C29 || CT.C29, C30 || CT.C30, C31 || CT.C31, C32 || CT.C32, C33 || CT.C33, C34 || CT.C34, C35 || CT.C35, C36 || CT.C36, C37 || CT.C37, C38 || CT.C38, C39 || CT.C39, C40 || CT.C40, C41 || CT.C41, C42 || CT.C42, C43 || CT.C43, C44 || CT.C44, C45 || CT.C45, C46 || CT.C46, C47 || CT.C47, C48 || CT.C48, C49 || CT.C49, C50 || CT.C50, C51 || CT.C51, C52 || CT.C52, C53 || CT.C53, C54 || CT.C54, C55 || CT.C55, C56 || CT.C56, C57 || CT.C57, C58 || CT.C58, C59 || CT.C59, C60 || CT.C60, C61 || CT.C61, C62 || CT.C62, C63 || CT.C63, C64 || CT.C64, C65 || CT.C65, C66 || CT.C66, C67 || CT.C67, C68 || CT.C68, C69 || CT.C69, C70 || CT.C70, C71 || CT.C71, C72 || CT.C72, C73 || CT.C73, C74 || CT.C74, C75 || CT.C75, C76 || CT.C76, C77 || CT.C77, C78 || CT.C78, C79 || CT.C79, C80 || CT.C80, C81 || CT.C81, C82 || CT.C82, C83 || CT.C83, C84 || CT.C84, C85 || CT.C85, C86 || CT.C86, C87 || CT.C87, C88 || CT.C88, C89 || CT.C89, C90 || CT.C90, C91 || CT.C91, C92 || CT.C92, C93 || CT.C93, C94 || CT.C94, C95 || CT.C95, C96 || CT.C96, C97 || CT.C97, C98 || CT.C98, C99 || CT.C99, C100 || CT.C100, C101 || CT.C101, C102 || CT.C102, C103 || CT.C103, C104 || CT.C104, C105 || CT.C105, C106 || CT.C106, C107 || CT.C107, C108 || CT.C108, C109 || CT.C109, C110 || CT.C110, C111 || CT.C111], PdfExifTagL());
    },
    get C113() {
      return C113 = dart.const({
        __proto__: image$0.PdfImageOrientation.prototype,
        [_name$3]: "PdfImageOrientation.topLeft",
        index: 0
      });
    },
    get C114() {
      return C114 = dart.const({
        __proto__: image$0.PdfImageOrientation.prototype,
        [_name$3]: "PdfImageOrientation.topRight",
        index: 1
      });
    },
    get C115() {
      return C115 = dart.const({
        __proto__: image$0.PdfImageOrientation.prototype,
        [_name$3]: "PdfImageOrientation.bottomRight",
        index: 2
      });
    },
    get C116() {
      return C116 = dart.const({
        __proto__: image$0.PdfImageOrientation.prototype,
        [_name$3]: "PdfImageOrientation.bottomLeft",
        index: 3
      });
    },
    get C117() {
      return C117 = dart.const({
        __proto__: image$0.PdfImageOrientation.prototype,
        [_name$3]: "PdfImageOrientation.leftTop",
        index: 4
      });
    },
    get C118() {
      return C118 = dart.const({
        __proto__: image$0.PdfImageOrientation.prototype,
        [_name$3]: "PdfImageOrientation.rightTop",
        index: 5
      });
    },
    get C119() {
      return C119 = dart.const({
        __proto__: image$0.PdfImageOrientation.prototype,
        [_name$3]: "PdfImageOrientation.rightBottom",
        index: 6
      });
    },
    get C120() {
      return C120 = dart.const({
        __proto__: image$0.PdfImageOrientation.prototype,
        [_name$3]: "PdfImageOrientation.leftBottom",
        index: 7
      });
    },
    get C121() {
      return C121 = dart.constList([C113 || CT.C113, C114 || CT.C114, C115 || CT.C115, C116 || CT.C116, C117 || CT.C117, C118 || CT.C118, C119 || CT.C119, C120 || CT.C120], PdfImageOrientationL());
    },
    get C122() {
      return C122 = dart.const({
        __proto__: data_types.PdfNum.prototype,
        [PdfNum_value]: 8
      });
    },
    get C123() {
      return C123 = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/RelativeColorimetric"
      });
    },
    get C124() {
      return C124 = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/DCTDecode"
      });
    },
    get C125() {
      return C125 = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/DeviceGray"
      });
    },
    get C126() {
      return C126 = dart.const({
        __proto__: graphics.PdfLineJoin.prototype,
        [_name$4]: "PdfLineJoin.miter",
        index: 0
      });
    },
    get C127() {
      return C127 = dart.const({
        __proto__: graphics.PdfLineJoin.prototype,
        [_name$4]: "PdfLineJoin.round",
        index: 1
      });
    },
    get C128() {
      return C128 = dart.const({
        __proto__: graphics.PdfLineJoin.prototype,
        [_name$4]: "PdfLineJoin.bevel",
        index: 2
      });
    },
    get C129() {
      return C129 = dart.constList([C126 || CT.C126, C127 || CT.C127, C128 || CT.C128], PdfLineJoinL());
    },
    get C130() {
      return C130 = dart.const({
        __proto__: graphics.PdfLineCap.prototype,
        [_name$4]: "PdfLineCap.butt",
        index: 0
      });
    },
    get C131() {
      return C131 = dart.const({
        __proto__: graphics.PdfLineCap.prototype,
        [_name$4]: "PdfLineCap.round",
        index: 1
      });
    },
    get C132() {
      return C132 = dart.const({
        __proto__: graphics.PdfLineCap.prototype,
        [_name$4]: "PdfLineCap.square",
        index: 2
      });
    },
    get C133() {
      return C133 = dart.constList([C130 || CT.C130, C131 || CT.C131, C132 || CT.C132], PdfLineCapL());
    },
    get C134() {
      return C134 = dart.const({
        __proto__: graphics.PdfTextRenderingMode.prototype,
        [_name$4]: "PdfTextRenderingMode.fill",
        index: 0
      });
    },
    get C135() {
      return C135 = dart.const({
        __proto__: graphics.PdfTextRenderingMode.prototype,
        [_name$4]: "PdfTextRenderingMode.stroke",
        index: 1
      });
    },
    get C136() {
      return C136 = dart.const({
        __proto__: graphics.PdfTextRenderingMode.prototype,
        [_name$4]: "PdfTextRenderingMode.fillAndStroke",
        index: 2
      });
    },
    get C137() {
      return C137 = dart.const({
        __proto__: graphics.PdfTextRenderingMode.prototype,
        [_name$4]: "PdfTextRenderingMode.invisible",
        index: 3
      });
    },
    get C138() {
      return C138 = dart.const({
        __proto__: graphics.PdfTextRenderingMode.prototype,
        [_name$4]: "PdfTextRenderingMode.fillAndClip",
        index: 4
      });
    },
    get C139() {
      return C139 = dart.const({
        __proto__: graphics.PdfTextRenderingMode.prototype,
        [_name$4]: "PdfTextRenderingMode.strokeAndClip",
        index: 5
      });
    },
    get C140() {
      return C140 = dart.const({
        __proto__: graphics.PdfTextRenderingMode.prototype,
        [_name$4]: "PdfTextRenderingMode.fillStrokeAndClip",
        index: 6
      });
    },
    get C141() {
      return C141 = dart.const({
        __proto__: graphics.PdfTextRenderingMode.prototype,
        [_name$4]: "PdfTextRenderingMode.clip",
        index: 7
      });
    },
    get C142() {
      return C142 = dart.constList([C134 || CT.C134, C135 || CT.C135, C136 || CT.C136, C137 || CT.C137, C138 || CT.C138, C139 || CT.C139, C140 || CT.C140, C141 || CT.C141], PdfTextRenderingModeL());
    },
    get C143() {
      return C143 = dart.constList([], numL());
    },
    get C144() {
      return C144 = dart.constList([0, 1], numL());
    },
    get C145() {
      return C145 = dart.constList([0, 1, 0, 1, 0, 1], numL());
    },
    get C146() {
      return C146 = dart.const({
        __proto__: data_types.PdfNum.prototype,
        [PdfNum_value]: 0
      });
    },
    get C147() {
      return C147 = dart.const({
        __proto__: data_types.PdfNum.prototype,
        [PdfNum_value]: 3
      });
    },
    get C148() {
      return C148 = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/Luminosity"
      });
    },
    get C149() {
      return C149 = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_name$5]: "PdfBlendMode.normal",
        index: 0
      });
    },
    get C150() {
      return C150 = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_name$5]: "PdfBlendMode.multiply",
        index: 1
      });
    },
    get C151() {
      return C151 = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_name$5]: "PdfBlendMode.screen",
        index: 2
      });
    },
    get C152() {
      return C152 = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_name$5]: "PdfBlendMode.overlay",
        index: 3
      });
    },
    get C153() {
      return C153 = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_name$5]: "PdfBlendMode.darken",
        index: 4
      });
    },
    get C154() {
      return C154 = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_name$5]: "PdfBlendMode.lighten",
        index: 5
      });
    },
    get C155() {
      return C155 = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_name$5]: "PdfBlendMode.colorDodge",
        index: 6
      });
    },
    get C156() {
      return C156 = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_name$5]: "PdfBlendMode.colorBurn",
        index: 7
      });
    },
    get C157() {
      return C157 = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_name$5]: "PdfBlendMode.hardLight",
        index: 8
      });
    },
    get C158() {
      return C158 = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_name$5]: "PdfBlendMode.softLight",
        index: 9
      });
    },
    get C159() {
      return C159 = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_name$5]: "PdfBlendMode.difference",
        index: 10
      });
    },
    get C160() {
      return C160 = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_name$5]: "PdfBlendMode.exclusion",
        index: 11
      });
    },
    get C161() {
      return C161 = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_name$5]: "PdfBlendMode.hue",
        index: 12
      });
    },
    get C162() {
      return C162 = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_name$5]: "PdfBlendMode.saturation",
        index: 13
      });
    },
    get C163() {
      return C163 = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_name$5]: "PdfBlendMode.color",
        index: 14
      });
    },
    get C164() {
      return C164 = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_name$5]: "PdfBlendMode.luminosity",
        index: 15
      });
    },
    get C165() {
      return C165 = dart.constList([C149 || CT.C149, C150 || CT.C150, C151 || CT.C151, C152 || CT.C152, C153 || CT.C153, C154 || CT.C154, C155 || CT.C155, C156 || CT.C156, C157 || CT.C157, C158 || CT.C158, C159 || CT.C159, C160 || CT.C160, C161 || CT.C161, C162 || CT.C162, C163 || CT.C163, C164 || CT.C164], PdfBlendModeL());
    },
    get C166() {
      return C166 = dart.const({
        __proto__: data_types.PdfNum.prototype,
        [PdfNum_value]: 10
      });
    },
    get C167() {
      return C167 = dart.const({
        __proto__: data_types.PdfNum.prototype,
        [PdfNum_value]: 79
      });
    },
    get C168() {
      return C168 = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/Font"
      });
    },
    get C169() {
      return C169 = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/Identity"
      });
    },
    get C170() {
      return C170 = dart.const({
        __proto__: data_types.PdfNum.prototype,
        [PdfNum_value]: 1000
      });
    },
    get C171() {
      return C171 = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/CIDFontType2"
      });
    },
    get C172() {
      return C172 = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/Identity-H"
      });
    },
    get C173() {
      return C173 = dart.constList([], doubleL());
    },
    get C174() {
      return C174 = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/WinAnsiEncoding"
      });
    },
    get C176() {
      return C176 = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/PDF"
      });
    },
    get C177() {
      return C177 = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/Text"
      });
    },
    get C178() {
      return C178 = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/ImageB"
      });
    },
    get C179() {
      return C179 = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/ImageC"
      });
    },
    get C175() {
      return C175 = dart.constList([C176 || CT.C176, C177 || CT.C177, C178 || CT.C178, C179 || CT.C179], PdfNameL());
    },
    get C180() {
      return C180 = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/Group"
      });
    },
    get C181() {
      return C181 = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/Transparency"
      });
    },
    get C182() {
      return C182 = dart.const({
        __proto__: page_format.PdfPageFormat.prototype,
        [PdfPageFormat_marginRight]: 56.69291338582677,
        [PdfPageFormat_marginLeft]: 56.69291338582677,
        [PdfPageFormat_marginBottom]: 56.69291338582677,
        [PdfPageFormat_marginTop]: 56.69291338582677,
        [PdfPageFormat_height]: 841.8897637795275,
        [PdfPageFormat_width]: 595.275590551181
      });
    },
    get C183() {
      return C183 = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/XYZ"
      });
    },
    get C184() {
      return C184 = dart.const({
        __proto__: data_types.PdfNull.prototype
      });
    },
    get C185() {
      return C185 = dart.constList(["/UseNone", "/UseOutlines", "/UseThumbs", "/FullScreen"], StringL());
    },
    get C186() {
      return C186 = dart.const({
        __proto__: document.PdfPageMode.prototype,
        [_name$6]: "PdfPageMode.none",
        index: 0
      });
    },
    get C187() {
      return C187 = dart.const({
        __proto__: document.PdfPageMode.prototype,
        [_name$6]: "PdfPageMode.outlines",
        index: 1
      });
    },
    get C188() {
      return C188 = dart.const({
        __proto__: document.PdfPageMode.prototype,
        [_name$6]: "PdfPageMode.thumbs",
        index: 2
      });
    },
    get C189() {
      return C189 = dart.const({
        __proto__: document.PdfPageMode.prototype,
        [_name$6]: "PdfPageMode.fullscreen",
        index: 3
      });
    },
    get C190() {
      return C190 = dart.constList([C186 || CT.C186, C187 || CT.C187, C188 || CT.C188, C189 || CT.C189], PdfPageModeL());
    },
    get C191() {
      return C191 = dart.const({
        __proto__: data_types.PdfStringFormat.prototype,
        [_name$7]: "PdfStringFormat.binary",
        index: 0
      });
    },
    get C192() {
      return C192 = dart.const({
        __proto__: data_types.PdfStringFormat.prototype,
        [_name$7]: "PdfStringFormat.litteral",
        index: 1
      });
    },
    get C193() {
      return C193 = dart.constList([C191 || CT.C191, C192 || CT.C192], PdfStringFormatL());
    },
    get C194() {
      return C194 = dart.constList([60, 60], intL());
    },
    get C195() {
      return C195 = dart.constList([62, 62], intL());
    },
    get C196() {
      return C196 = dart.const({
        __proto__: border.PdfBorderStyle.prototype,
        [_name$8]: "PdfBorderStyle.solid",
        index: 0
      });
    },
    get C197() {
      return C197 = dart.const({
        __proto__: border.PdfBorderStyle.prototype,
        [_name$8]: "PdfBorderStyle.dashed",
        index: 1
      });
    },
    get C198() {
      return C198 = dart.const({
        __proto__: border.PdfBorderStyle.prototype,
        [_name$8]: "PdfBorderStyle.beveled",
        index: 2
      });
    },
    get C199() {
      return C199 = dart.const({
        __proto__: border.PdfBorderStyle.prototype,
        [_name$8]: "PdfBorderStyle.inset",
        index: 3
      });
    },
    get C200() {
      return C200 = dart.const({
        __proto__: border.PdfBorderStyle.prototype,
        [_name$8]: "PdfBorderStyle.underlined",
        index: 4
      });
    },
    get C201() {
      return C201 = dart.constList([C196 || CT.C196, C197 || CT.C197, C198 || CT.C198, C199 || CT.C199, C200 || CT.C200], PdfBorderStyleL());
    },
    get C202() {
      return C202 = dart.const({
        __proto__: annotation.PdfAnnotFlags.prototype,
        [_name$9]: "PdfAnnotFlags.invisible",
        index: 0
      });
    },
    get C203() {
      return C203 = dart.const({
        __proto__: annotation.PdfAnnotFlags.prototype,
        [_name$9]: "PdfAnnotFlags.hidden",
        index: 1
      });
    },
    get C204() {
      return C204 = dart.const({
        __proto__: annotation.PdfAnnotFlags.prototype,
        [_name$9]: "PdfAnnotFlags.print",
        index: 2
      });
    },
    get C205() {
      return C205 = dart.const({
        __proto__: annotation.PdfAnnotFlags.prototype,
        [_name$9]: "PdfAnnotFlags.noZoom",
        index: 3
      });
    },
    get C206() {
      return C206 = dart.const({
        __proto__: annotation.PdfAnnotFlags.prototype,
        [_name$9]: "PdfAnnotFlags.noRotate",
        index: 4
      });
    },
    get C207() {
      return C207 = dart.const({
        __proto__: annotation.PdfAnnotFlags.prototype,
        [_name$9]: "PdfAnnotFlags.noView",
        index: 5
      });
    },
    get C208() {
      return C208 = dart.const({
        __proto__: annotation.PdfAnnotFlags.prototype,
        [_name$9]: "PdfAnnotFlags.readOnly",
        index: 6
      });
    },
    get C209() {
      return C209 = dart.const({
        __proto__: annotation.PdfAnnotFlags.prototype,
        [_name$9]: "PdfAnnotFlags.locked",
        index: 7
      });
    },
    get C210() {
      return C210 = dart.const({
        __proto__: annotation.PdfAnnotFlags.prototype,
        [_name$9]: "PdfAnnotFlags.toggleNoView",
        index: 8
      });
    },
    get C211() {
      return C211 = dart.const({
        __proto__: annotation.PdfAnnotFlags.prototype,
        [_name$9]: "PdfAnnotFlags.lockedContent",
        index: 9
      });
    },
    get C212() {
      return C212 = dart.constList([C202 || CT.C202, C203 || CT.C203, C204 || CT.C204, C205 || CT.C205, C206 || CT.C206, C207 || CT.C207, C208 || CT.C208, C209 || CT.C209, C210 || CT.C210, C211 || CT.C211], PdfAnnotFlagsL());
    },
    get C213() {
      return C213 = dart.const({
        __proto__: annotation.PdfAnnotApparence.prototype,
        [_name$9]: "PdfAnnotApparence.normal",
        index: 0
      });
    },
    get C214() {
      return C214 = dart.const({
        __proto__: annotation.PdfAnnotApparence.prototype,
        [_name$9]: "PdfAnnotApparence.rollover",
        index: 1
      });
    },
    get C215() {
      return C215 = dart.const({
        __proto__: annotation.PdfAnnotApparence.prototype,
        [_name$9]: "PdfAnnotApparence.down",
        index: 2
      });
    },
    get C216() {
      return C216 = dart.constList([C213 || CT.C213, C214 || CT.C214, C215 || CT.C215], PdfAnnotApparenceL());
    },
    get C217() {
      return C217 = dart.constList([0, 0, 0], intL());
    },
    get C218() {
      return C218 = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/GoTo"
      });
    },
    get C219() {
      return C219 = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/URI"
      });
    },
    get C220() {
      return C220 = dart.const({
        __proto__: annotation.PdfAnnotHighlighting.prototype,
        [_name$9]: "PdfAnnotHighlighting.none",
        index: 0
      });
    },
    get C221() {
      return C221 = dart.const({
        __proto__: annotation.PdfAnnotHighlighting.prototype,
        [_name$9]: "PdfAnnotHighlighting.invert",
        index: 1
      });
    },
    get C222() {
      return C222 = dart.const({
        __proto__: annotation.PdfAnnotHighlighting.prototype,
        [_name$9]: "PdfAnnotHighlighting.outline",
        index: 2
      });
    },
    get C223() {
      return C223 = dart.const({
        __proto__: annotation.PdfAnnotHighlighting.prototype,
        [_name$9]: "PdfAnnotHighlighting.push",
        index: 3
      });
    },
    get C224() {
      return C224 = dart.const({
        __proto__: annotation.PdfAnnotHighlighting.prototype,
        [_name$9]: "PdfAnnotHighlighting.toggle",
        index: 4
      });
    },
    get C225() {
      return C225 = dart.constList([C220 || CT.C220, C221 || CT.C221, C222 || CT.C222, C223 || CT.C223, C224 || CT.C224], PdfAnnotHighlightingL());
    },
    get C226() {
      return C226 = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/N"
      });
    },
    get C227() {
      return C227 = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/I"
      });
    },
    get C228() {
      return C228 = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/O"
      });
    },
    get C229() {
      return C229 = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/P"
      });
    },
    get C230() {
      return C230 = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/T"
      });
    },
    get C231() {
      return C231 = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_name$9]: "PdfFieldFlags.readOnly",
        index: 0
      });
    },
    get C232() {
      return C232 = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_name$9]: "PdfFieldFlags.mandatory",
        index: 1
      });
    },
    get C233() {
      return C233 = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_name$9]: "PdfFieldFlags.noExport",
        index: 2
      });
    },
    get C234() {
      return C234 = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_name$9]: "PdfFieldFlags.reserved4",
        index: 3
      });
    },
    get C235() {
      return C235 = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_name$9]: "PdfFieldFlags.reserved5",
        index: 4
      });
    },
    get C236() {
      return C236 = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_name$9]: "PdfFieldFlags.reserved6",
        index: 5
      });
    },
    get C237() {
      return C237 = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_name$9]: "PdfFieldFlags.reserved7",
        index: 6
      });
    },
    get C238() {
      return C238 = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_name$9]: "PdfFieldFlags.reserved8",
        index: 7
      });
    },
    get C239() {
      return C239 = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_name$9]: "PdfFieldFlags.reserved9",
        index: 8
      });
    },
    get C240() {
      return C240 = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_name$9]: "PdfFieldFlags.reserved10",
        index: 9
      });
    },
    get C241() {
      return C241 = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_name$9]: "PdfFieldFlags.reserved11",
        index: 10
      });
    },
    get C242() {
      return C242 = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_name$9]: "PdfFieldFlags.reserved12",
        index: 11
      });
    },
    get C243() {
      return C243 = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_name$9]: "PdfFieldFlags.multiline",
        index: 12
      });
    },
    get C244() {
      return C244 = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_name$9]: "PdfFieldFlags.password",
        index: 13
      });
    },
    get C245() {
      return C245 = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_name$9]: "PdfFieldFlags.noToggleToOff",
        index: 14
      });
    },
    get C246() {
      return C246 = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_name$9]: "PdfFieldFlags.radio",
        index: 15
      });
    },
    get C247() {
      return C247 = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_name$9]: "PdfFieldFlags.pushButton",
        index: 16
      });
    },
    get C248() {
      return C248 = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_name$9]: "PdfFieldFlags.combo",
        index: 17
      });
    },
    get C249() {
      return C249 = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_name$9]: "PdfFieldFlags.edit",
        index: 18
      });
    },
    get C250() {
      return C250 = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_name$9]: "PdfFieldFlags.sort",
        index: 19
      });
    },
    get C251() {
      return C251 = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_name$9]: "PdfFieldFlags.fileSelect",
        index: 20
      });
    },
    get C252() {
      return C252 = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_name$9]: "PdfFieldFlags.multiSelect",
        index: 21
      });
    },
    get C253() {
      return C253 = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_name$9]: "PdfFieldFlags.doNotSpellCheck",
        index: 22
      });
    },
    get C254() {
      return C254 = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_name$9]: "PdfFieldFlags.doNotScroll",
        index: 23
      });
    },
    get C255() {
      return C255 = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_name$9]: "PdfFieldFlags.comb",
        index: 24
      });
    },
    get C256() {
      return C256 = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_name$9]: "PdfFieldFlags.radiosInUnison",
        index: 25
      });
    },
    get C257() {
      return C257 = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_name$9]: "PdfFieldFlags.commitOnSelChange",
        index: 26
      });
    },
    get C258() {
      return C258 = dart.constList([C231 || CT.C231, C232 || CT.C232, C233 || CT.C233, C234 || CT.C234, C235 || CT.C235, C236 || CT.C236, C237 || CT.C237, C238 || CT.C238, C239 || CT.C239, C240 || CT.C240, C241 || CT.C241, C242 || CT.C242, C243 || CT.C243, C244 || CT.C244, C245 || CT.C245, C246 || CT.C246, C247 || CT.C247, C248 || CT.C248, C249 || CT.C249, C250 || CT.C250, C251 || CT.C251, C252 || CT.C252, C253 || CT.C253, C254 || CT.C254, C255 || CT.C255, C256 || CT.C256, C257 || CT.C257], PdfFieldFlagsL());
    },
    get C259() {
      return C259 = dart.const({
        __proto__: annotation.PdfTextFieldAlign.prototype,
        [_name$9]: "PdfTextFieldAlign.left",
        index: 0
      });
    },
    get C260() {
      return C260 = dart.const({
        __proto__: annotation.PdfTextFieldAlign.prototype,
        [_name$9]: "PdfTextFieldAlign.center",
        index: 1
      });
    },
    get C261() {
      return C261 = dart.const({
        __proto__: annotation.PdfTextFieldAlign.prototype,
        [_name$9]: "PdfTextFieldAlign.right",
        index: 2
      });
    },
    get C262() {
      return C262 = dart.constList([C259 || CT.C259, C260 || CT.C260, C261 || CT.C261], PdfTextFieldAlignL());
    },
    get C263() {
      return C263 = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/Yes"
      });
    },
    get C264() {
      return C264 = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/Off"
      });
    }
  }, false);
  var _name$ = dart.privateName(signature, "_name");
  var C0;
  var C1;
  var C2;
  signature.PdfSigFlags = class PdfSigFlags extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (signature.PdfSigFlags.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = signature.PdfSigFlags.prototype;
  dart.addTypeTests(signature.PdfSigFlags);
  dart.addTypeCaches(signature.PdfSigFlags);
  dart.setMethodSignature(signature.PdfSigFlags, () => ({
    __proto__: dart.getMethods(signature.PdfSigFlags.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(signature.PdfSigFlags, L0);
  dart.setFieldSignature(signature.PdfSigFlags, () => ({
    __proto__: dart.getFields(signature.PdfSigFlags.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(signature.PdfSigFlags, ['toString']);
  signature.PdfSigFlags.signaturesExist = C0 || CT.C0;
  signature.PdfSigFlags.appendOnly = C1 || CT.C1;
  signature.PdfSigFlags.values = C2 || CT.C2;
  var _offsetStart = dart.privateName(signature, "_offsetStart");
  var _offsetEnd = dart.privateName(signature, "_offsetEnd");
  var C3;
  var _writeStart = dart.privateName(object, "_writeStart");
  var _writeEnd = dart.privateName(object, "_writeEnd");
  var params = dart.privateName(object, "PdfObject.params");
  var objser$ = dart.privateName(object, "PdfObject.objser");
  var objgen$ = dart.privateName(object, "PdfObject.objgen");
  var pdfDocument$ = dart.privateName(object, "PdfObject.pdfDocument");
  object.PdfObject = class PdfObject extends core.Object {
    get params() {
      return this[params];
    }
    set params(value) {
      super.params = value;
    }
    get objser() {
      return this[objser$];
    }
    set objser(value) {
      super.objser = value;
    }
    get objgen() {
      return this[objgen$];
    }
    set objgen(value) {
      super.objgen = value;
    }
    get pdfDocument() {
      return this[pdfDocument$];
    }
    set pdfDocument(value) {
      super.pdfDocument = value;
    }
    write(os) {
      this.prepare();
      this[_writeStart](os);
      this.writeContent(os);
      this[_writeEnd](os);
    }
    prepare() {
    }
    [_writeStart](os) {
      os.putString(dart.str(this.objser) + " " + dart.str(this.objgen) + " obj\n");
    }
    writeContent(os) {
      if (dart.test(this.params.isNotEmpty)) {
        this.params.output(os);
        os.putString("\n");
      }
    }
    [_writeEnd](os) {
      os.putString("endobj\n");
    }
    ref() {
      return new data_types.PdfIndirect.new(this.objser, this.objgen);
    }
    toString() {
      return dart.str(this.runtimeType) + " " + dart.str(this.params);
    }
  };
  (object.PdfObject.new = function(pdfDocument, opts) {
    let t0;
    let type = opts && 'type' in opts ? opts.type : null;
    let objgen = opts && 'objgen' in opts ? opts.objgen : 0;
    let objser = opts && 'objser' in opts ? opts.objser : null;
    this[params] = new data_types.PdfDict.new();
    this[pdfDocument$] = pdfDocument;
    this[objgen$] = objgen;
    if (!(pdfDocument != null)) dart.assertFailed(null, L2, 32, 16, "pdfDocument != null");
    this[objser$] = (t0 = objser, t0 == null ? pdfDocument.genSerial() : t0);
    if (type != null) {
      this.params._set("/Type", new data_types.PdfName.new(type));
    }
    this.pdfDocument.objects.add(this);
  }).prototype = object.PdfObject.prototype;
  dart.addTypeTests(object.PdfObject);
  dart.addTypeCaches(object.PdfObject);
  dart.setMethodSignature(object.PdfObject, () => ({
    __proto__: dart.getMethods(object.PdfObject.__proto__),
    write: dart.fnType(dart.void, [dart.legacy(stream.PdfStream)]),
    prepare: dart.fnType(dart.void, []),
    [_writeStart]: dart.fnType(dart.void, [dart.legacy(stream.PdfStream)]),
    writeContent: dart.fnType(dart.void, [dart.legacy(stream.PdfStream)]),
    [_writeEnd]: dart.fnType(dart.void, [dart.legacy(stream.PdfStream)]),
    ref: dart.fnType(dart.legacy(data_types.PdfIndirect), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(object.PdfObject, L3);
  dart.setFieldSignature(object.PdfObject, () => ({
    __proto__: dart.getFields(object.PdfObject.__proto__),
    params: dart.finalFieldType(dart.legacy(data_types.PdfDict)),
    objser: dart.finalFieldType(dart.legacy(core.int)),
    objgen: dart.finalFieldType(dart.legacy(core.int)),
    pdfDocument: dart.finalFieldType(dart.legacy(document.PdfDocument))
  }));
  dart.defineExtensionMethods(object.PdfObject, ['toString']);
  var flags$ = dart.privateName(signature, "PdfSignature.flags");
  var crypto$ = dart.privateName(signature, "PdfSignature.crypto");
  signature.PdfSignature = class PdfSignature extends object.PdfObject {
    get flags() {
      return this[flags$];
    }
    set flags(value) {
      super.flags = value;
    }
    get crypto() {
      return this[crypto$];
    }
    set crypto(value) {
      super.crypto = value;
    }
    get flagsValue() {
      return this.flags[$map](intL(), dart.fn(e => (1)[$rightShift](e.index), PdfSigFlagsLTointL()))[$reduce](dart.fn((a, b) => (dart.notNull(a) | dart.notNull(b)) >>> 0, intLAndintLTointL()));
    }
    write(os) {
      this.crypto.preSign(this, this.params);
      this[_offsetStart] = dart.notNull(os.offset) + (dart.str(this.objser) + " " + dart.str(this.objgen) + " obj\n").length;
      super.write(os);
      this[_offsetEnd] = os.offset;
    }
    writeSignature(os) {
      return async.async(dart.void, (function* writeSignature() {
        if (!(this[_offsetStart] != null && this[_offsetEnd] != null)) dart.assertFailed("Must reserve the object space before signing the document", L1, 56, 12, "_offsetStart != null && _offsetEnd != null");
        yield this.crypto.sign(this, os, this.params, this[_offsetStart], this[_offsetEnd]);
      }).bind(this));
    }
  };
  (signature.PdfSignature.new = function(pdfDocument, opts) {
    let t0;
    let crypto = opts && 'crypto' in opts ? opts.crypto : null;
    let flags = opts && 'flags' in opts ? opts.flags : null;
    this[_offsetStart] = null;
    this[_offsetEnd] = null;
    this[crypto$] = crypto;
    if (!(crypto != null)) dart.assertFailed(null, L1, 31, 16, "crypto != null");
    this[flags$] = (t0 = flags, t0 == null ? C3 || CT.C3 : t0);
    signature.PdfSignature.__proto__.new.call(this, pdfDocument, {type: "/Sig"});
    ;
  }).prototype = signature.PdfSignature.prototype;
  dart.addTypeTests(signature.PdfSignature);
  dart.addTypeCaches(signature.PdfSignature);
  dart.setMethodSignature(signature.PdfSignature, () => ({
    __proto__: dart.getMethods(signature.PdfSignature.__proto__),
    writeSignature: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(stream.PdfStream)])
  }));
  dart.setGetterSignature(signature.PdfSignature, () => ({
    __proto__: dart.getGetters(signature.PdfSignature.__proto__),
    flagsValue: dart.legacy(core.int)
  }));
  dart.setLibraryUri(signature.PdfSignature, L0);
  dart.setFieldSignature(signature.PdfSignature, () => ({
    __proto__: dart.getFields(signature.PdfSignature.__proto__),
    flags: dart.finalFieldType(dart.legacy(core.Set$(dart.legacy(signature.PdfSigFlags)))),
    crypto: dart.finalFieldType(dart.legacy(signature.PdfSignatureBase)),
    [_offsetStart]: dart.fieldType(dart.legacy(core.int)),
    [_offsetEnd]: dart.fieldType(dart.legacy(core.int))
  }));
  signature.PdfSignatureBase = class PdfSignatureBase extends core.Object {};
  (signature.PdfSignatureBase.new = function() {
    ;
  }).prototype = signature.PdfSignatureBase.prototype;
  dart.addTypeTests(signature.PdfSignatureBase);
  dart.addTypeCaches(signature.PdfSignatureBase);
  dart.setLibraryUri(signature.PdfSignatureBase, L0);
  var C4;
  var os$ = dart.privateName(output, "PdfOutput.os");
  var offsets = dart.privateName(output, "PdfOutput.offsets");
  var rootID = dart.privateName(output, "PdfOutput.rootID");
  var infoID = dart.privateName(output, "PdfOutput.infoID");
  var encryptID = dart.privateName(output, "PdfOutput.encryptID");
  var signatureID = dart.privateName(output, "PdfOutput.signatureID");
  output.PdfOutput = class PdfOutput extends core.Object {
    get os() {
      return this[os$];
    }
    set os(value) {
      super.os = value;
    }
    get offsets() {
      return this[offsets];
    }
    set offsets(value) {
      this[offsets] = value;
    }
    get rootID() {
      return this[rootID];
    }
    set rootID(value) {
      this[rootID] = value;
    }
    get infoID() {
      return this[infoID];
    }
    set infoID(value) {
      this[infoID] = value;
    }
    get encryptID() {
      return this[encryptID];
    }
    set encryptID(value) {
      this[encryptID] = value;
    }
    get signatureID() {
      return this[signatureID];
    }
    set signatureID(value) {
      this[signatureID] = value;
    }
    write(ob) {
      if (PdfCatalogL().is(ob)) {
        this.rootID = ob;
      } else if (PdfInfoL().is(ob)) {
        this.infoID = ob;
      } else if (PdfEncryptionL().is(ob)) {
        this.encryptID = ob;
      } else if (PdfSignatureL().is(ob)) {
        if (!(this.signatureID == null)) dart.assertFailed("Only one document signature is allowed", L4, 62, 14, "signatureID == null");
        this.signatureID = ob;
      }
      this.offsets[$add](new xref$.PdfXref.new(ob.objser, this.os.offset));
      ob.write(this.os);
    }
    close() {
      return async.async(dart.void, (function* close() {
        let xref = this.os.offset;
        this.os.putString("xref\n");
        this.offsets[$sort](dart.fn((a, b) => a.id[$compareTo](b.id), PdfXrefLAndPdfXrefLTointL()));
        let firstid = 0;
        let lastid = 0;
        let block = JSArrayOfPdfXrefL().of([]);
        block[$add](new xref$.PdfXref.new(0, 0, {generation: 65535}));
        for (let x of this.offsets) {
          if (lastid != null && x.id !== dart.notNull(lastid) + 1) {
            this.writeblock(firstid, block);
            block[$clear]();
            firstid = x.id;
          }
          block[$add](x);
          lastid = x.id;
        }
        this.writeblock(firstid, block);
        this.os.putString("trailer\n");
        let params = new data_types.PdfDict.new();
        params._set("/Size", new data_types.PdfNum.new(this.rootID.pdfDocument.objser));
        if (this.rootID != null) {
          params._set("/Root", this.rootID.ref());
          let id = new data_types.PdfString.new(this.rootID.pdfDocument.documentID, data_types.PdfStringFormat.binary);
          params._set("/ID", new data_types.PdfArray.new(JSArrayOfPdfDataTypeL().of([id, id])));
        } else {
          dart.throw(core.Exception.new("Root object is not present in document"));
        }
        if (this.infoID != null) {
          params._set("/Info", this.infoID.ref());
        }
        if (this.encryptID != null) {
          params._set("/Encrypt", this.encryptID.ref());
        }
        if (this.rootID.pdfDocument.prev != null) {
          params._set("/Prev", new data_types.PdfNum.new(this.rootID.pdfDocument.prev.xrefOffset));
        }
        params.output(this.os);
        this.os.putString("\nstartxref\n" + dart.str(xref) + "\n%%EOF\n");
        if (this.signatureID != null) {
          yield this.signatureID.writeSignature(this.os);
        }
      }).bind(this));
    }
    writeblock(firstid, block) {
      this.os.putString(dart.str(firstid) + " " + dart.str(block[$length]) + "\n");
      for (let x of block) {
        this.os.putString(x.ref());
        this.os.putString("\n");
      }
    }
  };
  (output.PdfOutput.new = function(os) {
    this[offsets] = JSArrayOfPdfXrefL().of([]);
    this[rootID] = null;
    this[infoID] = null;
    this[encryptID] = null;
    this[signatureID] = null;
    this[os$] = os;
    this.os.putString("%PDF-1.4\n");
    this.os.putBytes(C4 || CT.C4);
  }).prototype = output.PdfOutput.prototype;
  dart.addTypeTests(output.PdfOutput);
  dart.addTypeCaches(output.PdfOutput);
  dart.setMethodSignature(output.PdfOutput, () => ({
    __proto__: dart.getMethods(output.PdfOutput.__proto__),
    write: dart.fnType(dart.void, [dart.legacy(object.PdfObject)]),
    close: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    writeblock: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.List$(dart.legacy(xref$.PdfXref)))])
  }));
  dart.setLibraryUri(output.PdfOutput, L5);
  dart.setFieldSignature(output.PdfOutput, () => ({
    __proto__: dart.getFields(output.PdfOutput.__proto__),
    os: dart.finalFieldType(dart.legacy(stream.PdfStream)),
    offsets: dart.fieldType(dart.legacy(core.List$(dart.legacy(xref$.PdfXref)))),
    rootID: dart.fieldType(dart.legacy(object.PdfObject)),
    infoID: dart.fieldType(dart.legacy(object.PdfObject)),
    encryptID: dart.fieldType(dart.legacy(encryption.PdfEncryption)),
    signatureID: dart.fieldType(dart.legacy(signature.PdfSignature))
  }));
  dart.defineLazy(js, {
    /*js.defaultDeflate*/get defaultDeflate() {
      return dart.bind(new zlib_encoder.ZLibEncoder.new(), 'encode');
    },
    set defaultDeflate(_) {}
  }, true);
  var author$ = dart.privateName(info, "PdfInfo.author");
  var creator$ = dart.privateName(info, "PdfInfo.creator");
  var title$ = dart.privateName(info, "PdfInfo.title");
  var subject$ = dart.privateName(info, "PdfInfo.subject");
  var keywords$ = dart.privateName(info, "PdfInfo.keywords");
  var producer$ = dart.privateName(info, "PdfInfo.producer");
  info.PdfInfo = class PdfInfo extends object.PdfObject {
    get author() {
      return this[author$];
    }
    set author(value) {
      super.author = value;
    }
    get creator() {
      return this[creator$];
    }
    set creator(value) {
      super.creator = value;
    }
    get title() {
      return this[title$];
    }
    set title(value) {
      super.title = value;
    }
    get subject() {
      return this[subject$];
    }
    set subject(value) {
      super.subject = value;
    }
    get keywords() {
      return this[keywords$];
    }
    set keywords(value) {
      super.keywords = value;
    }
    get producer() {
      return this[producer$];
    }
    set producer(value) {
      super.producer = value;
    }
  };
  (info.PdfInfo.new = function(pdfDocument, opts) {
    let title = opts && 'title' in opts ? opts.title : null;
    let author = opts && 'author' in opts ? opts.author : null;
    let creator = opts && 'creator' in opts ? opts.creator : null;
    let subject = opts && 'subject' in opts ? opts.subject : null;
    let keywords = opts && 'keywords' in opts ? opts.keywords : null;
    let producer = opts && 'producer' in opts ? opts.producer : null;
    this[title$] = title;
    this[author$] = author;
    this[creator$] = creator;
    this[subject$] = subject;
    this[keywords$] = keywords;
    this[producer$] = producer;
    info.PdfInfo.__proto__.new.call(this, pdfDocument);
    if (this.author != null) {
      this.params._set("/Author", data_types.PdfSecString.fromString(this, this.author));
    }
    if (this.creator != null) {
      this.params._set("/Creator", data_types.PdfSecString.fromString(this, this.creator));
    }
    if (this.title != null) {
      this.params._set("/Title", data_types.PdfSecString.fromString(this, this.title));
    }
    if (this.subject != null) {
      this.params._set("/Subject", data_types.PdfSecString.fromString(this, this.subject));
    }
    if (this.keywords != null) {
      this.params._set("/Keywords", data_types.PdfSecString.fromString(this, this.keywords));
    }
    if (this.producer != null) {
      this.params._set("/Producer", data_types.PdfSecString.fromString(this, dart.str(this.producer) + " (" + dart.str(info.PdfInfo._libraryName) + ")"));
    } else {
      this.params._set("/Producer", data_types.PdfSecString.fromString(this, info.PdfInfo._libraryName));
    }
    this.params._set("/CreationDate", data_types.PdfSecString.fromDate(this, new core.DateTime.now()));
  }).prototype = info.PdfInfo.prototype;
  dart.addTypeTests(info.PdfInfo);
  dart.addTypeCaches(info.PdfInfo);
  dart.setLibraryUri(info.PdfInfo, L6);
  dart.setFieldSignature(info.PdfInfo, () => ({
    __proto__: dart.getFields(info.PdfInfo.__proto__),
    author: dart.finalFieldType(dart.legacy(core.String)),
    creator: dart.finalFieldType(dart.legacy(core.String)),
    title: dart.finalFieldType(dart.legacy(core.String)),
    subject: dart.finalFieldType(dart.legacy(core.String)),
    keywords: dart.finalFieldType(dart.legacy(core.String)),
    producer: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineLazy(info.PdfInfo, {
    /*info.PdfInfo._libraryName*/get _libraryName() {
      return "https://github.com/DavBfr/dart_pdf";
    }
  }, true);
  encryption.PdfEncryption = class PdfEncryption extends object.PdfObject {};
  (encryption.PdfEncryption.new = function(pdfDocument) {
    encryption.PdfEncryption.__proto__.new.call(this, pdfDocument);
    ;
  }).prototype = encryption.PdfEncryption.prototype;
  dart.addTypeTests(encryption.PdfEncryption);
  dart.addTypeCaches(encryption.PdfEncryption);
  dart.setLibraryUri(encryption.PdfEncryption, L7);
  var bytes$ = dart.privateName(document_parser, "PdfDocumentParserBase.bytes");
  document_parser.PdfDocumentParserBase = class PdfDocumentParserBase extends core.Object {
    get bytes() {
      return this[bytes$];
    }
    set bytes(value) {
      super.bytes = value;
    }
  };
  (document_parser.PdfDocumentParserBase.new = function(bytes) {
    this[bytes$] = bytes;
    ;
  }).prototype = document_parser.PdfDocumentParserBase.prototype;
  dart.addTypeTests(document_parser.PdfDocumentParserBase);
  dart.addTypeCaches(document_parser.PdfDocumentParserBase);
  dart.setLibraryUri(document_parser.PdfDocumentParserBase, L8);
  dart.setFieldSignature(document_parser.PdfDocumentParserBase, () => ({
    __proto__: dart.getFields(document_parser.PdfDocumentParserBase.__proto__),
    bytes: dart.finalFieldType(dart.legacy(typed_data.Uint8List))
  }));
  var pages = dart.privateName(page_list, "PdfPageList.pages");
  page_list.PdfPageList = class PdfPageList extends object.PdfObject {
    get pages() {
      return this[pages];
    }
    set pages(value) {
      super.pages = value;
    }
    prepare() {
      super.prepare();
      this.params._set("/Kids", data_types.PdfArray.fromObjects(this.pages));
      this.params._set("/Count", new data_types.PdfNum.new(this.pages[$length]));
    }
  };
  (page_list.PdfPageList.new = function(pdfDocument) {
    this[pages] = JSArrayOfPdfPageL().of([]);
    page_list.PdfPageList.__proto__.new.call(this, pdfDocument, {type: "/Pages"});
    ;
  }).prototype = page_list.PdfPageList.prototype;
  dart.addTypeTests(page_list.PdfPageList);
  dart.addTypeCaches(page_list.PdfPageList);
  dart.setLibraryUri(page_list.PdfPageList, L9);
  dart.setFieldSignature(page_list.PdfPageList, () => ({
    __proto__: dart.getFields(page_list.PdfPageList.__proto__),
    pages: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(page.PdfPage))))
  }));
  var _name$0 = dart.privateName(outline, "_name");
  var C5;
  var C6;
  var C7;
  outline.PdfOutlineMode = class PdfOutlineMode extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (outline.PdfOutlineMode.new = function(index, _name) {
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = outline.PdfOutlineMode.prototype;
  dart.addTypeTests(outline.PdfOutlineMode);
  dart.addTypeCaches(outline.PdfOutlineMode);
  dart.setMethodSignature(outline.PdfOutlineMode, () => ({
    __proto__: dart.getMethods(outline.PdfOutlineMode.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(outline.PdfOutlineMode, L10);
  dart.setFieldSignature(outline.PdfOutlineMode, () => ({
    __proto__: dart.getFields(outline.PdfOutlineMode.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$0]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(outline.PdfOutlineMode, ['toString']);
  outline.PdfOutlineMode.fitPage = C5 || CT.C5;
  outline.PdfOutlineMode.fitRect = C6 || CT.C6;
  outline.PdfOutlineMode.values = C7 || CT.C7;
  var C8;
  var C9;
  var C10;
  var C11;
  var C12;
  outline.PdfOutlineStyle = class PdfOutlineStyle extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (outline.PdfOutlineStyle.new = function(index, _name) {
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = outline.PdfOutlineStyle.prototype;
  dart.addTypeTests(outline.PdfOutlineStyle);
  dart.addTypeCaches(outline.PdfOutlineStyle);
  dart.setMethodSignature(outline.PdfOutlineStyle, () => ({
    __proto__: dart.getMethods(outline.PdfOutlineStyle.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(outline.PdfOutlineStyle, L10);
  dart.setFieldSignature(outline.PdfOutlineStyle, () => ({
    __proto__: dart.getFields(outline.PdfOutlineStyle.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$0]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(outline.PdfOutlineStyle, ['toString']);
  outline.PdfOutlineStyle.normal = C8 || CT.C8;
  outline.PdfOutlineStyle.italic = C9 || CT.C9;
  outline.PdfOutlineStyle.bold = C10 || CT.C10;
  outline.PdfOutlineStyle.italicBold = C11 || CT.C11;
  outline.PdfOutlineStyle.values = C12 || CT.C12;
  var PdfName_value = dart.privateName(data_types, "PdfName.value");
  var C13;
  var C14;
  var outlines = dart.privateName(outline, "PdfOutline.outlines");
  var parent = dart.privateName(outline, "PdfOutline.parent");
  var title$0 = dart.privateName(outline, "PdfOutline.title");
  var dest$ = dart.privateName(outline, "PdfOutline.dest");
  var rect$ = dart.privateName(outline, "PdfOutline.rect");
  var anchor$ = dart.privateName(outline, "PdfOutline.anchor");
  var color$ = dart.privateName(outline, "PdfOutline.color");
  var destMode$ = dart.privateName(outline, "PdfOutline.destMode");
  var style$ = dart.privateName(outline, "PdfOutline.style");
  var effectiveLevel = dart.privateName(outline, "PdfOutline.effectiveLevel");
  outline.PdfOutline = class PdfOutline extends object.PdfObject {
    get outlines() {
      return this[outlines];
    }
    set outlines(value) {
      this[outlines] = value;
    }
    get parent() {
      return this[parent];
    }
    set parent(value) {
      this[parent] = value;
    }
    get title() {
      return this[title$0];
    }
    set title(value) {
      super.title = value;
    }
    get dest() {
      return this[dest$];
    }
    set dest(value) {
      this[dest$] = value;
    }
    get rect() {
      return this[rect$];
    }
    set rect(value) {
      super.rect = value;
    }
    get anchor() {
      return this[anchor$];
    }
    set anchor(value) {
      super.anchor = value;
    }
    get color() {
      return this[color$];
    }
    set color(value) {
      super.color = value;
    }
    get destMode() {
      return this[destMode$];
    }
    set destMode(value) {
      super.destMode = value;
    }
    get style() {
      return this[style$];
    }
    set style(value) {
      super.style = value;
    }
    get effectiveLevel() {
      return this[effectiveLevel];
    }
    set effectiveLevel(value) {
      this[effectiveLevel] = value;
    }
    add(outline) {
      outline.parent = this;
      this.outlines[$add](outline);
    }
    prepare() {
      super.prepare();
      if (this.parent != null) {
        this.params._set("/Title", data_types.PdfSecString.fromString(this, this.title));
        if (this.color != null) {
          this.params._set("/C", new data_types.PdfColorType.new(this.color));
        }
        if (this.style != outline.PdfOutlineStyle.normal) {
          this.params._set("/F", new data_types.PdfNum.new(this.style.index));
        }
        if (this.anchor != null) {
          this.params._set("/Dest", data_types.PdfSecString.fromString(this, this.anchor));
        } else {
          let dests = new data_types.PdfArray.new();
          dests.add(this.dest.ref());
          if (this.destMode == outline.PdfOutlineMode.fitPage) {
            dests.add(C13 || CT.C13);
          } else {
            dests.add(C14 || CT.C14);
            dests.add(new data_types.PdfNum.new(this.rect.left));
            dests.add(new data_types.PdfNum.new(this.rect.bottom));
            dests.add(new data_types.PdfNum.new(this.rect.right));
            dests.add(new data_types.PdfNum.new(this.rect.top));
          }
          this.params._set("/Dest", dests);
        }
        this.params._set("/Parent", this.parent.ref());
        let c = this.descendants();
        if (dart.notNull(c) > 0) {
          this.params._set("/Count", new data_types.PdfNum.new(-dart.notNull(c)));
        }
        let index = this.parent.getIndex(this);
        if (dart.notNull(index) > 0) {
          this.params._set("/Prev", this.parent.getNode(dart.notNull(index) - 1).ref());
        }
        if (dart.notNull(index) < dart.notNull(this.parent.getLast())) {
          this.params._set("/Next", this.parent.getNode(dart.notNull(index) + 1).ref());
        }
      } else {
        this.params._set("/Count", new data_types.PdfNum.new(this.outlines[$length]));
      }
      if (dart.test(this.outlines[$isNotEmpty])) {
        this.params._set("/First", this.outlines[$_get](0).ref());
        this.params._set("/Last", this.outlines[$_get](dart.notNull(this.outlines[$length]) - 1).ref());
      }
    }
    getIndex(outline) {
      return this.outlines[$indexOf](outline);
    }
    getLast() {
      return dart.notNull(this.outlines[$length]) - 1;
    }
    getNode(i) {
      return this.outlines[$_get](i);
    }
    descendants() {
      let c = this.outlines[$length];
      for (let o of this.outlines) {
        c = dart.notNull(c) + dart.notNull(o.descendants());
      }
      return c;
    }
  };
  (outline.PdfOutline.new = function(pdfDocument, opts) {
    let title = opts && 'title' in opts ? opts.title : null;
    let dest = opts && 'dest' in opts ? opts.dest : null;
    let rect = opts && 'rect' in opts ? opts.rect : null;
    let anchor = opts && 'anchor' in opts ? opts.anchor : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let destMode = opts && 'destMode' in opts ? opts.destMode : C5 || CT.C5;
    let style = opts && 'style' in opts ? opts.style : C8 || CT.C8;
    this[outlines] = JSArrayOfPdfOutlineL().of([]);
    this[parent] = null;
    this[effectiveLevel] = null;
    this[title$0] = title;
    this[dest$] = dest;
    this[rect$] = rect;
    this[anchor$] = anchor;
    this[color$] = color;
    this[destMode$] = destMode;
    this[style$] = style;
    if (!(anchor == null || dest == null && rect == null)) dart.assertFailed(null, L11, 61, 16, "anchor == null || (dest == null && rect == null)");
    if (!(destMode != null)) dart.assertFailed(null, L11, 62, 16, "destMode != null");
    if (!(style != null)) dart.assertFailed(null, L11, 63, 16, "style != null");
    outline.PdfOutline.__proto__.new.call(this, pdfDocument);
    ;
  }).prototype = outline.PdfOutline.prototype;
  dart.addTypeTests(outline.PdfOutline);
  dart.addTypeCaches(outline.PdfOutline);
  dart.setMethodSignature(outline.PdfOutline, () => ({
    __proto__: dart.getMethods(outline.PdfOutline.__proto__),
    add: dart.fnType(dart.void, [dart.legacy(outline.PdfOutline)]),
    getIndex: dart.fnType(dart.legacy(core.int), [dart.legacy(outline.PdfOutline)]),
    getLast: dart.fnType(dart.legacy(core.int), []),
    getNode: dart.fnType(dart.legacy(outline.PdfOutline), [dart.legacy(core.int)]),
    descendants: dart.fnType(dart.legacy(core.int), [])
  }));
  dart.setLibraryUri(outline.PdfOutline, L10);
  dart.setFieldSignature(outline.PdfOutline, () => ({
    __proto__: dart.getFields(outline.PdfOutline.__proto__),
    outlines: dart.fieldType(dart.legacy(core.List$(dart.legacy(outline.PdfOutline)))),
    parent: dart.fieldType(dart.legacy(outline.PdfOutline)),
    title: dart.finalFieldType(dart.legacy(core.String)),
    dest: dart.fieldType(dart.legacy(page.PdfPage)),
    rect: dart.finalFieldType(dart.legacy(rect.PdfRect)),
    anchor: dart.finalFieldType(dart.legacy(core.String)),
    color: dart.finalFieldType(dart.legacy(color.PdfColor)),
    destMode: dart.finalFieldType(dart.legacy(outline.PdfOutlineMode)),
    style: dart.finalFieldType(dart.legacy(outline.PdfOutlineStyle)),
    effectiveLevel: dart.fieldType(dart.legacy(core.int))
  }));
  var _name$1 = dart.privateName(shading, "_name");
  var C15;
  var C16;
  var C17;
  shading.PdfShadingType = class PdfShadingType extends core.Object {
    toString() {
      return this[_name$1];
    }
  };
  (shading.PdfShadingType.new = function(index, _name) {
    this.index = index;
    this[_name$1] = _name;
    ;
  }).prototype = shading.PdfShadingType.prototype;
  dart.addTypeTests(shading.PdfShadingType);
  dart.addTypeCaches(shading.PdfShadingType);
  dart.setMethodSignature(shading.PdfShadingType, () => ({
    __proto__: dart.getMethods(shading.PdfShadingType.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(shading.PdfShadingType, L12);
  dart.setFieldSignature(shading.PdfShadingType, () => ({
    __proto__: dart.getFields(shading.PdfShadingType.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$1]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(shading.PdfShadingType, ['toString']);
  shading.PdfShadingType.axial = C15 || CT.C15;
  shading.PdfShadingType.radial = C16 || CT.C16;
  shading.PdfShadingType.values = C17 || CT.C17;
  var PdfBool_value = dart.privateName(data_types, "PdfBool.value");
  var C18;
  var C19;
  var shadingType$ = dart.privateName(shading, "PdfShading.shadingType");
  var func = dart.privateName(shading, "PdfShading.function");
  var start$ = dart.privateName(shading, "PdfShading.start");
  var end$ = dart.privateName(shading, "PdfShading.end");
  var boundingBox$ = dart.privateName(shading, "PdfShading.boundingBox");
  var extendStart$ = dart.privateName(shading, "PdfShading.extendStart");
  var extendEnd$ = dart.privateName(shading, "PdfShading.extendEnd");
  var radius0$ = dart.privateName(shading, "PdfShading.radius0");
  var radius1$ = dart.privateName(shading, "PdfShading.radius1");
  shading.PdfShading = class PdfShading extends object.PdfObject {
    get shadingType() {
      return this[shadingType$];
    }
    set shadingType(value) {
      super.shadingType = value;
    }
    get function() {
      return this[func];
    }
    set function(value) {
      super.function = value;
    }
    get start() {
      return this[start$];
    }
    set start(value) {
      super.start = value;
    }
    get end() {
      return this[end$];
    }
    set end(value) {
      super.end = value;
    }
    get boundingBox() {
      return this[boundingBox$];
    }
    set boundingBox(value) {
      super.boundingBox = value;
    }
    get extendStart() {
      return this[extendStart$];
    }
    set extendStart(value) {
      super.extendStart = value;
    }
    get extendEnd() {
      return this[extendEnd$];
    }
    set extendEnd(value) {
      super.extendEnd = value;
    }
    get radius0() {
      return this[radius0$];
    }
    set radius0(value) {
      super.radius0 = value;
    }
    get radius1() {
      return this[radius1$];
    }
    set radius1(value) {
      super.radius1 = value;
    }
    get name() {
      return "/S" + dart.str(this.objser);
    }
    prepare() {
      super.prepare();
      this.params._set("/ShadingType", new data_types.PdfNum.new(dart.notNull(this.shadingType.index) + 2));
      if (this.boundingBox != null) {
        this.params._set("/BBox", data_types.PdfArray.fromNum(JSArrayOfdoubleL().of([this.boundingBox.left, this.boundingBox.bottom, this.boundingBox.right, this.boundingBox.top])));
      }
      this.params._set("/AntiAlias", C18 || CT.C18);
      this.params._set("/ColorSpace", C19 || CT.C19);
      if (this.shadingType == shading.PdfShadingType.axial) {
        this.params._set("/Coords", data_types.PdfArray.fromNum(JSArrayOfdoubleL().of([this.start.x, this.start.y, this.end.x, this.end.y])));
      } else if (this.shadingType == shading.PdfShadingType.radial) {
        if (!(this.radius0 != null)) dart.assertFailed(null, L13, 89, 14, "radius0 != null");
        if (!(this.radius1 != null)) dart.assertFailed(null, L13, 90, 14, "radius1 != null");
        this.params._set("/Coords", data_types.PdfArray.fromNum(JSArrayOfdoubleL().of([this.start.x, this.start.y, this.radius0, this.end.x, this.end.y, this.radius1])));
      }
      if (dart.test(this.extendStart) || dart.test(this.extendEnd)) {
        this.params._set("/Extend", new data_types.PdfArray.new(JSArrayOfPdfBoolL().of([new data_types.PdfBool.new(this.extendStart), new data_types.PdfBool.new(this.extendEnd)])));
      }
      this.params._set("/Function", this.function.ref());
    }
  };
  (shading.PdfShading.new = function(pdfDocument, opts) {
    let shadingType = opts && 'shadingType' in opts ? opts.shadingType : null;
    let $function = opts && 'function' in opts ? opts.function : null;
    let start = opts && 'start' in opts ? opts.start : null;
    let end = opts && 'end' in opts ? opts.end : null;
    let radius0 = opts && 'radius0' in opts ? opts.radius0 : null;
    let radius1 = opts && 'radius1' in opts ? opts.radius1 : null;
    let boundingBox = opts && 'boundingBox' in opts ? opts.boundingBox : null;
    let extendStart = opts && 'extendStart' in opts ? opts.extendStart : false;
    let extendEnd = opts && 'extendEnd' in opts ? opts.extendEnd : false;
    this[shadingType$] = shadingType;
    this[func] = $function;
    this[start$] = start;
    this[end$] = end;
    this[radius0$] = radius0;
    this[radius1$] = radius1;
    this[boundingBox$] = boundingBox;
    this[extendStart$] = extendStart;
    this[extendEnd$] = extendEnd;
    if (!(shadingType != null)) dart.assertFailed(null, L13, 40, 16, "shadingType != null");
    if (!($function != null)) dart.assertFailed(null, L13, 41, 16, "function != null");
    if (!(start != null)) dart.assertFailed(null, L13, 42, 16, "start != null");
    if (!(end != null)) dart.assertFailed(null, L13, 43, 16, "end != null");
    if (!(extendStart != null)) dart.assertFailed(null, L13, 44, 16, "extendStart != null");
    if (!(extendEnd != null)) dart.assertFailed(null, L13, 45, 16, "extendEnd != null");
    shading.PdfShading.__proto__.new.call(this, pdfDocument);
    ;
  }).prototype = shading.PdfShading.prototype;
  dart.addTypeTests(shading.PdfShading);
  dart.addTypeCaches(shading.PdfShading);
  dart.setGetterSignature(shading.PdfShading, () => ({
    __proto__: dart.getGetters(shading.PdfShading.__proto__),
    name: dart.legacy(core.String)
  }));
  dart.setLibraryUri(shading.PdfShading, L12);
  dart.setFieldSignature(shading.PdfShading, () => ({
    __proto__: dart.getFields(shading.PdfShading.__proto__),
    shadingType: dart.finalFieldType(dart.legacy(shading.PdfShadingType)),
    function: dart.finalFieldType(dart.legacy($function.PdfBaseFunction)),
    start: dart.finalFieldType(dart.legacy(point.PdfPoint)),
    end: dart.finalFieldType(dart.legacy(point.PdfPoint)),
    boundingBox: dart.finalFieldType(dart.legacy(rect.PdfRect)),
    extendStart: dart.finalFieldType(dart.legacy(core.bool)),
    extendEnd: dart.finalFieldType(dart.legacy(core.bool)),
    radius0: dart.finalFieldType(dart.legacy(core.double)),
    radius1: dart.finalFieldType(dart.legacy(core.double))
  }));
  var patternType$ = dart.privateName(pattern, "PdfPattern.patternType");
  var matrix$ = dart.privateName(pattern, "PdfPattern.matrix");
  pattern.PdfPattern = class PdfPattern extends object.PdfObject {
    get patternType() {
      return this[patternType$];
    }
    set patternType(value) {
      super.patternType = value;
    }
    get matrix() {
      return this[matrix$];
    }
    set matrix(value) {
      super.matrix = value;
    }
    get name() {
      return "/P" + dart.str(this.objser);
    }
    prepare() {
      super.prepare();
      this.params._set("/PatternType", new data_types.PdfNum.new(this.patternType));
      if (this.matrix != null) {
        let s = this.matrix.storage;
        this.params._set("/Matrix", data_types.PdfArray.fromNum(JSArrayOfdoubleL().of([s[$_get](0), s[$_get](1), s[$_get](4), s[$_get](5), s[$_get](12), s[$_get](13)])));
      }
    }
  };
  (pattern.PdfPattern.new = function(pdfDocument, patternType, matrix) {
    this[patternType$] = patternType;
    this[matrix$] = matrix;
    pattern.PdfPattern.__proto__.new.call(this, pdfDocument);
    ;
  }).prototype = pattern.PdfPattern.prototype;
  dart.addTypeTests(pattern.PdfPattern);
  dart.addTypeCaches(pattern.PdfPattern);
  dart.setGetterSignature(pattern.PdfPattern, () => ({
    __proto__: dart.getGetters(pattern.PdfPattern.__proto__),
    name: dart.legacy(core.String)
  }));
  dart.setLibraryUri(pattern.PdfPattern, L14);
  dart.setFieldSignature(pattern.PdfPattern, () => ({
    __proto__: dart.getFields(pattern.PdfPattern.__proto__),
    patternType: dart.finalFieldType(dart.legacy(core.int)),
    matrix: dart.finalFieldType(dart.legacy(vector_math_64.Matrix4))
  }));
  var shading$ = dart.privateName(pattern, "PdfShadingPattern.shading");
  var graphicState$ = dart.privateName(pattern, "PdfShadingPattern.graphicState");
  pattern.PdfShadingPattern = class PdfShadingPattern extends pattern.PdfPattern {
    get shading() {
      return this[shading$];
    }
    set shading(value) {
      super.shading = value;
    }
    get graphicState() {
      return this[graphicState$];
    }
    set graphicState(value) {
      super.graphicState = value;
    }
    prepare() {
      super.prepare();
      this.params._set("/Shading", this.shading.ref());
      if (this.graphicState != null) {
        this.params._set("/ExtGState", this.graphicState.output());
      }
    }
  };
  (pattern.PdfShadingPattern.new = function(pdfDocument, opts) {
    let shading = opts && 'shading' in opts ? opts.shading : null;
    let matrix = opts && 'matrix' in opts ? opts.matrix : null;
    let graphicState = opts && 'graphicState' in opts ? opts.graphicState : null;
    this[shading$] = shading;
    this[graphicState$] = graphicState;
    if (!(shading != null)) dart.assertFailed(null, L15, 57, 16, "shading != null");
    pattern.PdfShadingPattern.__proto__.new.call(this, pdfDocument, 2, matrix);
    ;
  }).prototype = pattern.PdfShadingPattern.prototype;
  dart.addTypeTests(pattern.PdfShadingPattern);
  dart.addTypeCaches(pattern.PdfShadingPattern);
  dart.setLibraryUri(pattern.PdfShadingPattern, L14);
  dart.setFieldSignature(pattern.PdfShadingPattern, () => ({
    __proto__: dart.getFields(pattern.PdfShadingPattern.__proto__),
    shading: dart.finalFieldType(dart.legacy(shading.PdfShading)),
    graphicState: dart.finalFieldType(dart.legacy(graphic_state.PdfGraphicState))
  }));
  var _data = dart.privateName(object_stream, "_data");
  var C20;
  var C21;
  var buf = dart.privateName(object_stream, "PdfObjectStream.buf");
  var isBinary$ = dart.privateName(object_stream, "PdfObjectStream.isBinary");
  object_stream.PdfObjectStream = class PdfObjectStream extends object.PdfObject {
    get buf() {
      return this[buf];
    }
    set buf(value) {
      super.buf = value;
    }
    get isBinary() {
      return this[isBinary$];
    }
    set isBinary(value) {
      super.isBinary = value;
    }
    prepare() {
      let t1, t0;
      super.prepare();
      if (dart.test(this.params.containsKey("/Filter")) && this[_data] == null) {
        this[_data] = this.buf.output();
      } else if (this.pdfDocument.deflate != null) {
        let original = this.buf.output();
        let newData = Uint8ListL().as((t0 = this.pdfDocument, t1 = original, t0.deflate(t1)));
        if (dart.notNull(newData[$lengthInBytes]) < dart.notNull(original[$lengthInBytes])) {
          this.params._set("/Filter", C20 || CT.C20);
          this[_data] = newData;
        }
      }
      if (this[_data] == null) {
        if (dart.test(this.isBinary)) {
          let e = new ascii85.Ascii85Encoder.new();
          this[_data] = e.convert(this.buf.output());
          this.params._set("/Filter", C21 || CT.C21);
        } else {
          this[_data] = this.buf.output();
        }
      }
      if (this.pdfDocument.encryption != null) {
        this[_data] = this.pdfDocument.encryption.encrypt(this[_data], this);
      }
      this.params._set("/Length", new data_types.PdfNum.new(this[_data][$length]));
    }
    writeContent(os) {
      super.writeContent(os);
      os.putString("stream\n");
      os.putBytes(this[_data]);
      os.putString("\nendstream\n");
    }
  };
  (object_stream.PdfObjectStream.new = function(pdfDocument, opts) {
    let type = opts && 'type' in opts ? opts.type : null;
    let isBinary = opts && 'isBinary' in opts ? opts.isBinary : false;
    this[buf] = new stream.PdfStream.new();
    this[_data] = null;
    this[isBinary$] = isBinary;
    object_stream.PdfObjectStream.__proto__.new.call(this, pdfDocument, {type: type});
    ;
  }).prototype = object_stream.PdfObjectStream.prototype;
  dart.addTypeTests(object_stream.PdfObjectStream);
  dart.addTypeCaches(object_stream.PdfObjectStream);
  dart.setLibraryUri(object_stream.PdfObjectStream, L16);
  dart.setFieldSignature(object_stream.PdfObjectStream, () => ({
    __proto__: dart.getFields(object_stream.PdfObjectStream.__proto__),
    buf: dart.finalFieldType(dart.legacy(stream.PdfStream)),
    isBinary: dart.finalFieldType(dart.legacy(core.bool)),
    [_data]: dart.fieldType(dart.legacy(typed_data.Uint8List))
  }));
  xobject.PdfXObject = class PdfXObject extends object_stream.PdfObjectStream {
    get name() {
      return "X" + dart.str(this.objser);
    }
  };
  (xobject.PdfXObject.new = function(pdfDocument, subtype, opts) {
    let isBinary = opts && 'isBinary' in opts ? opts.isBinary : false;
    xobject.PdfXObject.__proto__.new.call(this, pdfDocument, {type: "/XObject", isBinary: isBinary});
    if (subtype != null) {
      this.params._set("/Subtype", new data_types.PdfName.new(subtype));
    }
  }).prototype = xobject.PdfXObject.prototype;
  dart.addTypeTests(xobject.PdfXObject);
  dart.addTypeCaches(xobject.PdfXObject);
  dart.setGetterSignature(xobject.PdfXObject, () => ({
    __proto__: dart.getGetters(xobject.PdfXObject.__proto__),
    name: dart.legacy(core.String)
  }));
  dart.setLibraryUri(xobject.PdfXObject, L17);
  var _color$ = dart.privateName(exif, "_color");
  var width$ = dart.privateName(exif, "PdfJpegInfo.width");
  var height$ = dart.privateName(exif, "PdfJpegInfo.height");
  var tags$ = dart.privateName(exif, "PdfJpegInfo.tags");
  var _name$2 = dart.privateName(exif, "_name");
  var C23;
  var C24;
  var C25;
  var C26;
  var C27;
  var C28;
  var C29;
  var C30;
  var C31;
  var C32;
  var C33;
  var C34;
  var C35;
  var C36;
  var C37;
  var C38;
  var C39;
  var C40;
  var C41;
  var C42;
  var C43;
  var C44;
  var C45;
  var C46;
  var C47;
  var C48;
  var C49;
  var C50;
  var C51;
  var C52;
  var C53;
  var C54;
  var C55;
  var C56;
  var C57;
  var C58;
  var C59;
  var C60;
  var C61;
  var C62;
  var C63;
  var C64;
  var C65;
  var C66;
  var C67;
  var C68;
  var C69;
  var C70;
  var C71;
  var C72;
  var C73;
  var C74;
  var C75;
  var C76;
  var C77;
  var C78;
  var C79;
  var C80;
  var C81;
  var C82;
  var C83;
  var C84;
  var C85;
  var C86;
  var C87;
  var C88;
  var C89;
  var C90;
  var C91;
  var C92;
  var C93;
  var C94;
  var C95;
  var C96;
  var C97;
  var C98;
  var C99;
  var C100;
  var C101;
  var C102;
  var C103;
  var C104;
  var C105;
  var C106;
  var C107;
  var C108;
  var C109;
  var C110;
  var C111;
  var C22;
  exif.PdfJpegInfo = class PdfJpegInfo extends core.Object {
    get width() {
      return this[width$];
    }
    set width(value) {
      super.width = value;
    }
    get height() {
      return this[height$];
    }
    set height(value) {
      super.height = value;
    }
    get tags() {
      return this[tags$];
    }
    set tags(value) {
      super.tags = value;
    }
    static new(image) {
      if (!(image != null)) dart.assertFailed(null, L18, 26, 12, "image != null");
      let buffer = image[$buffer][$asByteData]();
      let width = null;
      let height = null;
      let color = null;
      let offset = image[$offsetInBytes];
      while (dart.notNull(offset) < dart.notNull(buffer[$lengthInBytes])) {
        while (buffer[$getUint8](offset) === 255) {
          offset = dart.notNull(offset) + 1;
        }
        let mrkr = buffer[$getUint8](offset);
        offset = dart.notNull(offset) + 1;
        if (mrkr === 216) {
          continue;
        }
        if (mrkr === 217) {
          break;
        }
        if (208 <= dart.notNull(mrkr) && dart.notNull(mrkr) <= 215) {
          continue;
        }
        if (mrkr === 1) {
          continue;
        }
        let len = buffer[$getUint16](offset);
        offset = dart.notNull(offset) + 2;
        if (dart.notNull(mrkr) >= 192 && dart.notNull(mrkr) <= 194) {
          height = buffer[$getUint16](dart.notNull(offset) + 1);
          width = buffer[$getUint16](dart.notNull(offset) + 3);
          color = buffer[$getUint8](dart.notNull(offset) + 5);
          break;
        }
        offset = dart.notNull(offset) + (dart.notNull(len) - 2);
      }
      if (height == null) {
        dart.throw("Unable to find a Jpeg image in the file");
      }
      let tags = exif.PdfJpegInfo._findExifInJpeg(buffer);
      return new exif.PdfJpegInfo.__(width, height, color, tags);
    }
    get isRGB() {
      return this[_color$] === 3;
    }
    get exifVersion() {
      return this.tags == null || this.tags[$_get](exif.PdfExifTag.ExifVersion) == null ? null : convert.utf8.decode(ListOfint().as(this.tags[$_get](exif.PdfExifTag.ExifVersion)));
    }
    get flashpixVersion() {
      return this.tags == null || this.tags[$_get](exif.PdfExifTag.FlashpixVersion) == null ? null : convert.utf8.decode(ListOfint().as(this.tags[$_get](exif.PdfExifTag.FlashpixVersion)));
    }
    get orientation() {
      if (this.tags == null || this.tags[$_get](exif.PdfExifTag.Orientation) == null) {
        return image$0.PdfImageOrientation.topLeft;
      }
      try {
        return image$0.PdfImageOrientation.values[$_get](core.int.as(dart.dsend(this.tags[$_get](exif.PdfExifTag.Orientation), '-', [1])));
      } catch (e) {
        let ex = dart.getThrown(e);
        if (RangeErrorL().is(ex)) {
          return image$0.PdfImageOrientation.topLeft;
        } else
          throw e;
      }
    }
    get xResolution() {
      return doubleL().as(this.tags == null || this.tags[$_get](exif.PdfExifTag.XResolution) == null ? null : dart.dsend(dart.dsend(dart.dsend(this.tags[$_get](exif.PdfExifTag.XResolution), '_get', [0]), 'toDouble', []), '/', [dart.dsend(dart.dsend(this.tags[$_get](exif.PdfExifTag.XResolution), '_get', [1]), 'toDouble', [])]));
    }
    get yResolution() {
      return doubleL().as(this.tags == null || this.tags[$_get](exif.PdfExifTag.YResolution) == null ? null : dart.dsend(dart.dsend(dart.dsend(this.tags[$_get](exif.PdfExifTag.YResolution), '_get', [0]), 'toDouble', []), '/', [dart.dsend(dart.dsend(this.tags[$_get](exif.PdfExifTag.YResolution), '_get', [1]), 'toDouble', [])]));
    }
    get pixelXDimension() {
      return intL().as(this.tags == null || this.tags[$_get](exif.PdfExifTag.PixelXDimension) == null ? this.width : this.tags[$_get](exif.PdfExifTag.PixelXDimension));
    }
    get pixelYDimension() {
      return intL().as(this.tags == null || this.tags[$_get](exif.PdfExifTag.PixelYDimension) == null ? this.height : this.tags[$_get](exif.PdfExifTag.PixelYDimension));
    }
    toString() {
      return "width: " + dart.str(this.width) + " height: " + dart.str(this.height) + "\nexifVersion: " + dart.str(this.exifVersion) + " flashpixVersion: " + dart.str(this.flashpixVersion) + "\nxResolution: " + dart.str(this.xResolution) + " yResolution: " + dart.str(this.yResolution) + "\npixelXDimension: " + dart.str(this.pixelXDimension) + " pixelYDimension: " + dart.str(this.pixelYDimension) + "\norientation: " + dart.str(this.orientation);
    }
    static _findExifInJpeg(buffer) {
      if (buffer[$getUint8](0) !== 255 || buffer[$getUint8](1) !== 216) {
        return new (LinkedMapOfPdfExifTagL$dynamic()).new();
      }
      let offset = 2;
      let length = buffer[$lengthInBytes];
      let marker = null;
      while (offset < dart.notNull(length)) {
        let lastValue = buffer[$getUint8](offset);
        if (lastValue !== 255) {
          return new (LinkedMapOfPdfExifTagL$dynamic()).new();
        }
        marker = buffer[$getUint8](offset + 1);
        if (marker === 225) {
          return exif.PdfJpegInfo._readEXIFData(buffer, offset + 4);
        } else {
          offset = offset + (2 + dart.notNull(buffer[$getUint16](offset + 2)));
        }
      }
      return new (LinkedMapOfPdfExifTagL$dynamic()).new();
    }
    static _readTags(file, tiffStart, dirStart, bigEnd) {
      let entries = file[$getUint16](dirStart, bigEnd);
      let tags = new (LinkedMapOfPdfExifTagL$dynamic()).new();
      let entryOffset = null;
      for (let i = 0; i < dart.notNull(entries); i = i + 1) {
        entryOffset = dart.notNull(dirStart) + i * 12 + 2;
        let tagId = file[$getUint16](entryOffset, bigEnd);
        let tag = exif.PdfJpegInfo._exifTags[$_get](tagId);
        if (tag != null) {
          tags[$_set](tag, exif.PdfJpegInfo._readTagValue(file, entryOffset, tiffStart, dirStart, bigEnd));
        }
      }
      return tags;
    }
    static _readTagValue(file, entryOffset, tiffStart, dirStart, bigEnd) {
      let type = file[$getUint16](dart.notNull(entryOffset) + 2, bigEnd);
      let numValues = file[$getUint32](dart.notNull(entryOffset) + 4, bigEnd);
      let valueOffset = dart.notNull(file[$getUint32](dart.notNull(entryOffset) + 8, bigEnd)) + dart.notNull(tiffStart);
      switch (type) {
        case 1:
        case 7:
        {
          if (numValues === 1) {
            return file[$getUint8](dart.notNull(entryOffset) + 8);
          }
          let offset = dart.notNull(numValues) > 4 ? valueOffset : dart.notNull(entryOffset) + 8;
          let result = _native_typed_data.NativeUint8List.new(numValues);
          for (let i = 0; i < dart.notNull(result[$length]); i = i + 1) {
            result[$_set](i, file[$getUint8](offset + i));
          }
          return result;
        }
        case 2:
        {
          let offset = dart.notNull(numValues) > 4 ? valueOffset : dart.notNull(entryOffset) + 8;
          return exif.PdfJpegInfo._getStringFromDB(file, offset, dart.notNull(numValues) - 1);
        }
        case 3:
        {
          if (numValues === 1) {
            return file[$getUint16](dart.notNull(entryOffset) + 8, bigEnd);
          }
          let offset = dart.notNull(numValues) > 2 ? valueOffset : dart.notNull(entryOffset) + 8;
          let result = _native_typed_data.NativeUint16List.new(numValues);
          for (let i = 0; i < dart.notNull(result[$length]); i = i + 1) {
            result[$_set](i, file[$getUint16](offset + i * 2, bigEnd));
          }
          return result;
        }
        case 4:
        {
          if (numValues === 1) {
            return file[$getUint32](dart.notNull(entryOffset) + 8, bigEnd);
          }
          let offset = valueOffset;
          let result = _native_typed_data.NativeUint32List.new(numValues);
          for (let i = 0; i < dart.notNull(result[$length]); i = i + 1) {
            result[$_set](i, file[$getUint32](offset + i * 4, bigEnd));
          }
          return result;
        }
        case 5:
        {
          if (numValues === 1) {
            let numerator = file[$getUint32](valueOffset, bigEnd);
            let denominator = file[$getUint32](valueOffset + 4, bigEnd);
            return JSArrayOfintL().of([numerator, denominator]);
          }
          let offset = valueOffset;
          let result = JSArrayOfListLOfintL().of([]);
          for (let i = 0; i < dart.notNull(numValues); i = i + 1) {
            let numerator = file[$getUint32](offset + i * 8, bigEnd);
            let denominator = file[$getUint32](offset + i * 8 + 4, bigEnd);
            result[$add](JSArrayOfintL().of([numerator, denominator]));
          }
          return result;
        }
        case 9:
        {
          if (numValues === 1) {
            return file[$getInt32](dart.notNull(entryOffset) + 8, bigEnd);
          }
          let offset = valueOffset;
          let result = _native_typed_data.NativeInt32List.new(numValues);
          for (let i = 0; i < dart.notNull(result[$length]); i = i + 1) {
            result[$_set](i, file[$getInt32](offset + i * 4, bigEnd));
          }
          return result;
        }
        case 10:
        {
          if (numValues === 1) {
            let numerator = file[$getInt32](valueOffset, bigEnd);
            let denominator = file[$getInt32](valueOffset + 4, bigEnd);
            return JSArrayOfintL().of([numerator, denominator]);
          }
          let offset = valueOffset;
          let result = JSArrayOfListLOfintL().of([]);
          for (let i = 0; i < dart.notNull(numValues); i = i + 1) {
            let numerator = file[$getInt32](offset + i * 8, bigEnd);
            let denominator = file[$getInt32](offset + i * 8 + 4, bigEnd);
            result[$add](JSArrayOfintL().of([numerator, denominator]));
          }
          return result;
        }
        case 11:
        {
          if (numValues === 1) {
            return file[$getFloat32](dart.notNull(entryOffset) + 8, bigEnd);
          }
          let offset = valueOffset;
          let result = _native_typed_data.NativeFloat32List.new(numValues);
          for (let i = 0; i < dart.notNull(result[$length]); i = i + 1) {
            result[$_set](i, file[$getFloat32](offset + i * 4, bigEnd));
          }
          return result;
        }
        case 12:
        {
          if (numValues === 1) {
            return file[$getFloat64](dart.notNull(entryOffset) + 8, bigEnd);
          }
          let offset = valueOffset;
          let result = _native_typed_data.NativeFloat64List.new(numValues);
          for (let i = 0; i < dart.notNull(result[$length]); i = i + 1) {
            result[$_set](i, file[$getFloat64](offset + i * 8, bigEnd));
          }
          return result;
        }
      }
    }
    static _getStringFromDB(buffer, start, length) {
      return convert.utf8.decode(ListOfintL().generate(length, dart.fn(i => buffer[$getUint8](dart.notNull(start) + dart.notNull(i)), intLTointL())), {allowMalformed: true});
    }
    static _readEXIFData(buffer, start) {
      let startingString = exif.PdfJpegInfo._getStringFromDB(buffer, start, 4);
      if (startingString !== "Exif") {
        return null;
      }
      let bigEnd = null;
      let tiffOffset = dart.notNull(start) + 6;
      if (buffer[$getUint16](tiffOffset) === 18761) {
        bigEnd = typed_data.Endian.little;
      } else if (buffer[$getUint16](tiffOffset) === 19789) {
        bigEnd = typed_data.Endian.big;
      } else {
        return null;
      }
      if (buffer[$getUint16](tiffOffset + 2, bigEnd) !== 42) {
        return null;
      }
      let firstIFDOffset = buffer[$getUint32](tiffOffset + 4, bigEnd);
      if (dart.notNull(firstIFDOffset) < 8) {
        return null;
      }
      let tags = exif.PdfJpegInfo._readTags(buffer, tiffOffset, tiffOffset + dart.notNull(firstIFDOffset), bigEnd);
      if (dart.test(tags[$containsKey](exif.PdfExifTag.ExifIFDPointer))) {
        let exifData = exif.PdfJpegInfo._readTags(buffer, tiffOffset, dart.asNullableInt(tiffOffset + dart.notNull(core.num.as(tags[$_get](exif.PdfExifTag.ExifIFDPointer)))), bigEnd);
        tags[$addAll](exifData);
      }
      return tags;
    }
  };
  (exif.PdfJpegInfo.__ = function(width, height, _color, tags) {
    this[width$] = width;
    this[height$] = height;
    this[_color$] = _color;
    this[tags$] = tags;
    ;
  }).prototype = exif.PdfJpegInfo.prototype;
  dart.addTypeTests(exif.PdfJpegInfo);
  dart.addTypeCaches(exif.PdfJpegInfo);
  dart.setMethodSignature(exif.PdfJpegInfo, () => ({
    __proto__: dart.getMethods(exif.PdfJpegInfo.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setGetterSignature(exif.PdfJpegInfo, () => ({
    __proto__: dart.getGetters(exif.PdfJpegInfo.__proto__),
    isRGB: dart.legacy(core.bool),
    exifVersion: dart.legacy(core.String),
    flashpixVersion: dart.legacy(core.String),
    orientation: dart.legacy(image$0.PdfImageOrientation),
    xResolution: dart.legacy(core.double),
    yResolution: dart.legacy(core.double),
    pixelXDimension: dart.legacy(core.int),
    pixelYDimension: dart.legacy(core.int)
  }));
  dart.setLibraryUri(exif.PdfJpegInfo, L19);
  dart.setFieldSignature(exif.PdfJpegInfo, () => ({
    __proto__: dart.getFields(exif.PdfJpegInfo.__proto__),
    width: dart.finalFieldType(dart.legacy(core.int)),
    height: dart.finalFieldType(dart.legacy(core.int)),
    [_color$]: dart.finalFieldType(dart.legacy(core.int)),
    tags: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(exif.PdfExifTag), dart.dynamic)))
  }));
  dart.defineExtensionMethods(exif.PdfJpegInfo, ['toString']);
  dart.defineLazy(exif.PdfJpegInfo, {
    /*exif.PdfJpegInfo._exifTags*/get _exifTags() {
      return C22 || CT.C22;
    }
  }, true);
  var C112;
  exif.PdfExifTag = class PdfExifTag extends core.Object {
    toString() {
      return this[_name$2];
    }
  };
  (exif.PdfExifTag.new = function(index, _name) {
    this.index = index;
    this[_name$2] = _name;
    ;
  }).prototype = exif.PdfExifTag.prototype;
  dart.addTypeTests(exif.PdfExifTag);
  dart.addTypeCaches(exif.PdfExifTag);
  dart.setMethodSignature(exif.PdfExifTag, () => ({
    __proto__: dart.getMethods(exif.PdfExifTag.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(exif.PdfExifTag, L19);
  dart.setFieldSignature(exif.PdfExifTag, () => ({
    __proto__: dart.getFields(exif.PdfExifTag.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$2]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(exif.PdfExifTag, ['toString']);
  exif.PdfExifTag.ExifVersion = C23 || CT.C23;
  exif.PdfExifTag.FlashpixVersion = C24 || CT.C24;
  exif.PdfExifTag.ColorSpace = C25 || CT.C25;
  exif.PdfExifTag.PixelXDimension = C26 || CT.C26;
  exif.PdfExifTag.PixelYDimension = C27 || CT.C27;
  exif.PdfExifTag.ComponentsConfiguration = C28 || CT.C28;
  exif.PdfExifTag.CompressedBitsPerPixel = C29 || CT.C29;
  exif.PdfExifTag.MakerNote = C30 || CT.C30;
  exif.PdfExifTag.UserComment = C31 || CT.C31;
  exif.PdfExifTag.RelatedSoundFile = C32 || CT.C32;
  exif.PdfExifTag.DateTimeOriginal = C33 || CT.C33;
  exif.PdfExifTag.DateTimeDigitized = C34 || CT.C34;
  exif.PdfExifTag.SubsecTime = C35 || CT.C35;
  exif.PdfExifTag.SubsecTimeOriginal = C36 || CT.C36;
  exif.PdfExifTag.SubsecTimeDigitized = C37 || CT.C37;
  exif.PdfExifTag.ExposureTime = C38 || CT.C38;
  exif.PdfExifTag.FNumber = C39 || CT.C39;
  exif.PdfExifTag.ExposureProgram = C40 || CT.C40;
  exif.PdfExifTag.SpectralSensitivity = C41 || CT.C41;
  exif.PdfExifTag.ISOSpeedRatings = C42 || CT.C42;
  exif.PdfExifTag.OECF = C43 || CT.C43;
  exif.PdfExifTag.ShutterSpeedValue = C44 || CT.C44;
  exif.PdfExifTag.ApertureValue = C45 || CT.C45;
  exif.PdfExifTag.BrightnessValue = C46 || CT.C46;
  exif.PdfExifTag.ExposureBias = C47 || CT.C47;
  exif.PdfExifTag.MaxApertureValue = C48 || CT.C48;
  exif.PdfExifTag.SubjectDistance = C49 || CT.C49;
  exif.PdfExifTag.MeteringMode = C50 || CT.C50;
  exif.PdfExifTag.LightSource = C51 || CT.C51;
  exif.PdfExifTag.Flash = C52 || CT.C52;
  exif.PdfExifTag.SubjectArea = C53 || CT.C53;
  exif.PdfExifTag.FocalLength = C54 || CT.C54;
  exif.PdfExifTag.FlashEnergy = C55 || CT.C55;
  exif.PdfExifTag.SpatialFrequencyResponse = C56 || CT.C56;
  exif.PdfExifTag.FocalPlaneXResolution = C57 || CT.C57;
  exif.PdfExifTag.FocalPlaneYResolution = C58 || CT.C58;
  exif.PdfExifTag.FocalPlaneResolutionUnit = C59 || CT.C59;
  exif.PdfExifTag.SubjectLocation = C60 || CT.C60;
  exif.PdfExifTag.ExposureIndex = C61 || CT.C61;
  exif.PdfExifTag.SensingMethod = C62 || CT.C62;
  exif.PdfExifTag.FileSource = C63 || CT.C63;
  exif.PdfExifTag.SceneType = C64 || CT.C64;
  exif.PdfExifTag.CFAPattern = C65 || CT.C65;
  exif.PdfExifTag.CustomRendered = C66 || CT.C66;
  exif.PdfExifTag.ExposureMode = C67 || CT.C67;
  exif.PdfExifTag.WhiteBalance = C68 || CT.C68;
  exif.PdfExifTag.DigitalZoomRation = C69 || CT.C69;
  exif.PdfExifTag.FocalLengthIn35mmFilm = C70 || CT.C70;
  exif.PdfExifTag.SceneCaptureType = C71 || CT.C71;
  exif.PdfExifTag.GainControl = C72 || CT.C72;
  exif.PdfExifTag.Contrast = C73 || CT.C73;
  exif.PdfExifTag.Saturation = C74 || CT.C74;
  exif.PdfExifTag.Sharpness = C75 || CT.C75;
  exif.PdfExifTag.DeviceSettingDescription = C76 || CT.C76;
  exif.PdfExifTag.SubjectDistanceRange = C77 || CT.C77;
  exif.PdfExifTag.InteroperabilityIFDPointer = C78 || CT.C78;
  exif.PdfExifTag.ImageUniqueID = C79 || CT.C79;
  exif.PdfExifTag.ImageWidth = C80 || CT.C80;
  exif.PdfExifTag.ImageHeight = C81 || CT.C81;
  exif.PdfExifTag.ExifIFDPointer = C82 || CT.C82;
  exif.PdfExifTag.GPSInfoIFDPointer = C83 || CT.C83;
  exif.PdfExifTag.BitsPerSample = C84 || CT.C84;
  exif.PdfExifTag.Compression = C85 || CT.C85;
  exif.PdfExifTag.PhotometricInterpretation = C86 || CT.C86;
  exif.PdfExifTag.Orientation = C87 || CT.C87;
  exif.PdfExifTag.SamplesPerPixel = C88 || CT.C88;
  exif.PdfExifTag.PlanarConfiguration = C89 || CT.C89;
  exif.PdfExifTag.YCbCrSubSampling = C90 || CT.C90;
  exif.PdfExifTag.YCbCrPositioning = C91 || CT.C91;
  exif.PdfExifTag.XResolution = C92 || CT.C92;
  exif.PdfExifTag.YResolution = C93 || CT.C93;
  exif.PdfExifTag.ResolutionUnit = C94 || CT.C94;
  exif.PdfExifTag.StripOffsets = C95 || CT.C95;
  exif.PdfExifTag.RowsPerStrip = C96 || CT.C96;
  exif.PdfExifTag.StripByteCounts = C97 || CT.C97;
  exif.PdfExifTag.JPEGInterchangeFormat = C98 || CT.C98;
  exif.PdfExifTag.JPEGInterchangeFormatLength = C99 || CT.C99;
  exif.PdfExifTag.TransferFunction = C100 || CT.C100;
  exif.PdfExifTag.WhitePoint = C101 || CT.C101;
  exif.PdfExifTag.PrimaryChromaticities = C102 || CT.C102;
  exif.PdfExifTag.YCbCrCoefficients = C103 || CT.C103;
  exif.PdfExifTag.ReferenceBlackWhite = C104 || CT.C104;
  exif.PdfExifTag.DateTime = C105 || CT.C105;
  exif.PdfExifTag.ImageDescription = C106 || CT.C106;
  exif.PdfExifTag.Make = C107 || CT.C107;
  exif.PdfExifTag.Model = C108 || CT.C108;
  exif.PdfExifTag.Software = C109 || CT.C109;
  exif.PdfExifTag.Artist = C110 || CT.C110;
  exif.PdfExifTag.Copyright = C111 || CT.C111;
  exif.PdfExifTag.values = C112 || CT.C112;
  var _name$3 = dart.privateName(image$0, "_name");
  var C113;
  var C114;
  var C115;
  var C116;
  var C117;
  var C118;
  var C119;
  var C120;
  var C121;
  image$0.PdfImageOrientation = class PdfImageOrientation extends core.Object {
    toString() {
      return this[_name$3];
    }
  };
  (image$0.PdfImageOrientation.new = function(index, _name) {
    this.index = index;
    this[_name$3] = _name;
    ;
  }).prototype = image$0.PdfImageOrientation.prototype;
  dart.addTypeTests(image$0.PdfImageOrientation);
  dart.addTypeCaches(image$0.PdfImageOrientation);
  dart.setMethodSignature(image$0.PdfImageOrientation, () => ({
    __proto__: dart.getMethods(image$0.PdfImageOrientation.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(image$0.PdfImageOrientation, L20);
  dart.setFieldSignature(image$0.PdfImageOrientation, () => ({
    __proto__: dart.getFields(image$0.PdfImageOrientation.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$3]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(image$0.PdfImageOrientation, ['toString']);
  image$0.PdfImageOrientation.topLeft = C113 || CT.C113;
  image$0.PdfImageOrientation.topRight = C114 || CT.C114;
  image$0.PdfImageOrientation.bottomRight = C115 || CT.C115;
  image$0.PdfImageOrientation.bottomLeft = C116 || CT.C116;
  image$0.PdfImageOrientation.leftTop = C117 || CT.C117;
  image$0.PdfImageOrientation.rightTop = C118 || CT.C118;
  image$0.PdfImageOrientation.rightBottom = C119 || CT.C119;
  image$0.PdfImageOrientation.leftBottom = C120 || CT.C120;
  image$0.PdfImageOrientation.values = C121 || CT.C121;
  var _width$ = dart.privateName(image$0, "_width");
  var _height$ = dart.privateName(image$0, "_height");
  var PdfNum_value = dart.privateName(data_types, "PdfNum.value");
  var C122;
  var C123;
  var C124;
  var C125;
  var orientation$ = dart.privateName(image$0, "PdfImage.orientation");
  image$0.PdfImage = class PdfImage extends xobject.PdfXObject {
    get orientation() {
      return this[orientation$];
    }
    set orientation(value) {
      super.orientation = value;
    }
    static new(pdfDocument, opts) {
      let image = opts && 'image' in opts ? opts.image : null;
      let width = opts && 'width' in opts ? opts.width : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let alpha = opts && 'alpha' in opts ? opts.alpha : true;
      let orientation = opts && 'orientation' in opts ? opts.orientation : C113 || CT.C113;
      if (!(image != null)) dart.assertFailed(null, L21, 66, 12, "image != null");
      let im = new image$0.PdfImage.__(pdfDocument, width, height, orientation);
      im.params._set("/BitsPerComponent", C122 || CT.C122);
      im.params._set("/Name", new data_types.PdfName.new(im.name));
      im.params._set("/ColorSpace", C19 || CT.C19);
      if (dart.test(alpha)) {
        let _sMask = image$0.PdfImage._alpha(pdfDocument, image, width, height, orientation);
        im.params._set("/SMask", new data_types.PdfIndirect.new(_sMask.objser, 0));
      }
      let w = width;
      let h = height;
      let s = dart.notNull(w) * dart.notNull(h);
      let out = _native_typed_data.NativeUint8List.new(s * 3);
      for (let i = 0; i < s; i = i + 1) {
        out[$_set](i * 3, image[$_get](i * 4));
        out[$_set](i * 3 + 1, image[$_get](i * 4 + 1));
        out[$_set](i * 3 + 2, image[$_get](i * 4 + 2));
      }
      im.buf.putBytes(out);
      return im;
    }
    static jpeg(pdfDocument, opts) {
      let t2;
      let image = opts && 'image' in opts ? opts.image : null;
      let orientation = opts && 'orientation' in opts ? opts.orientation : null;
      if (!(image != null)) dart.assertFailed(null, L21, 110, 12, "image != null");
      let info = exif.PdfJpegInfo.new(image);
      let im = new image$0.PdfImage.__(pdfDocument, info.width, info.height, (t2 = orientation, t2 == null ? info.orientation : t2));
      im.params._set("/BitsPerComponent", C122 || CT.C122);
      im.params._set("/Name", new data_types.PdfName.new(im.name));
      im.params._set("/Intent", C123 || CT.C123);
      im.params._set("/Filter", C124 || CT.C124);
      if (dart.test(info.isRGB)) {
        im.params._set("/ColorSpace", C19 || CT.C19);
      } else {
        im.params._set("/ColorSpace", C125 || CT.C125);
      }
      im.buf.putBytes(image);
      return im;
    }
    static fromImage(pdfDocument, opts) {
      let image = opts && 'image' in opts ? opts.image : null;
      let orientation = opts && 'orientation' in opts ? opts.orientation : C113 || CT.C113;
      if (!(image != null)) dart.assertFailed(null, L21, 141, 12, "image != null");
      return image$0.PdfImage.new(pdfDocument, {image: image.getBytes({format: image$.Format.rgba}), width: image.width, height: image.height, alpha: image.channels == image$.Channels.rgba, orientation: orientation});
    }
    static file(pdfDocument, opts) {
      let bytes = opts && 'bytes' in opts ? opts.bytes : null;
      let orientation = opts && 'orientation' in opts ? opts.orientation : C113 || CT.C113;
      if (!(bytes != null)) dart.assertFailed(null, L21, 159, 12, "bytes != null");
      if (dart.test(new jpeg_decoder.JpegDecoder.new().isValidFile(bytes))) {
        return image$0.PdfImage.jpeg(pdfDocument, {image: bytes});
      }
      let image = formats.decodeImage(bytes);
      return image$0.PdfImage.fromImage(pdfDocument, {image: image, orientation: orientation});
    }
    static _alpha(pdfDocument, image, width, height, orientation) {
      let im = new image$0.PdfImage.__(pdfDocument, width, height, orientation);
      im.params._set("/BitsPerComponent", C122 || CT.C122);
      im.params._set("/Name", new data_types.PdfName.new(im.name));
      im.params._set("/ColorSpace", C125 || CT.C125);
      let w = width;
      let h = height;
      let s = dart.notNull(w) * dart.notNull(h);
      let out = _native_typed_data.NativeUint8List.new(s);
      for (let i = 0; i < s; i = i + 1) {
        out[$_set](i, image[$_get](i * 4 + 3));
      }
      im.buf.putBytes(out);
      return im;
    }
    get width() {
      return dart.notNull(this.orientation.index) >= 4 ? this[_height$] : this[_width$];
    }
    get height() {
      return dart.notNull(this.orientation.index) < 4 ? this[_height$] : this[_width$];
    }
    get name() {
      return "/I" + dart.str(this.objser);
    }
  };
  (image$0.PdfImage.__ = function(pdfDocument, _width, _height, orientation) {
    this[_width$] = _width;
    this[_height$] = _height;
    this[orientation$] = orientation;
    image$0.PdfImage.__proto__.new.call(this, pdfDocument, "/Image", {isBinary: true});
    this.params._set("/Width", new data_types.PdfNum.new(this[_width$]));
    this.params._set("/Height", new data_types.PdfNum.new(this[_height$]));
  }).prototype = image$0.PdfImage.prototype;
  dart.addTypeTests(image$0.PdfImage);
  dart.addTypeCaches(image$0.PdfImage);
  dart.setGetterSignature(image$0.PdfImage, () => ({
    __proto__: dart.getGetters(image$0.PdfImage.__proto__),
    width: dart.legacy(core.int),
    height: dart.legacy(core.int)
  }));
  dart.setLibraryUri(image$0.PdfImage, L20);
  dart.setFieldSignature(image$0.PdfImage, () => ({
    __proto__: dart.getFields(image$0.PdfImage.__proto__),
    [_width$]: dart.finalFieldType(dart.legacy(core.int)),
    [_height$]: dart.finalFieldType(dart.legacy(core.int)),
    orientation: dart.finalFieldType(dart.legacy(image$0.PdfImageOrientation))
  }));
  var _name$4 = dart.privateName(graphics, "_name");
  var C126;
  var C127;
  var C128;
  var C129;
  graphics.PdfLineJoin = class PdfLineJoin extends core.Object {
    toString() {
      return this[_name$4];
    }
  };
  (graphics.PdfLineJoin.new = function(index, _name) {
    this.index = index;
    this[_name$4] = _name;
    ;
  }).prototype = graphics.PdfLineJoin.prototype;
  dart.addTypeTests(graphics.PdfLineJoin);
  dart.addTypeCaches(graphics.PdfLineJoin);
  dart.setMethodSignature(graphics.PdfLineJoin, () => ({
    __proto__: dart.getMethods(graphics.PdfLineJoin.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(graphics.PdfLineJoin, L22);
  dart.setFieldSignature(graphics.PdfLineJoin, () => ({
    __proto__: dart.getFields(graphics.PdfLineJoin.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$4]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(graphics.PdfLineJoin, ['toString']);
  graphics.PdfLineJoin.miter = C126 || CT.C126;
  graphics.PdfLineJoin.round = C127 || CT.C127;
  graphics.PdfLineJoin.bevel = C128 || CT.C128;
  graphics.PdfLineJoin.values = C129 || CT.C129;
  var C130;
  var C131;
  var C132;
  var C133;
  graphics.PdfLineCap = class PdfLineCap extends core.Object {
    toString() {
      return this[_name$4];
    }
  };
  (graphics.PdfLineCap.new = function(index, _name) {
    this.index = index;
    this[_name$4] = _name;
    ;
  }).prototype = graphics.PdfLineCap.prototype;
  dart.addTypeTests(graphics.PdfLineCap);
  dart.addTypeCaches(graphics.PdfLineCap);
  dart.setMethodSignature(graphics.PdfLineCap, () => ({
    __proto__: dart.getMethods(graphics.PdfLineCap.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(graphics.PdfLineCap, L22);
  dart.setFieldSignature(graphics.PdfLineCap, () => ({
    __proto__: dart.getFields(graphics.PdfLineCap.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$4]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(graphics.PdfLineCap, ['toString']);
  graphics.PdfLineCap.butt = C130 || CT.C130;
  graphics.PdfLineCap.round = C131 || CT.C131;
  graphics.PdfLineCap.square = C132 || CT.C132;
  graphics.PdfLineCap.values = C133 || CT.C133;
  var C134;
  var C135;
  var C136;
  var C137;
  var C138;
  var C139;
  var C140;
  var C141;
  var C142;
  graphics.PdfTextRenderingMode = class PdfTextRenderingMode extends core.Object {
    toString() {
      return this[_name$4];
    }
  };
  (graphics.PdfTextRenderingMode.new = function(index, _name) {
    this.index = index;
    this[_name$4] = _name;
    ;
  }).prototype = graphics.PdfTextRenderingMode.prototype;
  dart.addTypeTests(graphics.PdfTextRenderingMode);
  dart.addTypeCaches(graphics.PdfTextRenderingMode);
  dart.setMethodSignature(graphics.PdfTextRenderingMode, () => ({
    __proto__: dart.getMethods(graphics.PdfTextRenderingMode.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(graphics.PdfTextRenderingMode, L22);
  dart.setFieldSignature(graphics.PdfTextRenderingMode, () => ({
    __proto__: dart.getFields(graphics.PdfTextRenderingMode.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$4]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(graphics.PdfTextRenderingMode, ['toString']);
  graphics.PdfTextRenderingMode.fill = C134 || CT.C134;
  graphics.PdfTextRenderingMode.stroke = C135 || CT.C135;
  graphics.PdfTextRenderingMode.fillAndStroke = C136 || CT.C136;
  graphics.PdfTextRenderingMode.invisible = C137 || CT.C137;
  graphics.PdfTextRenderingMode.fillAndClip = C138 || CT.C138;
  graphics.PdfTextRenderingMode.strokeAndClip = C139 || CT.C139;
  graphics.PdfTextRenderingMode.fillStrokeAndClip = C140 || CT.C140;
  graphics.PdfTextRenderingMode.clip = C141 || CT.C141;
  graphics.PdfTextRenderingMode.values = C142 || CT.C142;
  var ctm$ = dart.privateName(graphics, "_PdfGraphicsContext.ctm");
  graphics._PdfGraphicsContext = class _PdfGraphicsContext extends core.Object {
    get ctm() {
      return this[ctm$];
    }
    set ctm(value) {
      super.ctm = value;
    }
    copy() {
      return new graphics._PdfGraphicsContext.new({ctm: this.ctm.clone()});
    }
  };
  (graphics._PdfGraphicsContext.new = function(opts) {
    let ctm = opts && 'ctm' in opts ? opts.ctm : null;
    this[ctm$] = ctm;
    if (!(ctm != null)) dart.assertFailed(null, L23, 92, 15, "ctm != null");
    ;
  }).prototype = graphics._PdfGraphicsContext.prototype;
  dart.addTypeTests(graphics._PdfGraphicsContext);
  dart.addTypeCaches(graphics._PdfGraphicsContext);
  dart.setMethodSignature(graphics._PdfGraphicsContext, () => ({
    __proto__: dart.getMethods(graphics._PdfGraphicsContext.__proto__),
    copy: dart.fnType(dart.legacy(graphics._PdfGraphicsContext), [])
  }));
  dart.setLibraryUri(graphics._PdfGraphicsContext, L22);
  dart.setFieldSignature(graphics._PdfGraphicsContext, () => ({
    __proto__: dart.getFields(graphics._PdfGraphicsContext.__proto__),
    ctm: dart.finalFieldType(dart.legacy(vector_math_64.Matrix4))
  }));
  var _context = dart.privateName(graphics, "_context");
  var _contextQueue = dart.privateName(graphics, "_contextQueue");
  var _page$ = dart.privateName(graphics, "_page");
  var _vectorAngle = dart.privateName(graphics, "_vectorAngle");
  var _bezierArcFromCentre = dart.privateName(graphics, "_bezierArcFromCentre");
  var _endToCenterParameters = dart.privateName(graphics, "_endToCenterParameters");
  var C143;
  var buf$ = dart.privateName(graphics, "PdfGraphics.buf");
  graphics.PdfGraphics = class PdfGraphics extends core.Object {
    get buf() {
      return this[buf$];
    }
    set buf(value) {
      super.buf = value;
    }
    get defaultFont() {
      return this[_page$].getDefaultFont();
    }
    fillPath(opts) {
      let evenOdd = opts && 'evenOdd' in opts ? opts.evenOdd : false;
      this.buf.putString("f" + (dart.test(evenOdd) ? "*" : "") + "\n");
    }
    strokePath(opts) {
      let close = opts && 'close' in opts ? opts.close : false;
      this.buf.putString((dart.test(close) ? "s" : "S") + "\n");
    }
    closePath() {
      this.buf.putString("h\n");
    }
    clipPath(opts) {
      let evenOdd = opts && 'evenOdd' in opts ? opts.evenOdd : false;
      let end = opts && 'end' in opts ? opts.end : true;
      this.buf.putString("W" + (dart.test(evenOdd) ? "*" : "") + (dart.test(end) ? " n" : "") + "\n");
    }
    fillAndStrokePath(opts) {
      let evenOdd = opts && 'evenOdd' in opts ? opts.evenOdd : false;
      let close = opts && 'close' in opts ? opts.close : false;
      this.buf.putString((dart.test(close) ? "b" : "B") + (dart.test(evenOdd) ? "*" : "") + "\n");
    }
    applyShader(shader) {
      this[_page$].addShader(shader);
      this.buf.putString(dart.str(shader.name) + " sh\n");
    }
    restoreContext() {
      if (dart.test(this[_contextQueue][$isNotEmpty])) {
        this.buf.putString("Q\n");
        this[_context] = this[_contextQueue].removeLast();
      }
    }
    saveContext() {
      this.buf.putString("q\n");
      this[_contextQueue].addLast(this[_context].copy());
    }
    drawImage(img, x, y, w = null, h = null) {
      w == null ? w = img.width[$toDouble]() : null;
      h == null ? h = img.height[$toDouble]() * dart.notNull(w) / img.width[$toDouble]() : null;
      this[_page$].addXObject(img);
      this.buf.putString("q ");
      switch (img.orientation) {
        case C113 || CT.C113:
        {
          new data_types.PdfNumList.new(JSArrayOfdoubleL().of([w, 0.0, 0.0, h, x, y])).output(this.buf);
          break;
        }
        case C114 || CT.C114:
        {
          new data_types.PdfNumList.new(JSArrayOfdoubleL().of([-dart.notNull(w), 0.0, 0.0, h, dart.notNull(w) + dart.notNull(x), y])).output(this.buf);
          break;
        }
        case C115 || CT.C115:
        {
          new data_types.PdfNumList.new(JSArrayOfdoubleL().of([-dart.notNull(w), 0.0, 0.0, -dart.notNull(h), dart.notNull(w) + dart.notNull(x), dart.notNull(h) + dart.notNull(y)])).output(this.buf);
          break;
        }
        case C116 || CT.C116:
        {
          new data_types.PdfNumList.new(JSArrayOfdoubleL().of([w, 0.0, 0.0, -dart.notNull(h), x, dart.notNull(h) + dart.notNull(y)])).output(this.buf);
          break;
        }
        case C117 || CT.C117:
        {
          new data_types.PdfNumList.new(JSArrayOfdoubleL().of([0.0, -dart.notNull(h), -dart.notNull(w), 0.0, dart.notNull(w) + dart.notNull(x), dart.notNull(h) + dart.notNull(y)])).output(this.buf);
          break;
        }
        case C118 || CT.C118:
        {
          new data_types.PdfNumList.new(JSArrayOfdoubleL().of([0.0, -dart.notNull(h), w, 0.0, x, dart.notNull(h) + dart.notNull(y)])).output(this.buf);
          break;
        }
        case C119 || CT.C119:
        {
          new data_types.PdfNumList.new(JSArrayOfdoubleL().of([0.0, h, w, 0.0, x, y])).output(this.buf);
          break;
        }
        case C120 || CT.C120:
        {
          new data_types.PdfNumList.new(JSArrayOfdoubleL().of([0.0, h, -dart.notNull(w), 0.0, dart.notNull(w) + dart.notNull(x), y])).output(this.buf);
          break;
        }
      }
      this.buf.putString(" cm " + dart.str(img.name) + " Do Q\n");
    }
    drawLine(x1, y1, x2, y2) {
      this.moveTo(x1, y1);
      this.lineTo(x2, y2);
    }
    drawEllipse(x, y, r1, r2) {
      this.moveTo(x, dart.notNull(y) - dart.notNull(r2));
      this.curveTo(dart.notNull(x) + 0.551784 * dart.notNull(r1), dart.notNull(y) - dart.notNull(r2), dart.notNull(x) + dart.notNull(r1), dart.notNull(y) - 0.551784 * dart.notNull(r2), dart.notNull(x) + dart.notNull(r1), y);
      this.curveTo(dart.notNull(x) + dart.notNull(r1), dart.notNull(y) + 0.551784 * dart.notNull(r2), dart.notNull(x) + 0.551784 * dart.notNull(r1), dart.notNull(y) + dart.notNull(r2), x, dart.notNull(y) + dart.notNull(r2));
      this.curveTo(dart.notNull(x) - 0.551784 * dart.notNull(r1), dart.notNull(y) + dart.notNull(r2), dart.notNull(x) - dart.notNull(r1), dart.notNull(y) + 0.551784 * dart.notNull(r2), dart.notNull(x) - dart.notNull(r1), y);
      this.curveTo(dart.notNull(x) - dart.notNull(r1), dart.notNull(y) - 0.551784 * dart.notNull(r2), dart.notNull(x) - 0.551784 * dart.notNull(r1), dart.notNull(y) - dart.notNull(r2), x, dart.notNull(y) - dart.notNull(r2));
    }
    drawRect(x, y, w, h) {
      new data_types.PdfNumList.new(JSArrayOfdoubleL().of([x, y, w, h])).output(this.buf);
      this.buf.putString(" re\n");
    }
    drawBox(box) {
      this.drawRect(box.x, box.y, box.width, box.height);
    }
    drawRRect(x, y, w, h, rv, rh) {
      this.moveTo(x, dart.notNull(y) + dart.notNull(rv));
      this.curveTo(x, dart.notNull(y) - 0.551784 * dart.notNull(rv) + dart.notNull(rv), dart.notNull(x) - 0.551784 * dart.notNull(rh) + dart.notNull(rh), y, dart.notNull(x) + dart.notNull(rh), y);
      this.lineTo(dart.notNull(x) + dart.notNull(w) - dart.notNull(rh), y);
      this.curveTo(dart.notNull(x) + 0.551784 * dart.notNull(rh) + dart.notNull(w) - dart.notNull(rh), y, dart.notNull(x) + dart.notNull(w), dart.notNull(y) - 0.551784 * dart.notNull(rv) + dart.notNull(rv), dart.notNull(x) + dart.notNull(w), dart.notNull(y) + dart.notNull(rv));
      this.lineTo(dart.notNull(x) + dart.notNull(w), dart.notNull(y) + dart.notNull(h) - dart.notNull(rv));
      this.curveTo(dart.notNull(x) + dart.notNull(w), dart.notNull(y) + 0.551784 * dart.notNull(rv) + dart.notNull(h) - dart.notNull(rv), dart.notNull(x) + 0.551784 * dart.notNull(rh) + dart.notNull(w) - dart.notNull(rh), dart.notNull(y) + dart.notNull(h), dart.notNull(x) + dart.notNull(w) - dart.notNull(rh), dart.notNull(y) + dart.notNull(h));
      this.lineTo(dart.notNull(x) + dart.notNull(rh), dart.notNull(y) + dart.notNull(h));
      this.curveTo(dart.notNull(x) - 0.551784 * dart.notNull(rh) + dart.notNull(rh), dart.notNull(y) + dart.notNull(h), x, dart.notNull(y) + 0.551784 * dart.notNull(rv) + dart.notNull(h) - dart.notNull(rv), x, dart.notNull(y) + dart.notNull(h) - dart.notNull(rv));
      this.lineTo(x, dart.notNull(y) + dart.notNull(rv));
    }
    setFont(font, size, opts) {
      let charSpace = opts && 'charSpace' in opts ? opts.charSpace : 0;
      let wordSpace = opts && 'wordSpace' in opts ? opts.wordSpace : 0;
      let scale = opts && 'scale' in opts ? opts.scale : 1;
      let mode = opts && 'mode' in opts ? opts.mode : C134 || CT.C134;
      let rise = opts && 'rise' in opts ? opts.rise : 0;
      this.buf.putString(dart.str(font.name) + " ");
      new data_types.PdfNum.new(size).output(this.buf);
      this.buf.putString(" Tf\n");
      if (charSpace !== 0) {
        new data_types.PdfNum.new(charSpace).output(this.buf);
        this.buf.putString(" Tc\n");
      }
      if (wordSpace !== 0) {
        new data_types.PdfNum.new(wordSpace).output(this.buf);
        this.buf.putString(" Tw\n");
      }
      if (scale !== 1) {
        new data_types.PdfNum.new(dart.notNull(scale) * 100).output(this.buf);
        this.buf.putString(" Tz\n");
      }
      if (rise !== 0) {
        new data_types.PdfNum.new(rise).output(this.buf);
        this.buf.putString(" Ts\n");
      }
      if (mode != graphics.PdfTextRenderingMode.fill) {
        this.buf.putString(dart.str(mode.index) + " Tr\n");
      }
    }
    drawString(font, size, s, x, y, opts) {
      let charSpace = opts && 'charSpace' in opts ? opts.charSpace : 0;
      let wordSpace = opts && 'wordSpace' in opts ? opts.wordSpace : 0;
      let scale = opts && 'scale' in opts ? opts.scale : 1;
      let mode = opts && 'mode' in opts ? opts.mode : C134 || CT.C134;
      let rise = opts && 'rise' in opts ? opts.rise : 0;
      this[_page$].addFont(font);
      this.buf.putString("BT ");
      new data_types.PdfNumList.new(JSArrayOfdoubleL().of([x, y])).output(this.buf);
      this.buf.putString(" Td ");
      this.setFont(font, size, {charSpace: charSpace, mode: mode, rise: rise, scale: scale, wordSpace: wordSpace});
      this.buf.putString("[");
      font.putText(this.buf, s);
      this.buf.putString("]TJ ET\n");
    }
    reset() {
      this.buf.putString("0 Tr\n");
    }
    setColor(color) {
      this.setFillColor(color);
      this.setStrokeColor(color);
    }
    setFillColor(color) {
      if (PdfColorCmykL().is(color)) {
        new data_types.PdfNumList.new(JSArrayOfdoubleL().of([color.cyan, color.magenta, color.yellow, color.black])).output(this.buf);
        this.buf.putString(" k\n");
      } else {
        new data_types.PdfNumList.new(JSArrayOfdoubleL().of([color.red, color.green, color.blue])).output(this.buf);
        this.buf.putString(" rg\n");
      }
    }
    setStrokeColor(color) {
      if (PdfColorCmykL().is(color)) {
        new data_types.PdfNumList.new(JSArrayOfdoubleL().of([color.cyan, color.magenta, color.yellow, color.black])).output(this.buf);
        this.buf.putString(" K\n");
      } else {
        new data_types.PdfNumList.new(JSArrayOfdoubleL().of([color.red, color.green, color.blue])).output(this.buf);
        this.buf.putString(" RG\n");
      }
    }
    setFillPattern(pattern) {
      this[_page$].addPattern(pattern);
      this.buf.putString("/Pattern cs" + dart.str(pattern.name) + " scn\n");
    }
    setStrokePattern(pattern) {
      this[_page$].addPattern(pattern);
      this.buf.putString("/Pattern CS" + dart.str(pattern.name) + " SCN\n");
    }
    setGraphicState(state) {
      let name = this[_page$].stateName(state);
      this.buf.putString(dart.str(name) + " gs\n");
    }
    setTransform(t) {
      let s = t.storage;
      new data_types.PdfNumList.new(JSArrayOfdoubleL().of([s[$_get](0), s[$_get](1), s[$_get](4), s[$_get](5), s[$_get](12), s[$_get](13)])).output(this.buf);
      this.buf.putString(" cm\n");
      this[_context].ctm.multiply(t);
    }
    getTransform() {
      return this[_context].ctm.clone();
    }
    lineTo(x, y) {
      new data_types.PdfNumList.new(JSArrayOfdoubleL().of([x, y])).output(this.buf);
      this.buf.putString(" l\n");
    }
    moveTo(x, y) {
      new data_types.PdfNumList.new(JSArrayOfdoubleL().of([x, y])).output(this.buf);
      this.buf.putString(" m\n");
    }
    curveTo(x1, y1, x2, y2, x3, y3) {
      new data_types.PdfNumList.new(JSArrayOfdoubleL().of([x1, y1, x2, y2, x3, y3])).output(this.buf);
      this.buf.putString(" c\n");
    }
    [_vectorAngle](ux, uy, vx, vy) {
      let d = math.sqrt(dart.notNull(ux) * dart.notNull(ux) + dart.notNull(uy) * dart.notNull(uy)) * math.sqrt(dart.notNull(vx) * dart.notNull(vx) + dart.notNull(vy) * dart.notNull(vy));
      if (d === 0.0) {
        return 0.0;
      }
      let c = (dart.notNull(ux) * dart.notNull(vx) + dart.notNull(uy) * dart.notNull(vy)) / d;
      if (c < -1.0) {
        c = -1.0;
      } else if (c > 1.0) {
        c = 1.0;
      }
      let s = dart.notNull(ux) * dart.notNull(vy) - dart.notNull(uy) * dart.notNull(vx);
      c = math.acos(c);
      return c[$sign] === s[$sign] ? c : -c;
    }
    [_endToCenterParameters](x1, y1, x2, y2, large, sweep, rx, ry) {
      rx = rx[$abs]();
      ry = ry[$abs]();
      let x1d = 0.5 * (dart.notNull(x1) - dart.notNull(x2));
      let y1d = 0.5 * (dart.notNull(y1) - dart.notNull(y2));
      let r = x1d * x1d / (dart.notNull(rx) * dart.notNull(rx)) + y1d * y1d / (dart.notNull(ry) * dart.notNull(ry));
      if (r > 1.0) {
        let rr = math.sqrt(r);
        rx = dart.notNull(rx) * rr;
        ry = dart.notNull(ry) * rr;
        r = x1d * x1d / (dart.notNull(rx) * dart.notNull(rx)) + y1d * y1d / (dart.notNull(ry) * dart.notNull(ry));
      } else if (r !== 0.0) {
        r = 1.0 / r - 1.0;
      }
      if (-1e-10 < r && r < 0.0) {
        r = 0.0;
      }
      r = math.sqrt(r);
      if (dart.equals(large, sweep)) {
        r = -r;
      }
      let cxd = r * dart.notNull(rx) * y1d / dart.notNull(ry);
      let cyd = -(r * dart.notNull(ry) * x1d) / dart.notNull(rx);
      let cx = cxd + 0.5 * (dart.notNull(x1) + dart.notNull(x2));
      let cy = cyd + 0.5 * (dart.notNull(y1) + dart.notNull(y2));
      let theta = this[_vectorAngle](1.0, 0.0, (x1d - cxd) / dart.notNull(rx), (y1d - cyd) / dart.notNull(ry));
      let dTheta = this[_vectorAngle]((x1d - cxd) / dart.notNull(rx), (y1d - cyd) / dart.notNull(ry), (-x1d - cxd) / dart.notNull(rx), (-y1d - cyd) / dart.notNull(ry))[$modulo](3.141592653589793 * 2.0);
      if (dart.equals(sweep, false) && dTheta > 0.0) {
        dTheta = dTheta - 3.141592653589793 * 2.0;
      } else if (dart.equals(sweep, true) && dTheta < 0.0) {
        dTheta = dTheta + 3.141592653589793 * 2.0;
      }
      this[_bezierArcFromCentre](cx, cy, rx, ry, -dart.notNull(theta), -dTheta);
    }
    [_bezierArcFromCentre](cx, cy, rx, ry, startAngle, extent) {
      let fragmentsCount = null;
      let fragmentsAngle = null;
      if (extent[$abs]() <= 3.141592653589793 / 2.0) {
        fragmentsCount = 1;
        fragmentsAngle = extent;
      } else {
        fragmentsCount = (extent[$abs]() / (3.141592653589793 / 2.0))[$ceil]()[$toInt]();
        fragmentsAngle = dart.notNull(extent) / fragmentsCount[$toDouble]();
      }
      if (fragmentsAngle === 0.0) {
        return;
      }
      let halfFragment = dart.notNull(fragmentsAngle) * 0.5;
      let kappa = (4.0 / 3.0 * (1.0 - math.cos(halfFragment)) / math.sin(halfFragment))[$abs]();
      if (dart.notNull(fragmentsAngle) < 0.0) {
        kappa = -kappa;
      }
      let theta = startAngle;
      let startFragment = dart.notNull(theta) + dart.notNull(fragmentsAngle);
      let c1 = math.cos(theta);
      let s1 = math.sin(theta);
      for (let i = 0; i < dart.notNull(fragmentsCount); i = i + 1) {
        let c0 = c1;
        let s0 = s1;
        theta = startFragment + i * dart.notNull(fragmentsAngle);
        c1 = math.cos(theta);
        s1 = math.sin(theta);
        this.curveTo(dart.notNull(cx) + dart.notNull(rx) * (c0 - kappa * s0), dart.notNull(cy) - dart.notNull(ry) * (s0 + kappa * c0), dart.notNull(cx) + dart.notNull(rx) * (c1 + kappa * s1), dart.notNull(cy) - dart.notNull(ry) * (s1 - kappa * c1), dart.notNull(cx) + dart.notNull(rx) * c1, dart.notNull(cy) - dart.notNull(ry) * s1);
      }
    }
    bezierArc(x1, y1, rx, ry, x2, y2, opts) {
      let large = opts && 'large' in opts ? opts.large : false;
      let sweep = opts && 'sweep' in opts ? opts.sweep : false;
      let phi = opts && 'phi' in opts ? opts.phi : 0;
      if (x1 == x2 && y1 == y2) {
        return;
      }
      if (rx[$abs]() <= 1e-10 || ry[$abs]() <= 1e-10) {
        this.lineTo(x2, y2);
        return;
      }
      if (phi !== 0.0) {
        let mat = vector_math_64.Matrix4.identity();
        mat.translate(-dart.notNull(x1), -dart.notNull(y1));
        mat.rotateZ(-dart.notNull(phi));
        let tr = mat.transform3(vector_math_64.Vector3.new(x2, y2, 0.0));
        this[_endToCenterParameters](0.0, 0.0, tr._get(0), tr._get(1), large, sweep, rx, ry);
      } else {
        this[_endToCenterParameters](x1, y1, x2, y2, large, sweep, rx, ry);
      }
    }
    drawShape(d) {
      let proxy = new graphics._PathProxy.new(this);
      path_parsing.writeSvgPathDataToPath(d, proxy);
    }
    static shapeBoundingBox(d) {
      let proxy = new graphics._PathBBProxy.new();
      path_parsing.writeSvgPathDataToPath(d, proxy);
      return proxy.box;
    }
    setLineCap(cap) {
      this.buf.putString(dart.str(cap.index) + " J\n");
    }
    setLineJoin(join) {
      this.buf.putString(dart.str(join.index) + " j\n");
    }
    setLineWidth(width) {
      new data_types.PdfNum.new(width).output(this.buf);
      this.buf.putString(" w\n");
    }
    setMiterLimit(limit) {
      if (!(dart.notNull(limit) >= 1.0)) dart.assertFailed(null, L23, 585, 12, "limit >= 1.0");
      new data_types.PdfNum.new(limit).output(this.buf);
      this.buf.putString(" M\n");
    }
    setLineDashPattern(array = C143 || CT.C143, phase = 0) {
      data_types.PdfArray.fromNum(array).output(this.buf);
      this.buf.putString(" " + dart.str(phase) + " d\n");
    }
  };
  (graphics.PdfGraphics.new = function(_page, buf) {
    this[_context] = null;
    this[_contextQueue] = new (ListQueueOf_PdfGraphicsContextL()).new();
    this[_page$] = _page;
    this[buf$] = buf;
    this[_context] = new graphics._PdfGraphicsContext.new({ctm: vector_math_64.Matrix4.identity()});
  }).prototype = graphics.PdfGraphics.prototype;
  dart.addTypeTests(graphics.PdfGraphics);
  dart.addTypeCaches(graphics.PdfGraphics);
  dart.setMethodSignature(graphics.PdfGraphics, () => ({
    __proto__: dart.getMethods(graphics.PdfGraphics.__proto__),
    fillPath: dart.fnType(dart.void, [], {evenOdd: dart.legacy(core.bool)}, {}),
    strokePath: dart.fnType(dart.void, [], {close: dart.legacy(core.bool)}, {}),
    closePath: dart.fnType(dart.void, []),
    clipPath: dart.fnType(dart.void, [], {end: dart.legacy(core.bool), evenOdd: dart.legacy(core.bool)}, {}),
    fillAndStrokePath: dart.fnType(dart.void, [], {close: dart.legacy(core.bool), evenOdd: dart.legacy(core.bool)}, {}),
    applyShader: dart.fnType(dart.void, [dart.legacy(shading.PdfShading)]),
    restoreContext: dart.fnType(dart.void, []),
    saveContext: dart.fnType(dart.void, []),
    drawImage: dart.fnType(dart.void, [dart.legacy(image$0.PdfImage), dart.legacy(core.double), dart.legacy(core.double)], [dart.legacy(core.double), dart.legacy(core.double)]),
    drawLine: dart.fnType(dart.void, [dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double)]),
    drawEllipse: dart.fnType(dart.void, [dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double)]),
    drawRect: dart.fnType(dart.void, [dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double)]),
    drawBox: dart.fnType(dart.void, [dart.legacy(rect.PdfRect)]),
    drawRRect: dart.fnType(dart.void, [dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double)]),
    setFont: dart.fnType(dart.void, [dart.legacy(font.PdfFont), dart.legacy(core.double)], {charSpace: dart.legacy(core.double), mode: dart.legacy(graphics.PdfTextRenderingMode), rise: dart.legacy(core.double), scale: dart.legacy(core.double), wordSpace: dart.legacy(core.double)}, {}),
    drawString: dart.fnType(dart.void, [dart.legacy(font.PdfFont), dart.legacy(core.double), dart.legacy(core.String), dart.legacy(core.double), dart.legacy(core.double)], {charSpace: dart.legacy(core.double), mode: dart.legacy(graphics.PdfTextRenderingMode), rise: dart.legacy(core.double), scale: dart.legacy(core.double), wordSpace: dart.legacy(core.double)}, {}),
    reset: dart.fnType(dart.void, []),
    setColor: dart.fnType(dart.void, [dart.legacy(color.PdfColor)]),
    setFillColor: dart.fnType(dart.void, [dart.legacy(color.PdfColor)]),
    setStrokeColor: dart.fnType(dart.void, [dart.legacy(color.PdfColor)]),
    setFillPattern: dart.fnType(dart.void, [dart.legacy(pattern.PdfPattern)]),
    setStrokePattern: dart.fnType(dart.void, [dart.legacy(pattern.PdfPattern)]),
    setGraphicState: dart.fnType(dart.void, [dart.legacy(graphic_state.PdfGraphicState)]),
    setTransform: dart.fnType(dart.void, [dart.legacy(vector_math_64.Matrix4)]),
    getTransform: dart.fnType(dart.legacy(vector_math_64.Matrix4), []),
    lineTo: dart.fnType(dart.void, [dart.legacy(core.double), dart.legacy(core.double)]),
    moveTo: dart.fnType(dart.void, [dart.legacy(core.double), dart.legacy(core.double)]),
    curveTo: dart.fnType(dart.void, [dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double)]),
    [_vectorAngle]: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double)]),
    [_endToCenterParameters]: dart.fnType(dart.void, [dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.bool), dart.legacy(core.bool), dart.legacy(core.double), dart.legacy(core.double)]),
    [_bezierArcFromCentre]: dart.fnType(dart.void, [dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double)]),
    bezierArc: dart.fnType(dart.void, [dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double)], {large: dart.legacy(core.bool), phi: dart.legacy(core.double), sweep: dart.legacy(core.bool)}, {}),
    drawShape: dart.fnType(dart.void, [dart.legacy(core.String)]),
    setLineCap: dart.fnType(dart.void, [dart.legacy(graphics.PdfLineCap)]),
    setLineJoin: dart.fnType(dart.void, [dart.legacy(graphics.PdfLineJoin)]),
    setLineWidth: dart.fnType(dart.void, [dart.legacy(core.double)]),
    setMiterLimit: dart.fnType(dart.void, [dart.legacy(core.double)]),
    setLineDashPattern: dart.fnType(dart.void, [], [dart.legacy(core.List$(dart.legacy(core.num))), dart.legacy(core.int)])
  }));
  dart.setGetterSignature(graphics.PdfGraphics, () => ({
    __proto__: dart.getGetters(graphics.PdfGraphics.__proto__),
    defaultFont: dart.legacy(font.PdfFont)
  }));
  dart.setLibraryUri(graphics.PdfGraphics, L22);
  dart.setFieldSignature(graphics.PdfGraphics, () => ({
    __proto__: dart.getFields(graphics.PdfGraphics.__proto__),
    [_context]: dart.fieldType(dart.legacy(graphics._PdfGraphicsContext)),
    [_contextQueue]: dart.finalFieldType(dart.legacy(collection.Queue$(dart.legacy(graphics._PdfGraphicsContext)))),
    [_page$]: dart.finalFieldType(dart.legacy(graphic_stream.PdfGraphicStream)),
    buf: dart.finalFieldType(dart.legacy(stream.PdfStream))
  }));
  dart.defineLazy(graphics.PdfGraphics, {
    /*graphics.PdfGraphics._m4*/get _m4() {
      return 0.551784;
    }
  }, true);
  graphics._PathProxy = class _PathProxy extends path_parsing.PathProxy {
    close() {
      this.canvas.closePath();
    }
    cubicTo(x1, y1, x2, y2, x3, y3) {
      this.canvas.curveTo(x1, y1, x2, y2, x3, y3);
    }
    lineTo(x, y) {
      this.canvas.lineTo(x, y);
    }
    moveTo(x, y) {
      this.canvas.moveTo(x, y);
    }
  };
  (graphics._PathProxy.new = function(canvas) {
    this.canvas = canvas;
    ;
  }).prototype = graphics._PathProxy.prototype;
  dart.addTypeTests(graphics._PathProxy);
  dart.addTypeCaches(graphics._PathProxy);
  dart.setMethodSignature(graphics._PathProxy, () => ({
    __proto__: dart.getMethods(graphics._PathProxy.__proto__),
    close: dart.fnType(dart.void, []),
    cubicTo: dart.fnType(dart.void, [dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double)]),
    lineTo: dart.fnType(dart.void, [dart.legacy(core.double), dart.legacy(core.double)]),
    moveTo: dart.fnType(dart.void, [dart.legacy(core.double), dart.legacy(core.double)])
  }));
  dart.setLibraryUri(graphics._PathProxy, L22);
  dart.setFieldSignature(graphics._PathProxy, () => ({
    __proto__: dart.getFields(graphics._PathProxy.__proto__),
    canvas: dart.finalFieldType(dart.legacy(graphics.PdfGraphics))
  }));
  var _xMin = dart.privateName(graphics, "_xMin");
  var _yMin = dart.privateName(graphics, "_yMin");
  var _xMax = dart.privateName(graphics, "_xMax");
  var _yMax = dart.privateName(graphics, "_yMax");
  var _pX = dart.privateName(graphics, "_pX");
  var _pY = dart.privateName(graphics, "_pY");
  var _updateMinMax = dart.privateName(graphics, "_updateMinMax");
  graphics._PathBBProxy = class _PathBBProxy extends path_parsing.PathProxy {
    get box() {
      if (dart.notNull(this[_xMin]) > dart.notNull(this[_xMax]) || dart.notNull(this[_yMin]) > dart.notNull(this[_yMax])) {
        return rect.PdfRect.zero;
      }
      return rect.PdfRect.fromLTRB(this[_xMin], this[_yMin], this[_xMax], this[_yMax]);
    }
    close() {
    }
    cubicTo(x1, y1, x2, y2, x3, y3) {
      let tvalues = JSArrayOfdoubleL().of([]);
      let a = null;
      let b = null;
      let c = null;
      let t = null;
      let t1 = null;
      let t2 = null;
      let b2ac = null;
      let sqrtb2ac = null;
      for (let i = 0; i < 2; i = i + 1) {
        if (i === 0) {
          b = 6 * dart.notNull(this[_pX]) - 12 * dart.notNull(x1) + 6 * dart.notNull(x2);
          a = -3 * dart.notNull(this[_pX]) + 9 * dart.notNull(x1) - 9 * dart.notNull(x2) + 3 * dart.notNull(x3);
          c = 3 * dart.notNull(x1) - 3 * dart.notNull(this[_pX]);
        } else {
          b = 6 * dart.notNull(this[_pY]) - 12 * dart.notNull(y1) + 6 * dart.notNull(y2);
          a = -3 * dart.notNull(this[_pY]) + 9 * dart.notNull(y1) - 9 * dart.notNull(y2) + 3 * dart.notNull(y3);
          c = 3 * dart.notNull(y1) - 3 * dart.notNull(this[_pY]);
        }
        if (a[$abs]() < 1e-12) {
          if (b[$abs]() < 1e-12) {
            continue;
          }
          t = -dart.notNull(c) / dart.notNull(b);
          if (0 < dart.notNull(t) && dart.notNull(t) < 1) {
            tvalues[$add](t);
          }
          continue;
        }
        b2ac = dart.notNull(b) * dart.notNull(b) - 4 * dart.notNull(c) * dart.notNull(a);
        if (dart.notNull(b2ac) < 0) {
          if (b2ac[$abs]() < 1e-12) {
            t = -dart.notNull(b) / (2 * dart.notNull(a));
            if (0 < dart.notNull(t) && dart.notNull(t) < 1) {
              tvalues[$add](t);
            }
          }
          continue;
        }
        sqrtb2ac = math.sqrt(b2ac);
        t1 = (-dart.notNull(b) + dart.notNull(sqrtb2ac)) / (2 * dart.notNull(a));
        if (0 < dart.notNull(t1) && dart.notNull(t1) < 1) {
          tvalues[$add](t1);
        }
        t2 = (-dart.notNull(b) - dart.notNull(sqrtb2ac)) / (2 * dart.notNull(a));
        if (0 < dart.notNull(t2) && dart.notNull(t2) < 1) {
          tvalues[$add](t2);
        }
      }
      for (let t of tvalues) {
        let mt = 1 - dart.notNull(t);
        this[_updateMinMax](mt * mt * mt * dart.notNull(this[_pX]) + 3 * mt * mt * dart.notNull(t) * dart.notNull(x1) + 3 * mt * dart.notNull(t) * dart.notNull(t) * dart.notNull(x2) + dart.notNull(t) * dart.notNull(t) * dart.notNull(t) * dart.notNull(x3), mt * mt * mt * dart.notNull(this[_pY]) + 3 * mt * mt * dart.notNull(t) * dart.notNull(y1) + 3 * mt * dart.notNull(t) * dart.notNull(t) * dart.notNull(y2) + dart.notNull(t) * dart.notNull(t) * dart.notNull(t) * dart.notNull(y3));
      }
      this[_updateMinMax](this[_pX], this[_pY]);
      this[_updateMinMax](x3, y3);
      this[_pX] = x3;
      this[_pY] = y3;
    }
    lineTo(x, y) {
      this[_pX] = x;
      this[_pY] = y;
      this[_updateMinMax](x, y);
    }
    moveTo(x, y) {
      this[_pX] = x;
      this[_pY] = y;
      this[_updateMinMax](x, y);
    }
    [_updateMinMax](x, y) {
      this[_xMin] = math.min(doubleL(), this[_xMin], x);
      this[_yMin] = math.min(doubleL(), this[_yMin], y);
      this[_xMax] = math.max(doubleL(), this[_xMax], x);
      this[_yMax] = math.max(doubleL(), this[_yMax], y);
    }
  };
  (graphics._PathBBProxy.new = function() {
    this[_xMin] = 1 / 0;
    this[_yMin] = 1 / 0;
    this[_xMax] = -1 / 0;
    this[_yMax] = -1 / 0;
    this[_pX] = 0.0;
    this[_pY] = 0.0;
    ;
  }).prototype = graphics._PathBBProxy.prototype;
  dart.addTypeTests(graphics._PathBBProxy);
  dart.addTypeCaches(graphics._PathBBProxy);
  dart.setMethodSignature(graphics._PathBBProxy, () => ({
    __proto__: dart.getMethods(graphics._PathBBProxy.__proto__),
    close: dart.fnType(dart.void, []),
    cubicTo: dart.fnType(dart.void, [dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double)]),
    lineTo: dart.fnType(dart.void, [dart.legacy(core.double), dart.legacy(core.double)]),
    moveTo: dart.fnType(dart.void, [dart.legacy(core.double), dart.legacy(core.double)]),
    [_updateMinMax]: dart.fnType(dart.void, [dart.legacy(core.double), dart.legacy(core.double)])
  }));
  dart.setGetterSignature(graphics._PathBBProxy, () => ({
    __proto__: dart.getGetters(graphics._PathBBProxy.__proto__),
    box: dart.legacy(rect.PdfRect)
  }));
  dart.setLibraryUri(graphics._PathBBProxy, L22);
  dart.setFieldSignature(graphics._PathBBProxy, () => ({
    __proto__: dart.getFields(graphics._PathBBProxy.__proto__),
    [_xMin]: dart.fieldType(dart.legacy(core.double)),
    [_yMin]: dart.fieldType(dart.legacy(core.double)),
    [_xMax]: dart.fieldType(dart.legacy(core.double)),
    [_yMax]: dart.fieldType(dart.legacy(core.double)),
    [_pX]: dart.fieldType(dart.legacy(core.double)),
    [_pY]: dart.fieldType(dart.legacy(core.double))
  }));
  $function.PdfBaseFunction = class PdfBaseFunction extends object.PdfObject {
    static colorsAndStops(pdfDocument, colors, stops = null) {
      if (stops == null || dart.test(stops[$isEmpty])) {
        return $function.PdfFunction.fromColors(pdfDocument, colors);
      }
      let _colors = ListOfPdfColorL().from(colors);
      let _stops = ListOfdoubleL().from(stops);
      let fn = JSArrayOfPdfFunctionL().of([]);
      let lc = _colors[$first];
      if (dart.notNull(_stops[$_get](0)) > 0) {
        _colors[$insert](0, lc);
        _stops[$insert](0, 0.0);
      }
      if (dart.notNull(_stops[$last]) < 1) {
        _colors[$add](_colors[$last]);
        _stops[$add](1.0);
      }
      if (_stops[$length] != _colors[$length]) {
        dart.throw(core.Exception.new("The number of colors in a gradient must match the number of stops"));
      }
      for (let c of _colors[$sublist](1)) {
        fn[$add]($function.PdfFunction.fromColors(pdfDocument, JSArrayOfPdfColorL().of([lc, c])));
        lc = c;
      }
      return new $function.PdfStitchingFunction.new(pdfDocument, {functions: fn, bounds: _stops[$sublist](1, dart.notNull(_stops[$length]) - 1), domainStart: 0.0, domainEnd: 1.0});
    }
  };
  ($function.PdfBaseFunction.new = function(pdfDocument) {
    $function.PdfBaseFunction.__proto__.new.call(this, pdfDocument);
    ;
  }).prototype = $function.PdfBaseFunction.prototype;
  dart.addTypeTests($function.PdfBaseFunction);
  dart.addTypeCaches($function.PdfBaseFunction);
  dart.setLibraryUri($function.PdfBaseFunction, L24);
  var C144;
  var C145;
  var C146;
  var data$ = dart.privateName($function, "PdfFunction.data");
  var bitsPerSample$ = dart.privateName($function, "PdfFunction.bitsPerSample");
  var order$ = dart.privateName($function, "PdfFunction.order");
  var domain$ = dart.privateName($function, "PdfFunction.domain");
  var range$ = dart.privateName($function, "PdfFunction.range");
  $function.PdfFunction = class PdfFunction extends object_stream.PdfObjectStream {
    get data() {
      return this[data$];
    }
    set data(value) {
      super.data = value;
    }
    get bitsPerSample() {
      return this[bitsPerSample$];
    }
    set bitsPerSample(value) {
      super.bitsPerSample = value;
    }
    get order() {
      return this[order$];
    }
    set order(value) {
      super.order = value;
    }
    get domain() {
      return this[domain$];
    }
    set domain(value) {
      super.domain = value;
    }
    get range() {
      return this[range$];
    }
    set range(value) {
      super.range = value;
    }
    static fromColors(pdfDocument, colors) {
      let data = JSArrayOfintL().of([]);
      for (let color of colors) {
        data[$add]((dart.notNull(color.red) * 255.0)[$round]() & 255);
        data[$add]((dart.notNull(color.green) * 255.0)[$round]() & 255);
        data[$add]((dart.notNull(color.blue) * 255.0)[$round]() & 255);
      }
      return new $function.PdfFunction.new(pdfDocument, {order: 3, data: data, range: C145 || CT.C145});
    }
    prepare() {
      this.buf.putBytes(this.data);
      super.prepare();
      this.params._set("/FunctionType", C146 || CT.C146);
      this.params._set("/BitsPerSample", new data_types.PdfNum.new(this.bitsPerSample));
      this.params._set("/Order", new data_types.PdfNum.new(this.order));
      this.params._set("/Domain", data_types.PdfArray.fromNum(this.domain));
      this.params._set("/Range", data_types.PdfArray.fromNum(this.range));
      this.params._set("/Size", data_types.PdfArray.fromNum(JSArrayOfintL().of([(dart.notNull(this.data[$length]) / dart.notNull(this.order))[$truncate]()])));
    }
    toString() {
      return dart.str(this.runtimeType) + " " + dart.str(this.bitsPerSample) + " " + dart.str(this.order) + " " + dart.str(this.data);
    }
  };
  ($function.PdfFunction.new = function(pdfDocument, opts) {
    let data = opts && 'data' in opts ? opts.data : null;
    let bitsPerSample = opts && 'bitsPerSample' in opts ? opts.bitsPerSample : 8;
    let order = opts && 'order' in opts ? opts.order : 1;
    let domain = opts && 'domain' in opts ? opts.domain : C144 || CT.C144;
    let range = opts && 'range' in opts ? opts.range : C144 || CT.C144;
    this[data$] = data;
    this[bitsPerSample$] = bitsPerSample;
    this[order$] = order;
    this[domain$] = domain;
    this[range$] = range;
    $function.PdfFunction.__proto__.new.call(this, pdfDocument);
    ;
  }).prototype = $function.PdfFunction.prototype;
  dart.addTypeTests($function.PdfFunction);
  dart.addTypeCaches($function.PdfFunction);
  $function.PdfFunction[dart.implements] = () => [$function.PdfBaseFunction];
  dart.setLibraryUri($function.PdfFunction, L24);
  dart.setFieldSignature($function.PdfFunction, () => ({
    __proto__: dart.getFields($function.PdfFunction.__proto__),
    data: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.int)))),
    bitsPerSample: dart.finalFieldType(dart.legacy(core.int)),
    order: dart.finalFieldType(dart.legacy(core.int)),
    domain: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.num)))),
    range: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.num))))
  }));
  dart.defineExtensionMethods($function.PdfFunction, ['toString']);
  var C147;
  var functions$ = dart.privateName($function, "PdfStitchingFunction.functions");
  var bounds$ = dart.privateName($function, "PdfStitchingFunction.bounds");
  var domainStart$ = dart.privateName($function, "PdfStitchingFunction.domainStart");
  var domainEnd$ = dart.privateName($function, "PdfStitchingFunction.domainEnd");
  $function.PdfStitchingFunction = class PdfStitchingFunction extends $function.PdfBaseFunction {
    get functions() {
      return this[functions$];
    }
    set functions(value) {
      super.functions = value;
    }
    get bounds() {
      return this[bounds$];
    }
    set bounds(value) {
      super.bounds = value;
    }
    get domainStart() {
      return this[domainStart$];
    }
    set domainStart(value) {
      super.domainStart = value;
    }
    get domainEnd() {
      return this[domainEnd$];
    }
    set domainEnd(value) {
      super.domainEnd = value;
    }
    prepare() {
      super.prepare();
      this.params._set("/FunctionType", C147 || CT.C147);
      this.params._set("/Functions", data_types.PdfArray.fromObjects(this.functions));
      this.params._set("/Order", C147 || CT.C147);
      this.params._set("/Domain", data_types.PdfArray.fromNum(JSArrayOfnumL().of([this.domainStart, this.domainEnd])));
      this.params._set("/Bounds", data_types.PdfArray.fromNum(this.bounds));
      this.params._set("/Encode", data_types.PdfArray.fromNum(ListOfintL().generate(dart.notNull(this.functions[$length]) * 2, dart.fn(i => i[$modulo](2), intLTointL()))));
    }
    toString() {
      return dart.str(this.runtimeType) + " " + dart.str(this.domainStart) + " " + dart.str(this.bounds) + " " + dart.str(this.domainEnd) + " " + dart.str(this.functions);
    }
  };
  ($function.PdfStitchingFunction.new = function(pdfDocument, opts) {
    let functions = opts && 'functions' in opts ? opts.functions : null;
    let bounds = opts && 'bounds' in opts ? opts.bounds : null;
    let domainStart = opts && 'domainStart' in opts ? opts.domainStart : 0;
    let domainEnd = opts && 'domainEnd' in opts ? opts.domainEnd : 1;
    this[functions$] = functions;
    this[bounds$] = bounds;
    this[domainStart$] = domainStart;
    this[domainEnd$] = domainEnd;
    if (!(functions != null)) dart.assertFailed(null, L25, 133, 16, "functions != null");
    if (!(bounds != null)) dart.assertFailed(null, L25, 134, 16, "bounds != null");
    $function.PdfStitchingFunction.__proto__.new.call(this, pdfDocument);
    ;
  }).prototype = $function.PdfStitchingFunction.prototype;
  dart.addTypeTests($function.PdfStitchingFunction);
  dart.addTypeCaches($function.PdfStitchingFunction);
  dart.setLibraryUri($function.PdfStitchingFunction, L24);
  dart.setFieldSignature($function.PdfStitchingFunction, () => ({
    __proto__: dart.getFields($function.PdfStitchingFunction.__proto__),
    functions: dart.finalFieldType(dart.legacy(core.List$(dart.legacy($function.PdfFunction)))),
    bounds: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.double)))),
    domainStart: dart.finalFieldType(dart.legacy(core.double)),
    domainEnd: dart.finalFieldType(dart.legacy(core.double))
  }));
  dart.defineExtensionMethods($function.PdfStitchingFunction, ['toString']);
  var _mask = dart.privateName(smask, "_mask");
  var _graphics = dart.privateName(smask, "_graphics");
  var _tr = dart.privateName(smask, "_tr");
  var C148;
  var document$ = dart.privateName(smask, "PdfSoftMask.document");
  smask.PdfSoftMask = class PdfSoftMask extends core.Object {
    get document() {
      return this[document$];
    }
    set document(value) {
      super.document = value;
    }
    getGraphics() {
      return this[_graphics];
    }
    output() {
      let params = new data_types.PdfDict.new(new (IdentityMapOfStringL$PdfDataTypeL()).from(["/S", C148 || CT.C148, "/G", this[_mask].ref()]));
      if (this[_tr] != null) {
        params._set("/TR", this[_tr].ref());
      }
      return params;
    }
  };
  (smask.PdfSoftMask.new = function(document, opts) {
    let boundingBox = opts && 'boundingBox' in opts ? opts.boundingBox : null;
    let isolated = opts && 'isolated' in opts ? opts.isolated : false;
    let knockout = opts && 'knockout' in opts ? opts.knockout : false;
    let invert = opts && 'invert' in opts ? opts.invert : false;
    this[_mask] = null;
    this[_graphics] = null;
    this[_tr] = null;
    this[document$] = document;
    if (!(boundingBox != null)) dart.assertFailed(null, L26, 34, 16, "boundingBox != null");
    if (!(isolated != null)) dart.assertFailed(null, L26, 35, 16, "isolated != null");
    if (!(knockout != null)) dart.assertFailed(null, L26, 36, 16, "knockout != null");
    if (!(invert != null)) dart.assertFailed(null, L26, 37, 16, "invert != null");
    this[_mask] = new graphic_stream.PdfGraphicXObject.new(this.document);
    this[_mask].params._set("/BBox", data_types.PdfArray.fromNum(JSArrayOfnumL().of([boundingBox.x, boundingBox.y, boundingBox.width, boundingBox.height])));
    if (dart.test(isolated)) {
      this[_mask].params._set("/I", C18 || CT.C18);
    }
    if (dart.test(knockout)) {
      this[_mask].params._set("/K", C18 || CT.C18);
    }
    this[_graphics] = new graphics.PdfGraphics.new(this[_mask], this[_mask].buf);
    if (dart.test(invert)) {
      this[_tr] = new $function.PdfFunction.new(this.document, {data: JSArrayOfintL().of([255, 0])});
    }
  }).prototype = smask.PdfSoftMask.prototype;
  dart.addTypeTests(smask.PdfSoftMask);
  dart.addTypeCaches(smask.PdfSoftMask);
  dart.setMethodSignature(smask.PdfSoftMask, () => ({
    __proto__: dart.getMethods(smask.PdfSoftMask.__proto__),
    getGraphics: dart.fnType(dart.legacy(graphics.PdfGraphics), []),
    output: dart.fnType(dart.legacy(data_types.PdfDict), [])
  }));
  dart.setLibraryUri(smask.PdfSoftMask, L27);
  dart.setFieldSignature(smask.PdfSoftMask, () => ({
    __proto__: dart.getFields(smask.PdfSoftMask.__proto__),
    document: dart.finalFieldType(dart.legacy(document.PdfDocument)),
    [_mask]: dart.fieldType(dart.legacy(graphic_stream.PdfGraphicXObject)),
    [_graphics]: dart.fieldType(dart.legacy(graphics.PdfGraphics)),
    [_tr]: dart.fieldType(dart.legacy($function.PdfBaseFunction))
  }));
  var _name$5 = dart.privateName(graphic_state, "_name");
  var C149;
  var C150;
  var C151;
  var C152;
  var C153;
  var C154;
  var C155;
  var C156;
  var C157;
  var C158;
  var C159;
  var C160;
  var C161;
  var C162;
  var C163;
  var C164;
  var C165;
  graphic_state.PdfBlendMode = class PdfBlendMode extends core.Object {
    toString() {
      return this[_name$5];
    }
  };
  (graphic_state.PdfBlendMode.new = function(index, _name) {
    this.index = index;
    this[_name$5] = _name;
    ;
  }).prototype = graphic_state.PdfBlendMode.prototype;
  dart.addTypeTests(graphic_state.PdfBlendMode);
  dart.addTypeCaches(graphic_state.PdfBlendMode);
  dart.setMethodSignature(graphic_state.PdfBlendMode, () => ({
    __proto__: dart.getMethods(graphic_state.PdfBlendMode.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(graphic_state.PdfBlendMode, L28);
  dart.setFieldSignature(graphic_state.PdfBlendMode, () => ({
    __proto__: dart.getFields(graphic_state.PdfBlendMode.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$5]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(graphic_state.PdfBlendMode, ['toString']);
  graphic_state.PdfBlendMode.normal = C149 || CT.C149;
  graphic_state.PdfBlendMode.multiply = C150 || CT.C150;
  graphic_state.PdfBlendMode.screen = C151 || CT.C151;
  graphic_state.PdfBlendMode.overlay = C152 || CT.C152;
  graphic_state.PdfBlendMode.darken = C153 || CT.C153;
  graphic_state.PdfBlendMode.lighten = C154 || CT.C154;
  graphic_state.PdfBlendMode.colorDodge = C155 || CT.C155;
  graphic_state.PdfBlendMode.colorBurn = C156 || CT.C156;
  graphic_state.PdfBlendMode.hardLight = C157 || CT.C157;
  graphic_state.PdfBlendMode.softLight = C158 || CT.C158;
  graphic_state.PdfBlendMode.difference = C159 || CT.C159;
  graphic_state.PdfBlendMode.exclusion = C160 || CT.C160;
  graphic_state.PdfBlendMode.hue = C161 || CT.C161;
  graphic_state.PdfBlendMode.saturation = C162 || CT.C162;
  graphic_state.PdfBlendMode.color = C163 || CT.C163;
  graphic_state.PdfBlendMode.luminosity = C164 || CT.C164;
  graphic_state.PdfBlendMode.values = C165 || CT.C165;
  var opacity$ = dart.privateName(graphic_state, "PdfGraphicState.opacity");
  var blendMode$ = dart.privateName(graphic_state, "PdfGraphicState.blendMode");
  var softMask$ = dart.privateName(graphic_state, "PdfGraphicState.softMask");
  graphic_state.PdfGraphicState = class PdfGraphicState extends core.Object {
    get opacity() {
      return this[opacity$];
    }
    set opacity(value) {
      super.opacity = value;
    }
    get blendMode() {
      return this[blendMode$];
    }
    set blendMode(value) {
      super.blendMode = value;
    }
    get softMask() {
      return this[softMask$];
    }
    set softMask(value) {
      super.softMask = value;
    }
    output() {
      let params = new data_types.PdfDict.new();
      if (this.opacity != null) {
        params._set("/CA", new data_types.PdfNum.new(this.opacity));
        params._set("/ca", new data_types.PdfNum.new(this.opacity));
      }
      if (this.blendMode != null) {
        let bm = dart.toString(this.blendMode);
        params._set("/BM", new data_types.PdfName.new("/" + bm[$substring](13, 14)[$toUpperCase]() + bm[$substring](14)));
      }
      if (this.softMask != null) {
        params._set("/SMask", this.softMask.output());
      }
      return params;
    }
    _equals(other) {
      if (other == null) return false;
      if (!PdfGraphicStateL().is(other)) {
        return false;
      }
      return dart.equals(dart.dload(other, 'opacity'), this.opacity) && dart.equals(dart.dload(other, 'blendMode'), this.blendMode) && dart.equals(dart.dload(other, 'softMask'), this.softMask);
    }
    get hashCode() {
      return dart.hashCode(this.opacity);
    }
  };
  (graphic_state.PdfGraphicState.new = function(opts) {
    let opacity = opts && 'opacity' in opts ? opts.opacity : null;
    let blendMode = opts && 'blendMode' in opts ? opts.blendMode : null;
    let softMask = opts && 'softMask' in opts ? opts.softMask : null;
    this[opacity$] = opacity;
    this[blendMode$] = blendMode;
    this[softMask$] = softMask;
    ;
  }).prototype = graphic_state.PdfGraphicState.prototype;
  dart.addTypeTests(graphic_state.PdfGraphicState);
  dart.addTypeCaches(graphic_state.PdfGraphicState);
  dart.setMethodSignature(graphic_state.PdfGraphicState, () => ({
    __proto__: dart.getMethods(graphic_state.PdfGraphicState.__proto__),
    output: dart.fnType(dart.legacy(data_types.PdfDict), []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic])
  }));
  dart.setGetterSignature(graphic_state.PdfGraphicState, () => ({
    __proto__: dart.getGetters(graphic_state.PdfGraphicState.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(graphic_state.PdfGraphicState, L28);
  dart.setFieldSignature(graphic_state.PdfGraphicState, () => ({
    __proto__: dart.getFields(graphic_state.PdfGraphicState.__proto__),
    opacity: dart.finalFieldType(dart.legacy(core.double)),
    blendMode: dart.finalFieldType(dart.legacy(graphic_state.PdfBlendMode)),
    softMask: dart.finalFieldType(dart.legacy(smask.PdfSoftMask))
  }));
  dart.defineExtensionMethods(graphic_state.PdfGraphicState, ['_equals']);
  dart.defineExtensionAccessors(graphic_state.PdfGraphicState, ['hashCode']);
  var _states = dart.privateName(graphic_state, "_states");
  graphic_state.PdfGraphicStates = class PdfGraphicStates extends object.PdfObject {
    stateName(state) {
      let index = this[_states][$indexOf](state);
      if (dart.notNull(index) < 0) {
        index = this[_states][$length];
        this[_states][$add](state);
      }
      return "/a" + dart.str(index);
    }
    prepare() {
      super.prepare();
      for (let index = 0; index < dart.notNull(this[_states][$length]); index = index + 1) {
        this.params._set("/a" + dart.str(index), this[_states][$_get](index).output());
      }
    }
  };
  (graphic_state.PdfGraphicStates.new = function(pdfDocument) {
    this[_states] = JSArrayOfPdfGraphicStateL().of([]);
    graphic_state.PdfGraphicStates.__proto__.new.call(this, pdfDocument);
    ;
  }).prototype = graphic_state.PdfGraphicStates.prototype;
  dart.addTypeTests(graphic_state.PdfGraphicStates);
  dart.addTypeCaches(graphic_state.PdfGraphicStates);
  dart.setMethodSignature(graphic_state.PdfGraphicStates, () => ({
    __proto__: dart.getMethods(graphic_state.PdfGraphicStates.__proto__),
    stateName: dart.fnType(dart.legacy(core.String), [dart.legacy(graphic_state.PdfGraphicState)])
  }));
  dart.setLibraryUri(graphic_state.PdfGraphicStates, L28);
  dart.setFieldSignature(graphic_state.PdfGraphicStates, () => ({
    __proto__: dart.getFields(graphic_state.PdfGraphicStates.__proto__),
    [_states]: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(graphic_state.PdfGraphicState))))
  }));
  dart.defineLazy(graphic_state.PdfGraphicStates, {
    /*graphic_state.PdfGraphicStates._prefix*/get _prefix() {
      return "/a";
    }
  }, true);
  var cmap = dart.privateName(unicode_cmap, "PdfUnicodeCmap.cmap");
  var protect$ = dart.privateName(unicode_cmap, "PdfUnicodeCmap.protect");
  unicode_cmap.PdfUnicodeCmap = class PdfUnicodeCmap extends object_stream.PdfObjectStream {
    get cmap() {
      return this[cmap];
    }
    set cmap(value) {
      super.cmap = value;
    }
    get protect() {
      return this[protect$];
    }
    set protect(value) {
      super.protect = value;
    }
    prepare() {
      if (dart.test(this.protect)) {
        this.cmap[$fillRange](1, this.cmap[$length], 32);
      }
      this.buf.putString("/CIDInit/ProcSet findresource begin\n" + "12 dict begin\n" + "begincmap\n" + "/CIDSystemInfo<<\n" + "/Registry (Adobe)\n" + "/Ordering (UCS)\n" + "/Supplement 0\n" + ">> def\n" + "/CMapName/Adobe-Identity-UCS def\n" + "/CMapType 2 def\n" + "1 begincodespacerange\n" + "<0000> <FFFF>\n" + "endcodespacerange\n" + dart.str(this.cmap[$length]) + " beginbfchar\n");
      for (let key = 0; key < dart.notNull(this.cmap[$length]); key = key + 1) {
        let value = this.cmap[$_get](key);
        this.buf.putString("<" + key[$toRadixString](16)[$toUpperCase]()[$padLeft](4, "0") + "> <" + value[$toRadixString](16)[$toUpperCase]()[$padLeft](4, "0") + ">\n");
      }
      this.buf.putString("endbfchar\n" + "endcmap\n" + "CMapName currentdict /CMap defineresource pop\n" + "end\n" + "end");
      super.prepare();
    }
  };
  (unicode_cmap.PdfUnicodeCmap.new = function(pdfDocument, protect) {
    this[cmap] = JSArrayOfintL().of([0]);
    this[protect$] = protect;
    unicode_cmap.PdfUnicodeCmap.__proto__.new.call(this, pdfDocument);
    ;
  }).prototype = unicode_cmap.PdfUnicodeCmap.prototype;
  dart.addTypeTests(unicode_cmap.PdfUnicodeCmap);
  dart.addTypeCaches(unicode_cmap.PdfUnicodeCmap);
  dart.setLibraryUri(unicode_cmap.PdfUnicodeCmap, L29);
  dart.setFieldSignature(unicode_cmap.PdfUnicodeCmap, () => ({
    __proto__: dart.getFields(unicode_cmap.PdfUnicodeCmap.__proto__),
    cmap: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.int)))),
    protect: dart.finalFieldType(dart.legacy(core.bool))
  }));
  var C166;
  var C167;
  var file$ = dart.privateName(font_descriptor, "PdfFontDescriptor.file");
  var ttfFont$ = dart.privateName(font_descriptor, "PdfFontDescriptor.ttfFont");
  font_descriptor.PdfFontDescriptor = class PdfFontDescriptor extends object.PdfObject {
    get file() {
      return this[file$];
    }
    set file(value) {
      super.file = value;
    }
    get ttfFont() {
      return this[ttfFont$];
    }
    set ttfFont(value) {
      super.ttfFont = value;
    }
    prepare() {
      super.prepare();
      this.params._set("/FontName", new data_types.PdfName.new("/" + dart.notNull(this.ttfFont.fontName)));
      this.params._set("/FontFile2", this.file.ref());
      this.params._set("/Flags", new data_types.PdfNum.new(dart.test(this.ttfFont.font.unicode) ? 4 : 32));
      this.params._set("/FontBBox", data_types.PdfArray.fromNum(JSArrayOfintL().of([(dart.notNull(this.ttfFont.font.xMin) / dart.notNull(this.ttfFont.font.unitsPerEm) * 1000)[$toInt](), (dart.notNull(this.ttfFont.font.yMin) / dart.notNull(this.ttfFont.font.unitsPerEm) * 1000)[$toInt](), (dart.notNull(this.ttfFont.font.xMax) / dart.notNull(this.ttfFont.font.unitsPerEm) * 1000)[$toInt](), (dart.notNull(this.ttfFont.font.yMax) / dart.notNull(this.ttfFont.font.unitsPerEm) * 1000)[$toInt]()])));
      this.params._set("/Ascent", new data_types.PdfNum.new((dart.notNull(this.ttfFont.ascent) * 1000)[$toInt]()));
      this.params._set("/Descent", new data_types.PdfNum.new((dart.notNull(this.ttfFont.descent) * 1000)[$toInt]()));
      this.params._set("/ItalicAngle", C146 || CT.C146);
      this.params._set("/CapHeight", C166 || CT.C166);
      this.params._set("/StemV", C167 || CT.C167);
    }
  };
  (font_descriptor.PdfFontDescriptor.new = function(ttfFont, file) {
    this[ttfFont$] = ttfFont;
    this[file$] = file;
    if (!(ttfFont != null)) dart.assertFailed(null, L30, 28, 16, "ttfFont != null");
    if (!(file != null)) dart.assertFailed(null, L30, 29, 16, "file != null");
    font_descriptor.PdfFontDescriptor.__proto__.new.call(this, ttfFont.pdfDocument, {type: "/FontDescriptor"});
    ;
  }).prototype = font_descriptor.PdfFontDescriptor.prototype;
  dart.addTypeTests(font_descriptor.PdfFontDescriptor);
  dart.addTypeCaches(font_descriptor.PdfFontDescriptor);
  dart.setLibraryUri(font_descriptor.PdfFontDescriptor, L31);
  dart.setFieldSignature(font_descriptor.PdfFontDescriptor, () => ({
    __proto__: dart.getFields(font_descriptor.PdfFontDescriptor.__proto__),
    file: dart.finalFieldType(dart.legacy(object_stream.PdfObjectStream)),
    ttfFont: dart.finalFieldType(dart.legacy(ttffont.PdfTtfFont))
  }));
  var array$0 = dart.privateName(array$, "PdfArrayObject.array");
  array$.PdfArrayObject = class PdfArrayObject extends object.PdfObject {
    get array() {
      return this[array$0];
    }
    set array(value) {
      super.array = value;
    }
    writeContent(os) {
      super.writeContent(os);
      this.array.output(os);
      os.putBytes(JSArrayOfintL().of([10]));
    }
  };
  (array$.PdfArrayObject.new = function(pdfDocument, array) {
    this[array$0] = array;
    if (!(array != null)) dart.assertFailed(null, L32, 28, 16, "array != null");
    array$.PdfArrayObject.__proto__.new.call(this, pdfDocument);
    ;
  }).prototype = array$.PdfArrayObject.prototype;
  dart.addTypeTests(array$.PdfArrayObject);
  dart.addTypeCaches(array$.PdfArrayObject);
  dart.setLibraryUri(array$.PdfArrayObject, L33);
  dart.setFieldSignature(array$.PdfArrayObject, () => ({
    __proto__: dart.getFields(array$.PdfArrayObject.__proto__),
    array: dart.finalFieldType(dart.legacy(data_types.PdfArray))
  }));
  var _buildTrueType = dart.privateName(ttffont, "_buildTrueType");
  var C168;
  var C169;
  var C170;
  var C171;
  var C172;
  var _buildType0 = dart.privateName(ttffont, "_buildType0");
  var C173;
  var C174;
  var subtype$ = dart.privateName(font, "PdfFont.subtype");
  font.PdfFont = class PdfFont extends object.PdfObject {
    get subtype() {
      return this[subtype$];
    }
    set subtype(value) {
      super.subtype = value;
    }
    static courier(pdfDocument) {
      return new type1_font.PdfType1Font.create(pdfDocument, "Courier", 0.91, -0.22, C173 || CT.C173);
    }
    static courierBold(pdfDocument) {
      return new type1_font.PdfType1Font.create(pdfDocument, "Courier-Bold", 0.91, -0.22, C173 || CT.C173);
    }
    static courierBoldOblique(pdfDocument) {
      return new type1_font.PdfType1Font.create(pdfDocument, "Courier-BoldOblique", 0.91, -0.22, C173 || CT.C173);
    }
    static courierOblique(pdfDocument) {
      return new type1_font.PdfType1Font.create(pdfDocument, "Courier-Oblique", 0.91, -0.22, C173 || CT.C173);
    }
    static helvetica(pdfDocument) {
      return new type1_font.PdfType1Font.create(pdfDocument, "Helvetica", 0.931, -0.225, type1_fonts.helveticaWidths);
    }
    static helveticaBold(pdfDocument) {
      return new type1_font.PdfType1Font.create(pdfDocument, "Helvetica-Bold", 0.962, -0.228, type1_fonts.helveticaBoldWidths);
    }
    static helveticaBoldOblique(pdfDocument) {
      return new type1_font.PdfType1Font.create(pdfDocument, "Helvetica-BoldOblique", 0.962, -0.228, type1_fonts.helveticaBoldObliqueWidths);
    }
    static helveticaOblique(pdfDocument) {
      return new type1_font.PdfType1Font.create(pdfDocument, "Helvetica-Oblique", 0.931, -0.225, type1_fonts.helveticaObliqueWidths);
    }
    static times(pdfDocument) {
      return new type1_font.PdfType1Font.create(pdfDocument, "Times-Roman", 0.898, -0.218, type1_fonts.timesWidths);
    }
    static timesBold(pdfDocument) {
      return new type1_font.PdfType1Font.create(pdfDocument, "Times-Bold", 0.935, -0.218, type1_fonts.timesBoldWidths);
    }
    static timesBoldItalic(pdfDocument) {
      return new type1_font.PdfType1Font.create(pdfDocument, "Times-BoldItalic", 0.921, -0.218, type1_fonts.timesBoldItalicWidths);
    }
    static timesItalic(pdfDocument) {
      return new type1_font.PdfType1Font.create(pdfDocument, "Times-Italic", 0.883, -0.217, type1_fonts.timesItalicWidths);
    }
    static symbol(pdfDocument) {
      return new type1_font.PdfType1Font.create(pdfDocument, "Symbol", 1.01, -0.293, type1_fonts.symbolWidths);
    }
    static zapfDingbats(pdfDocument) {
      return new type1_font.PdfType1Font.create(pdfDocument, "ZapfDingbats", 0.82, -0.143, type1_fonts.zapfDingbatsWidths);
    }
    get name() {
      return "/F" + dart.str(this.objser);
    }
    get fontName() {
      return null;
    }
    get ascent() {
      return null;
    }
    get descent() {
      return null;
    }
    prepare() {
      super.prepare();
      this.params._set("/Subtype", new data_types.PdfName.new(this.subtype));
      this.params._set("/Name", new data_types.PdfName.new(this.name));
      this.params._set("/Encoding", C174 || CT.C174);
    }
    stringMetrics(s, opts) {
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : 0;
      if (s[$isEmpty]) {
        return font_metrics.PdfFontMetrics.zero;
      }
      try {
        let chars = convert.latin1.encode(s);
        let metrics = chars[$map](PdfFontMetricsL(), dart.bind(this, 'glyphMetrics'));
        return font_metrics.PdfFontMetrics.append(metrics, {letterSpacing: letterSpacing});
      } catch (e) {
        let _ = dart.getThrown(e);
        if (!dart.test(dart.fn(() => {
          core.print(font.PdfFont._cannotDecodeMessage);
          return true;
        }, VoidToboolL())())) dart.assertFailed(null, L34, 178, 14, "() {\n        print(_cannotDecodeMessage);\n        return true;\n      }()");
        dart.rethrow(e);
      }
    }
    stringSize(s) {
      let metrics = this.stringMetrics(s);
      return new point.PdfPoint.new(metrics.width, metrics.height);
    }
    toString() {
      return "Font(" + dart.str(this.fontName) + ")";
    }
    putText(stream, text) {
      try {
        new data_types.PdfString.new(convert.latin1.encode(text), data_types.PdfStringFormat.litteral).output(stream);
      } catch (e) {
        let _ = dart.getThrown(e);
        if (!dart.test(dart.fn(() => {
          core.print(font.PdfFont._cannotDecodeMessage);
          return true;
        }, VoidToboolL())())) dart.assertFailed(null, L34, 201, 14, "() {\n        print(_cannotDecodeMessage);\n        return true;\n      }()");
        dart.rethrow(e);
      }
    }
  };
  (font.PdfFont.create = function(pdfDocument, opts) {
    let subtype = opts && 'subtype' in opts ? opts.subtype : null;
    this[subtype$] = subtype;
    if (!(subtype != null)) dart.assertFailed(null, L34, 35, 16, "subtype != null");
    font.PdfFont.__proto__.new.call(this, pdfDocument, {type: "/Font"});
    pdfDocument.fonts.add(this);
  }).prototype = font.PdfFont.prototype;
  dart.addTypeTests(font.PdfFont);
  dart.addTypeCaches(font.PdfFont);
  dart.setMethodSignature(font.PdfFont, () => ({
    __proto__: dart.getMethods(font.PdfFont.__proto__),
    stringMetrics: dart.fnType(dart.legacy(font_metrics.PdfFontMetrics), [dart.legacy(core.String)], {letterSpacing: dart.legacy(core.double)}, {}),
    stringSize: dart.fnType(dart.legacy(point.PdfPoint), [dart.legacy(core.String)]),
    putText: dart.fnType(dart.void, [dart.legacy(stream.PdfStream), dart.legacy(core.String)])
  }));
  dart.setGetterSignature(font.PdfFont, () => ({
    __proto__: dart.getGetters(font.PdfFont.__proto__),
    name: dart.legacy(core.String),
    fontName: dart.legacy(core.String),
    ascent: dart.legacy(core.double),
    descent: dart.legacy(core.double)
  }));
  dart.setLibraryUri(font.PdfFont, L35);
  dart.setFieldSignature(font.PdfFont, () => ({
    __proto__: dart.getFields(font.PdfFont.__proto__),
    subtype: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(font.PdfFont, ['toString']);
  dart.defineLazy(font.PdfFont, {
    /*font.PdfFont._cannotDecodeMessage*/get _cannotDecodeMessage() {
      return "---------------------------------------------\nCannot decode the string to Latin1.\nThis font does not support Unicode characters.\nIf you want to use strings other than Latin strings, use a TrueType (TTF) font instead.\nSee https://github.com/DavBfr/dart_pdf/wiki/Fonts-Management\n---------------------------------------------";
    },
    /*font.PdfFont.defaultGlyphWidth*/get defaultGlyphWidth() {
      return 0.6;
    }
  }, true);
  var unicodeCMap = dart.privateName(ttffont, "PdfTtfFont.unicodeCMap");
  var descriptor = dart.privateName(ttffont, "PdfTtfFont.descriptor");
  var file = dart.privateName(ttffont, "PdfTtfFont.file");
  var widthsObject = dart.privateName(ttffont, "PdfTtfFont.widthsObject");
  var font$ = dart.privateName(ttffont, "PdfTtfFont.font");
  ttffont.PdfTtfFont = class PdfTtfFont extends font.PdfFont {
    get unicodeCMap() {
      return this[unicodeCMap];
    }
    set unicodeCMap(value) {
      this[unicodeCMap] = value;
    }
    get descriptor() {
      return this[descriptor];
    }
    set descriptor(value) {
      this[descriptor] = value;
    }
    get file() {
      return this[file];
    }
    set file(value) {
      this[file] = value;
    }
    get widthsObject() {
      return this[widthsObject];
    }
    set widthsObject(value) {
      this[widthsObject] = value;
    }
    get font() {
      return this[font$];
    }
    set font(value) {
      super.font = value;
    }
    get subtype() {
      return dart.test(this.font.unicode) ? "/Type0" : super.subtype;
    }
    get fontName() {
      return this.font.fontName;
    }
    get ascent() {
      return this.font.ascent[$toDouble]() / dart.notNull(this.font.unitsPerEm);
    }
    get descent() {
      return this.font.descent[$toDouble]() / dart.notNull(this.font.unitsPerEm);
    }
    get unitsPerEm() {
      return this.font.unitsPerEm;
    }
    glyphMetrics(charCode) {
      let t2, t2$;
      let g = this.font.charToGlyphIndexMap[$_get](charCode);
      if (g == null) {
        return font_metrics.PdfFontMetrics.zero;
      }
      if (dart.test(arabic.PdfArabic.isArabicDiacriticValue(charCode))) {
        let metric = (t2 = this.font.glyphInfoMap[$_get](g), t2 == null ? font_metrics.PdfFontMetrics.zero : t2);
        return metric.copyWith({advanceWidth: 0.0});
      }
      t2$ = this.font.glyphInfoMap[$_get](g);
      return t2$ == null ? font_metrics.PdfFontMetrics.zero : t2$;
    }
    [_buildTrueType](params) {
      let charMin = null;
      let charMax = null;
      this.file.buf.putBytes(this.font.bytes.buffer[$asUint8List]());
      this.file.params._set("/Length1", new data_types.PdfNum.new(this.font.bytes.lengthInBytes));
      params._set("/BaseFont", new data_types.PdfName.new("/" + dart.notNull(this.fontName)));
      params._set("/FontDescriptor", this.descriptor.ref());
      charMin = 32;
      charMax = 255;
      for (let i = charMin; dart.notNull(i) <= dart.notNull(charMax); i = dart.notNull(i) + 1) {
        this.widthsObject.array.add(new data_types.PdfNum.new((dart.notNull(this.glyphMetrics(i).advanceWidth) * 1000.0)[$toInt]()));
      }
      params._set("/FirstChar", new data_types.PdfNum.new(charMin));
      params._set("/LastChar", new data_types.PdfNum.new(charMax));
      params._set("/Widths", this.widthsObject.ref());
    }
    [_buildType0](params) {
      let charMin = null;
      let charMax = null;
      let ttfWriter = new ttf_writer.TtfWriter.new(this.font);
      let data = ttfWriter.withChars(this.unicodeCMap.cmap);
      this.file.buf.putBytes(data);
      this.file.params._set("/Length1", new data_types.PdfNum.new(data[$length]));
      let descendantFont = new data_types.PdfDict.new(new (IdentityMapOfStringL$PdfDataTypeL()).from(["/Type", C168 || CT.C168, "/BaseFont", new data_types.PdfName.new("/" + dart.notNull(this.fontName)), "/FontFile2", this.file.ref(), "/FontDescriptor", this.descriptor.ref(), "/W", new data_types.PdfArray.new(JSArrayOfPdfDataTypeL().of([C146 || CT.C146, this.widthsObject.ref()])), "/CIDToGIDMap", C169 || CT.C169, "/DW", C170 || CT.C170, "/Subtype", C171 || CT.C171, "/CIDSystemInfo", new data_types.PdfDict.new(new (IdentityMapOfStringL$PdfDataTypeL()).from(["/Supplement", C146 || CT.C146, "/Registry", data_types.PdfSecString.fromString(this, "Adobe"), "/Ordering", data_types.PdfSecString.fromString(this, "Identity-H")]))]));
      params._set("/BaseFont", new data_types.PdfName.new("/" + dart.notNull(this.fontName)));
      params._set("/Encoding", C172 || CT.C172);
      params._set("/DescendantFonts", new data_types.PdfArray.new(JSArrayOfPdfDataTypeL().of([descendantFont])));
      params._set("/ToUnicode", this.unicodeCMap.ref());
      charMin = 0;
      charMax = dart.notNull(this.unicodeCMap.cmap[$length]) - 1;
      for (let i = charMin; dart.notNull(i) <= dart.notNull(charMax); i = dart.notNull(i) + 1) {
        this.widthsObject.array.add(new data_types.PdfNum.new((dart.notNull(this.glyphMetrics(this.unicodeCMap.cmap[$_get](i)).advanceWidth) * 1000.0)[$toInt]()));
      }
    }
    prepare() {
      super.prepare();
      if (dart.test(this.font.unicode)) {
        this[_buildType0](this.params);
      } else {
        this[_buildTrueType](this.params);
      }
    }
    putText(stream, text) {
      if (!dart.test(this.font.unicode)) {
        super.putText(stream, text);
      }
      let runes = text[$runes];
      stream.putByte(60);
      for (let rune of runes) {
        let char = this.unicodeCMap.cmap[$indexOf](rune);
        if (char === -1) {
          char = this.unicodeCMap.cmap[$length];
          this.unicodeCMap.cmap[$add](rune);
        }
        stream.putBytes(convert.latin1.encode(char[$toRadixString](16)[$padLeft](4, "0")));
      }
      stream.putByte(62);
    }
    stringMetrics(s, opts) {
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : 0;
      if (s[$isEmpty] || !dart.test(this.font.unicode)) {
        return super.stringMetrics(s, {letterSpacing: letterSpacing});
      }
      let runes = s[$runes];
      let bytes = JSArrayOfintL().of([]);
      runes[$forEach](dart.bind(bytes, $add));
      let metrics = bytes[$map](PdfFontMetricsL(), dart.bind(this, 'glyphMetrics'));
      return font_metrics.PdfFontMetrics.append(metrics, {letterSpacing: letterSpacing});
    }
  };
  (ttffont.PdfTtfFont.new = function(pdfDocument, bytes, opts) {
    let protect = opts && 'protect' in opts ? opts.protect : false;
    this[unicodeCMap] = null;
    this[descriptor] = null;
    this[file] = null;
    this[widthsObject] = null;
    this[font$] = new ttf_parser.TtfParser.new(bytes);
    ttffont.PdfTtfFont.__proto__.create.call(this, pdfDocument, {subtype: "/TrueType"});
    this.file = new object_stream.PdfObjectStream.new(pdfDocument, {isBinary: true});
    this.unicodeCMap = new unicode_cmap.PdfUnicodeCmap.new(pdfDocument, protect);
    this.descriptor = new font_descriptor.PdfFontDescriptor.new(this, this.file);
    this.widthsObject = new array$.PdfArrayObject.new(pdfDocument, new data_types.PdfArray.new());
  }).prototype = ttffont.PdfTtfFont.prototype;
  dart.addTypeTests(ttffont.PdfTtfFont);
  dart.addTypeCaches(ttffont.PdfTtfFont);
  dart.setMethodSignature(ttffont.PdfTtfFont, () => ({
    __proto__: dart.getMethods(ttffont.PdfTtfFont.__proto__),
    glyphMetrics: dart.fnType(dart.legacy(font_metrics.PdfFontMetrics), [dart.legacy(core.int)]),
    [_buildTrueType]: dart.fnType(dart.void, [dart.legacy(data_types.PdfDict)]),
    [_buildType0]: dart.fnType(dart.void, [dart.legacy(data_types.PdfDict)])
  }));
  dart.setGetterSignature(ttffont.PdfTtfFont, () => ({
    __proto__: dart.getGetters(ttffont.PdfTtfFont.__proto__),
    subtype: dart.legacy(core.String),
    unitsPerEm: dart.legacy(core.int)
  }));
  dart.setLibraryUri(ttffont.PdfTtfFont, L36);
  dart.setFieldSignature(ttffont.PdfTtfFont, () => ({
    __proto__: dart.getFields(ttffont.PdfTtfFont.__proto__),
    unicodeCMap: dart.fieldType(dart.legacy(unicode_cmap.PdfUnicodeCmap)),
    descriptor: dart.fieldType(dart.legacy(font_descriptor.PdfFontDescriptor)),
    file: dart.fieldType(dart.legacy(object_stream.PdfObjectStream)),
    widthsObject: dart.fieldType(dart.legacy(array$.PdfArrayObject)),
    font: dart.finalFieldType(dart.legacy(ttf_parser.TtfParser))
  }));
  var fontName$ = dart.privateName(type1_font, "PdfType1Font.fontName");
  var ascent$ = dart.privateName(type1_font, "PdfType1Font.ascent");
  var descent$ = dart.privateName(type1_font, "PdfType1Font.descent");
  var widths$ = dart.privateName(type1_font, "PdfType1Font.widths");
  type1_font.PdfType1Font = class PdfType1Font extends font.PdfFont {
    get fontName() {
      return this[fontName$];
    }
    set fontName(value) {
      super.fontName = value;
    }
    get ascent() {
      return this[ascent$];
    }
    set ascent(value) {
      super.ascent = value;
    }
    get descent() {
      return this[descent$];
    }
    set descent(value) {
      super.descent = value;
    }
    get widths() {
      return this[widths$];
    }
    set widths(value) {
      super.widths = value;
    }
    get unitsPerEm() {
      return 1000;
    }
    prepare() {
      super.prepare();
      this.params._set("/BaseFont", new data_types.PdfName.new("/" + dart.notNull(this.fontName)));
    }
    glyphMetrics(charCode) {
      return new font_metrics.PdfFontMetrics.new({left: 0.0, top: this.descent, right: dart.notNull(charCode) < dart.notNull(this.widths[$length]) ? this.widths[$_get](charCode) : 0.6, bottom: this.ascent});
    }
  };
  (type1_font.PdfType1Font.create = function(pdfDocument, fontName, ascent, descent, widths) {
    this[fontName$] = fontName;
    this[ascent$] = ascent;
    this[descent$] = descent;
    this[widths$] = widths;
    if (!dart.test(dart.fn(() => {
      core.print(dart.str(fontName) + " has no Unicode support see https://github.com/DavBfr/dart_pdf/wiki/Fonts-Management");
      return true;
    }, VoidToboolL())())) dart.assertFailed(null, L37, 35, 16, "() {\n          print(\n              '$fontName has no Unicode support see https://github.com/DavBfr/dart_pdf/wiki/Fonts-Management');\n          return true;\n        }()");
    type1_font.PdfType1Font.__proto__.create.call(this, pdfDocument, {subtype: "/Type1"});
    ;
  }).prototype = type1_font.PdfType1Font.prototype;
  dart.addTypeTests(type1_font.PdfType1Font);
  dart.addTypeCaches(type1_font.PdfType1Font);
  dart.setMethodSignature(type1_font.PdfType1Font, () => ({
    __proto__: dart.getMethods(type1_font.PdfType1Font.__proto__),
    glyphMetrics: dart.fnType(dart.legacy(font_metrics.PdfFontMetrics), [dart.legacy(core.int)])
  }));
  dart.setGetterSignature(type1_font.PdfType1Font, () => ({
    __proto__: dart.getGetters(type1_font.PdfType1Font.__proto__),
    unitsPerEm: dart.legacy(core.int)
  }));
  dart.setLibraryUri(type1_font.PdfType1Font, L38);
  dart.setFieldSignature(type1_font.PdfType1Font, () => ({
    __proto__: dart.getFields(type1_font.PdfType1Font.__proto__),
    fontName: dart.finalFieldType(dart.legacy(core.String)),
    ascent: dart.finalFieldType(dart.legacy(core.double)),
    descent: dart.finalFieldType(dart.legacy(core.double)),
    widths: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.double))))
  }));
  var C176;
  var C177;
  var C178;
  var C179;
  var C175;
  var C180;
  var C181;
  var isolatedTransparency = dart.privateName(graphic_stream, "PdfGraphicStream.isolatedTransparency");
  var knockoutTransparency = dart.privateName(graphic_stream, "PdfGraphicStream.knockoutTransparency");
  var fonts = dart.privateName(graphic_stream, "PdfGraphicStream.fonts");
  var shading$0 = dart.privateName(graphic_stream, "PdfGraphicStream.shading");
  var patterns = dart.privateName(graphic_stream, "PdfGraphicStream.patterns");
  var xObjects = dart.privateName(graphic_stream, "PdfGraphicStream.xObjects");
  graphic_stream.PdfGraphicStream = class PdfGraphicStream extends object.PdfObject {};
  graphic_stream.PdfGraphicStream[dart.mixinOn] = PdfObject => class PdfGraphicStream extends PdfObject {
    get isolatedTransparency() {
      return this[isolatedTransparency];
    }
    set isolatedTransparency(value) {
      this[isolatedTransparency] = value;
    }
    get knockoutTransparency() {
      return this[knockoutTransparency];
    }
    set knockoutTransparency(value) {
      this[knockoutTransparency] = value;
    }
    get fonts() {
      return this[fonts];
    }
    set fonts(value) {
      super.fonts = value;
    }
    get shading() {
      return this[shading$0];
    }
    set shading(value) {
      super.shading = value;
    }
    get patterns() {
      return this[patterns];
    }
    set patterns(value) {
      super.patterns = value;
    }
    get xObjects() {
      return this[xObjects];
    }
    set xObjects(value) {
      super.xObjects = value;
    }
    addFont(font) {
      if (!dart.test(this.fonts[$containsKey](font.name))) {
        this.fonts[$_set](font.name, font);
      }
    }
    addShader(shader) {
      if (!dart.test(this.shading[$containsKey](shader.name))) {
        this.shading[$_set](shader.name, shader);
      }
    }
    addPattern(pattern) {
      if (!dart.test(this.patterns[$containsKey](pattern.name))) {
        this.patterns[$_set](pattern.name, pattern);
      }
    }
    addXObject(object) {
      if (!dart.test(this.xObjects[$containsKey](object.name))) {
        this.xObjects[$_set](object.name, object);
      }
    }
    getDefaultFont() {
      if (dart.test(this.pdfDocument.fonts[$isEmpty])) {
        font.PdfFont.helvetica(this.pdfDocument);
      }
      return this.pdfDocument.fonts[$elementAt](0);
    }
    stateName(state) {
      return this.pdfDocument.graphicStates.stateName(state);
    }
    prepare() {
      super.prepare();
      let resources = new data_types.PdfDict.new();
      resources._set("/ProcSet", new data_types.PdfArray.new(C175 || CT.C175));
      if (dart.test(this.fonts[$isNotEmpty])) {
        resources._set("/Font", data_types.PdfDict.fromObjectMap(this.fonts));
      }
      if (dart.test(this.shading[$isNotEmpty])) {
        resources._set("/Shading", data_types.PdfDict.fromObjectMap(this.shading));
      }
      if (dart.test(this.patterns[$isNotEmpty])) {
        resources._set("/Pattern", data_types.PdfDict.fromObjectMap(this.patterns));
      }
      if (dart.test(this.xObjects[$isNotEmpty])) {
        resources._set("/XObject", data_types.PdfDict.fromObjectMap(this.xObjects));
      }
      if (dart.test(this.pdfDocument.hasGraphicStates)) {
        this.params._set("/Group", new data_types.PdfDict.new(new (IdentityMapOfStringL$PdfDataTypeL()).from(["/Type", C180 || CT.C180, "/S", C181 || CT.C181, "/CS", C19 || CT.C19, "/I", new data_types.PdfBool.new(this.isolatedTransparency), "/K", new data_types.PdfBool.new(this.knockoutTransparency)])));
        resources._set("/ExtGState", this.pdfDocument.graphicStates.ref());
      }
      if (dart.test(this.params.containsKey("/Resources"))) {
        let res = this.params._get("/Resources");
        if (PdfDictL().is(res)) {
          res.merge(resources);
          return;
        }
      }
      this.params._set("/Resources", resources);
    }
  };
  (graphic_stream.PdfGraphicStream[dart.mixinNew] = function() {
    this[isolatedTransparency] = false;
    this[knockoutTransparency] = false;
    this[fonts] = new (IdentityMapOfStringL$PdfFontL()).new();
    this[shading$0] = new (IdentityMapOfStringL$PdfShadingL()).new();
    this[patterns] = new (IdentityMapOfStringL$PdfPatternL()).new();
    this[xObjects] = new (IdentityMapOfStringL$PdfXObjectL()).new();
  }).prototype = graphic_stream.PdfGraphicStream.prototype;
  dart.addTypeTests(graphic_stream.PdfGraphicStream);
  dart.addTypeCaches(graphic_stream.PdfGraphicStream);
  graphic_stream.PdfGraphicStream[dart.implements] = () => [object.PdfObject];
  dart.setMethodSignature(graphic_stream.PdfGraphicStream, () => ({
    __proto__: dart.getMethods(graphic_stream.PdfGraphicStream.__proto__),
    addFont: dart.fnType(dart.void, [dart.legacy(font.PdfFont)]),
    addShader: dart.fnType(dart.void, [dart.legacy(shading.PdfShading)]),
    addPattern: dart.fnType(dart.void, [dart.legacy(pattern.PdfPattern)]),
    addXObject: dart.fnType(dart.void, [dart.legacy(xobject.PdfXObject)]),
    getDefaultFont: dart.fnType(dart.legacy(font.PdfFont), []),
    stateName: dart.fnType(dart.legacy(core.String), [dart.legacy(graphic_state.PdfGraphicState)])
  }));
  dart.setLibraryUri(graphic_stream.PdfGraphicStream, L39);
  dart.setFieldSignature(graphic_stream.PdfGraphicStream, () => ({
    __proto__: dart.getFields(graphic_stream.PdfGraphicStream.__proto__),
    isolatedTransparency: dart.fieldType(dart.legacy(core.bool)),
    knockoutTransparency: dart.fieldType(dart.legacy(core.bool)),
    fonts: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(font.PdfFont)))),
    shading: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(shading.PdfShading)))),
    patterns: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(pattern.PdfPattern)))),
    xObjects: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(xobject.PdfXObject))))
  }));
  const PdfXObject_PdfGraphicStream$36 = class PdfXObject_PdfGraphicStream extends xobject.PdfXObject {};
  (PdfXObject_PdfGraphicStream$36.new = function(pdfDocument, subtype, opts) {
    graphic_stream.PdfGraphicStream[dart.mixinNew].call(this);
    PdfXObject_PdfGraphicStream$36.__proto__.new.call(this, pdfDocument, subtype, opts);
  }).prototype = PdfXObject_PdfGraphicStream$36.prototype;
  dart.applyMixin(PdfXObject_PdfGraphicStream$36, graphic_stream.PdfGraphicStream);
  graphic_stream.PdfGraphicXObject = class PdfGraphicXObject extends PdfXObject_PdfGraphicStream$36 {};
  (graphic_stream.PdfGraphicXObject.new = function(pdfDocument, subtype = null) {
    graphic_stream.PdfGraphicXObject.__proto__.new.call(this, pdfDocument, subtype);
    ;
  }).prototype = graphic_stream.PdfGraphicXObject.prototype;
  dart.addTypeTests(graphic_stream.PdfGraphicXObject);
  dart.addTypeCaches(graphic_stream.PdfGraphicXObject);
  dart.setLibraryUri(graphic_stream.PdfGraphicXObject, L39);
  var PdfPageFormat_marginRight = dart.privateName(page_format, "PdfPageFormat.marginRight");
  var PdfPageFormat_marginLeft = dart.privateName(page_format, "PdfPageFormat.marginLeft");
  var PdfPageFormat_marginBottom = dart.privateName(page_format, "PdfPageFormat.marginBottom");
  var PdfPageFormat_marginTop = dart.privateName(page_format, "PdfPageFormat.marginTop");
  var PdfPageFormat_height = dart.privateName(page_format, "PdfPageFormat.height");
  var PdfPageFormat_width = dart.privateName(page_format, "PdfPageFormat.width");
  var C182;
  var pageFormat$ = dart.privateName(page, "PdfPage.pageFormat");
  var contents = dart.privateName(page, "PdfPage.contents");
  var annotations = dart.privateName(page, "PdfPage.annotations");
  const PdfObject_PdfGraphicStream$36 = class PdfObject_PdfGraphicStream extends object.PdfObject {};
  (PdfObject_PdfGraphicStream$36.new = function(pdfDocument, opts) {
    graphic_stream.PdfGraphicStream[dart.mixinNew].call(this);
    PdfObject_PdfGraphicStream$36.__proto__.new.call(this, pdfDocument, opts);
  }).prototype = PdfObject_PdfGraphicStream$36.prototype;
  dart.applyMixin(PdfObject_PdfGraphicStream$36, graphic_stream.PdfGraphicStream);
  page.PdfPage = class PdfPage extends PdfObject_PdfGraphicStream$36 {
    get pageFormat() {
      return this[pageFormat$];
    }
    set pageFormat(value) {
      this[pageFormat$] = value;
    }
    get contents() {
      return this[contents];
    }
    set contents(value) {
      this[contents] = value;
    }
    get annotations() {
      return this[annotations];
    }
    set annotations(value) {
      this[annotations] = value;
    }
    getGraphics() {
      let stream = new object_stream.PdfObjectStream.new(this.pdfDocument);
      let g = new graphics.PdfGraphics.new(this, stream.buf);
      this.contents[$add](stream);
      return g;
    }
    addAnnotation(ob) {
      this.annotations[$add](PdfAnnotL().as(ob));
    }
    prepare() {
      super.prepare();
      this.params._set("/Parent", this.pdfDocument.pdfPageList.ref());
      this.params._set("/MediaBox", data_types.PdfArray.fromNum(JSArrayOfdoubleL().of([0.0, 0.0, this.pageFormat.width, this.pageFormat.height])));
      if (dart.test(this.contents[$isNotEmpty])) {
        let contentList = data_types.PdfArray.fromObjects(this.contents);
        if (dart.test(this.params.containsKey("/Contents"))) {
          let prevContent = this.params._get("/Contents");
          if (PdfArrayL().is(prevContent)) {
            contentList.values[$insertAll](0, prevContent.values);
          } else {
            contentList.values[$insert](0, prevContent);
          }
        }
        contentList.uniq();
        if (contentList.values[$length] === 1) {
          this.params._set("/Contents", contentList.values[$first]);
        } else {
          this.params._set("/Contents", contentList);
        }
      }
      if (dart.test(this.annotations[$isNotEmpty])) {
        if (dart.test(this.params.containsKey("/Annots"))) {
          let annotsList = this.params._get("/Annots");
          if (PdfArrayL().is(annotsList)) {
            annotsList.values[$addAll](data_types.PdfArray.fromObjects(this.annotations).values);
          }
        } else {
          this.params._set("/Annots", data_types.PdfArray.fromObjects(this.annotations));
        }
      }
    }
  };
  (page.PdfPage.new = function(pdfDocument, opts) {
    let pageFormat = opts && 'pageFormat' in opts ? opts.pageFormat : C182 || CT.C182;
    let index = opts && 'index' in opts ? opts.index : null;
    this[contents] = JSArrayOfPdfObjectStreamL().of([]);
    this[annotations] = JSArrayOfPdfAnnotL().of([]);
    this[pageFormat$] = pageFormat;
    page.PdfPage.__proto__.new.call(this, pdfDocument, {type: "/Page"});
    if (index != null) {
      pdfDocument.pdfPageList.pages[$insert](index, this);
    } else {
      pdfDocument.pdfPageList.pages[$add](this);
    }
  }).prototype = page.PdfPage.prototype;
  dart.addTypeTests(page.PdfPage);
  dart.addTypeCaches(page.PdfPage);
  dart.setMethodSignature(page.PdfPage, () => ({
    __proto__: dart.getMethods(page.PdfPage.__proto__),
    getGraphics: dart.fnType(dart.legacy(graphics.PdfGraphics), []),
    addAnnotation: dart.fnType(dart.void, [dart.legacy(object.PdfObject)])
  }));
  dart.setLibraryUri(page.PdfPage, L40);
  dart.setFieldSignature(page.PdfPage, () => ({
    __proto__: dart.getFields(page.PdfPage.__proto__),
    pageFormat: dart.fieldType(dart.legacy(page_format.PdfPageFormat)),
    contents: dart.fieldType(dart.legacy(core.List$(dart.legacy(object_stream.PdfObjectStream)))),
    annotations: dart.fieldType(dart.legacy(core.List$(dart.legacy(annotation.PdfAnnot))))
  }));
  var _dests = dart.privateName(names, "_dests");
  var C183;
  var C184;
  names.PdfNames = class PdfNames extends object.PdfObject {
    addDest(name, page, opts) {
      let posX = opts && 'posX' in opts ? opts.posX : null;
      let posY = opts && 'posY' in opts ? opts.posY : null;
      let posZ = opts && 'posZ' in opts ? opts.posZ : null;
      if (!dart.equals(page.pdfDocument, this.pdfDocument)) dart.assertFailed(null, L41, 37, 12, "page.pdfDocument == pdfDocument");
      if (!(name != null)) dart.assertFailed(null, L41, 38, 12, "name != null");
      this[_dests][$_set](name, new data_types.PdfDict.new(new (IdentityMapOfStringL$PdfDataTypeL()).from(["/D", new data_types.PdfArray.new((() => {
          let t4 = JSArrayOfPdfDataTypeL().of([page.ref(), C183 || CT.C183]);
          if (posX == null)
            t4.push(C184 || CT.C184);
          else
            t4.push(new data_types.PdfNum.new(posX));
          if (posY == null)
            t4.push(C184 || CT.C184);
          else
            t4.push(new data_types.PdfNum.new(posY));
          if (posZ == null)
            t4.push(C184 || CT.C184);
          else
            t4.push(new data_types.PdfNum.new(posZ));
          return t4;
        })())])));
    }
    prepare() {
      let t5;
      super.prepare();
      let dests = new data_types.PdfArray.new();
      let keys = (t5 = this[_dests][$keys][$toList](), (() => {
        t5[$sort]();
        return t5;
      })());
      for (let name of keys) {
        dests.add(data_types.PdfSecString.fromString(this, name));
        dests.add(this[_dests][$_get](name));
      }
      let dict = new data_types.PdfDict.new();
      if (dart.test(dests.values[$isNotEmpty])) {
        dict._set("/Names", dests);
        dict._set("/Limits", new data_types.PdfArray.new(JSArrayOfPdfDataTypeL().of([data_types.PdfSecString.fromString(this, keys[$first]), data_types.PdfSecString.fromString(this, keys[$last])])));
      }
      this.params._set("/Dests", dict);
    }
  };
  (names.PdfNames.new = function(pdfDocument) {
    this[_dests] = new (IdentityMapOfStringL$PdfDataTypeL()).new();
    names.PdfNames.__proto__.new.call(this, pdfDocument);
    ;
  }).prototype = names.PdfNames.prototype;
  dart.addTypeTests(names.PdfNames);
  dart.addTypeCaches(names.PdfNames);
  dart.setMethodSignature(names.PdfNames, () => ({
    __proto__: dart.getMethods(names.PdfNames.__proto__),
    addDest: dart.fnType(dart.void, [dart.legacy(core.String), dart.legacy(page.PdfPage)], {posX: dart.legacy(core.double), posY: dart.legacy(core.double), posZ: dart.legacy(core.double)}, {})
  }));
  dart.setLibraryUri(names.PdfNames, L42);
  dart.setFieldSignature(names.PdfNames, () => ({
    __proto__: dart.getFields(names.PdfNames.__proto__),
    [_dests]: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(data_types.PdfDataType))))
  }));
  var pdfPageList$ = dart.privateName(catalog, "PdfCatalog.pdfPageList");
  var outlines$ = dart.privateName(catalog, "PdfCatalog.outlines");
  var pageMode$ = dart.privateName(catalog, "PdfCatalog.pageMode");
  var names$ = dart.privateName(catalog, "PdfCatalog.names");
  var C185;
  catalog.PdfCatalog = class PdfCatalog extends object.PdfObject {
    get pdfPageList() {
      return this[pdfPageList$];
    }
    set pdfPageList(value) {
      super.pdfPageList = value;
    }
    get outlines() {
      return this[outlines$];
    }
    set outlines(value) {
      this[outlines$] = value;
    }
    get pageMode() {
      return this[pageMode$];
    }
    set pageMode(value) {
      super.pageMode = value;
    }
    get names() {
      return this[names$];
    }
    set names(value) {
      super.names = value;
    }
    prepare() {
      let t5, t5$;
      super.prepare();
      this.params._set("/Version", new data_types.PdfName.new("/" + dart.str(this.pdfDocument.version)));
      this.params._set("/Pages", this.pdfPageList.ref());
      if (this.outlines != null && dart.test(this.outlines.outlines[$isNotEmpty])) {
        this.params._set("/Outlines", this.outlines.ref());
      }
      this.params._set("/Names", this.names.ref());
      this.params._set("/PageMode", new data_types.PdfName.new(catalog.PdfCatalog._PdfPageModes[$_get](this.pageMode.index)));
      if (this.pdfDocument.sign != null) {
        this.params._set("/Perms", new data_types.PdfDict.new(new (IdentityMapOfStringL$PdfDataTypeL()).from(["/DocMDP", this.pdfDocument.sign.ref()])));
      }
      let widgets = JSArrayOfPdfAnnotL().of([]);
      for (let page of this.pdfDocument.pdfPageList.pages) {
        for (let annot of page.annotations) {
          if (annot.annot.subtype === "/Widget") {
            widgets[$add](annot);
          }
        }
      }
      if (dart.test(widgets[$isNotEmpty])) {
        this.params._set("/AcroForm", new data_types.PdfDict.new(new (IdentityMapOfStringL$PdfDataTypeL()).from(["/SigFlags", new data_types.PdfNum.new((t5$ = (t5 = this.pdfDocument.sign, t5 == null ? null : t5.flagsValue), t5$ == null ? 0 : t5$)), "/Fields", data_types.PdfArray.fromObjects(widgets)])));
      }
    }
  };
  (catalog.PdfCatalog.new = function(pdfDocument, pdfPageList, pageMode, names) {
    this[outlines$] = null;
    this[pdfPageList$] = pdfPageList;
    this[pageMode$] = pageMode;
    this[names$] = names;
    if (!(pdfPageList != null)) dart.assertFailed(null, L43, 33, 16, "pdfPageList != null");
    if (!(pageMode != null)) dart.assertFailed(null, L43, 34, 16, "pageMode != null");
    if (!(names != null)) dart.assertFailed(null, L43, 35, 16, "names != null");
    catalog.PdfCatalog.__proto__.new.call(this, pdfDocument, {type: "/Catalog"});
    ;
  }).prototype = catalog.PdfCatalog.prototype;
  dart.addTypeTests(catalog.PdfCatalog);
  dart.addTypeCaches(catalog.PdfCatalog);
  dart.setLibraryUri(catalog.PdfCatalog, L44);
  dart.setFieldSignature(catalog.PdfCatalog, () => ({
    __proto__: dart.getFields(catalog.PdfCatalog.__proto__),
    pdfPageList: dart.finalFieldType(dart.legacy(page_list.PdfPageList)),
    outlines: dart.fieldType(dart.legacy(outline.PdfOutline)),
    pageMode: dart.finalFieldType(dart.legacy(document.PdfPageMode)),
    names: dart.finalFieldType(dart.legacy(names.PdfNames))
  }));
  dart.defineLazy(catalog.PdfCatalog, {
    /*catalog.PdfCatalog._PdfPageModes*/get _PdfPageModes() {
      return C185 || CT.C185;
    }
  }, true);
  var _name$6 = dart.privateName(document, "_name");
  var C186;
  var C187;
  var C188;
  var C189;
  var C190;
  document.PdfPageMode = class PdfPageMode extends core.Object {
    toString() {
      return this[_name$6];
    }
  };
  (document.PdfPageMode.new = function(index, _name) {
    this.index = index;
    this[_name$6] = _name;
    ;
  }).prototype = document.PdfPageMode.prototype;
  dart.addTypeTests(document.PdfPageMode);
  dart.addTypeCaches(document.PdfPageMode);
  dart.setMethodSignature(document.PdfPageMode, () => ({
    __proto__: dart.getMethods(document.PdfPageMode.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(document.PdfPageMode, L45);
  dart.setFieldSignature(document.PdfPageMode, () => ({
    __proto__: dart.getFields(document.PdfPageMode.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$6]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(document.PdfPageMode, ['toString']);
  document.PdfPageMode.none = C186 || CT.C186;
  document.PdfPageMode.outlines = C187 || CT.C187;
  document.PdfPageMode.thumbs = C188 || CT.C188;
  document.PdfPageMode.fullscreen = C189 || CT.C189;
  document.PdfPageMode.values = C190 || CT.C190;
  var _objser = dart.privateName(document, "_objser");
  var _outline = dart.privateName(document, "_outline");
  var _graphicStates = dart.privateName(document, "_graphicStates");
  var _documentID = dart.privateName(document, "_documentID");
  var _write = dart.privateName(document, "_write");
  var prev$ = dart.privateName(document, "PdfDocument.prev");
  var objects = dart.privateName(document, "PdfDocument.objects");
  var catalog$ = dart.privateName(document, "PdfDocument.catalog");
  var info$ = dart.privateName(document, "PdfDocument.info");
  var pdfPageList = dart.privateName(document, "PdfDocument.pdfPageList");
  var pdfNames = dart.privateName(document, "PdfDocument.pdfNames");
  var defaultOutlineBorder = dart.privateName(document, "PdfDocument.defaultOutlineBorder");
  var deflate$ = dart.privateName(document, "PdfDocument.deflate");
  var encryption$ = dart.privateName(document, "PdfDocument.encryption");
  var sign = dart.privateName(document, "PdfDocument.sign");
  var version = dart.privateName(document, "PdfDocument.version");
  var fonts$ = dart.privateName(document, "PdfDocument.fonts");
  document.PdfDocument = class PdfDocument extends core.Object {
    get prev() {
      return this[prev$];
    }
    set prev(value) {
      super.prev = value;
    }
    get objects() {
      return this[objects];
    }
    set objects(value) {
      super.objects = value;
    }
    get catalog() {
      return this[catalog$];
    }
    set catalog(value) {
      this[catalog$] = value;
    }
    get info() {
      return this[info$];
    }
    set info(value) {
      this[info$] = value;
    }
    get pdfPageList() {
      return this[pdfPageList];
    }
    set pdfPageList(value) {
      this[pdfPageList] = value;
    }
    get pdfNames() {
      return this[pdfNames];
    }
    set pdfNames(value) {
      this[pdfNames] = value;
    }
    get defaultOutlineBorder() {
      return this[defaultOutlineBorder];
    }
    set defaultOutlineBorder(value) {
      this[defaultOutlineBorder] = value;
    }
    get deflate() {
      return this[deflate$];
    }
    set deflate(value) {
      super.deflate = value;
    }
    get encryption() {
      return this[encryption$];
    }
    set encryption(value) {
      this[encryption$] = value;
    }
    get sign() {
      return this[sign];
    }
    set sign(value) {
      this[sign] = value;
    }
    get version() {
      return this[version];
    }
    set version(value) {
      super.version = value;
    }
    get fonts() {
      return this[fonts$];
    }
    set fonts(value) {
      super.fonts = value;
    }
    get objser() {
      return this[_objser];
    }
    get documentID() {
      if (this[_documentID] == null) {
        let rnd = math.Random.new();
        this[_documentID] = _native_typed_data.NativeUint8List.fromList(sha256.sha256.convert(new core.DateTime.now().toIso8601String()[$codeUnits][$plus](ListOfintL().generate(32, dart.fn(_ => rnd.nextInt(256), intLTointL())))).bytes);
      }
      return this[_documentID];
    }
    genSerial() {
      let t5;
      t5 = this[_objser];
      this[_objser] = dart.notNull(t5) + 1;
      return t5;
    }
    page(page) {
      return this.pdfPageList.pages[$_get](page);
    }
    get outline() {
      if (this[_outline] == null) {
        this[_outline] = new outline.PdfOutline.new(this);
        this.catalog.outlines = this[_outline];
      }
      return this[_outline];
    }
    get graphicStates() {
      this[_graphicStates] == null ? this[_graphicStates] = new graphic_state.PdfGraphicStates.new(this) : null;
      return this[_graphicStates];
    }
    get hasGraphicStates() {
      return this[_graphicStates] != null;
    }
    [_write](os) {
      return async.async(dart.void, (function* _write() {
        let pos = new output.PdfOutput.new(os);
        this.objects[$forEach](dart.bind(pos, 'write'));
        yield pos.close();
      }).bind(this));
    }
    save() {
      return async.async(Uint8ListL(), (function* save() {
        let os = new stream.PdfStream.new();
        if (this.prev != null) {
          os.putBytes(this.prev.bytes);
        }
        yield this[_write](os);
        return os.output();
      }).bind(this));
    }
  };
  (document.PdfDocument.new = function(opts) {
    let t5;
    let pageMode = opts && 'pageMode' in opts ? opts.pageMode : C186 || CT.C186;
    let deflate = opts && 'deflate' in opts ? opts.deflate : null;
    let compress = opts && 'compress' in opts ? opts.compress : true;
    this[_objser] = null;
    this[objects] = LinkedHashSetOfPdfObjectL().new();
    this[catalog$] = null;
    this[info$] = null;
    this[pdfPageList] = null;
    this[pdfNames] = null;
    this[_outline] = null;
    this[defaultOutlineBorder] = null;
    this[encryption$] = null;
    this[sign] = null;
    this[_graphicStates] = null;
    this[version] = "1.7";
    this[fonts$] = LinkedHashSetOfPdfFontL().new();
    this[_documentID] = null;
    this[deflate$] = dart.test(compress) ? (t5 = deflate, t5 == null ? js.defaultDeflate : t5) : null;
    this[prev$] = null;
    this[_objser] = 1;
    this.pdfPageList = new page_list.PdfPageList.new(this);
    this.pdfNames = new names.PdfNames.new(this);
    this.catalog = new catalog.PdfCatalog.new(this, this.pdfPageList, pageMode, this.pdfNames);
  }).prototype = document.PdfDocument.prototype;
  (document.PdfDocument.load = function(prev, opts) {
    let t5;
    let pageMode = opts && 'pageMode' in opts ? opts.pageMode : C186 || CT.C186;
    let deflate = opts && 'deflate' in opts ? opts.deflate : null;
    let compress = opts && 'compress' in opts ? opts.compress : true;
    this[_objser] = null;
    this[objects] = LinkedHashSetOfPdfObjectL().new();
    this[catalog$] = null;
    this[info$] = null;
    this[pdfPageList] = null;
    this[pdfNames] = null;
    this[_outline] = null;
    this[defaultOutlineBorder] = null;
    this[encryption$] = null;
    this[sign] = null;
    this[_graphicStates] = null;
    this[version] = "1.7";
    this[fonts$] = LinkedHashSetOfPdfFontL().new();
    this[_documentID] = null;
    this[prev$] = prev;
    this[deflate$] = dart.test(compress) ? (t5 = deflate, t5 == null ? js.defaultDeflate : t5) : null;
    this[_objser] = this.prev.size;
    this.pdfPageList = new page_list.PdfPageList.new(this);
    this.pdfNames = new names.PdfNames.new(this);
    this.catalog = new catalog.PdfCatalog.new(this, this.pdfPageList, pageMode, this.pdfNames);
    this.prev.mergeDocument(this);
  }).prototype = document.PdfDocument.prototype;
  dart.addTypeTests(document.PdfDocument);
  dart.addTypeCaches(document.PdfDocument);
  dart.setMethodSignature(document.PdfDocument, () => ({
    __proto__: dart.getMethods(document.PdfDocument.__proto__),
    genSerial: dart.fnType(dart.legacy(core.int), []),
    page: dart.fnType(dart.legacy(page.PdfPage), [dart.legacy(core.int)]),
    [_write]: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(stream.PdfStream)]),
    save: dart.fnType(dart.legacy(async.Future$(dart.legacy(typed_data.Uint8List))), [])
  }));
  dart.setGetterSignature(document.PdfDocument, () => ({
    __proto__: dart.getGetters(document.PdfDocument.__proto__),
    objser: dart.legacy(core.int),
    documentID: dart.legacy(typed_data.Uint8List),
    outline: dart.legacy(outline.PdfOutline),
    graphicStates: dart.legacy(graphic_state.PdfGraphicStates),
    hasGraphicStates: dart.legacy(core.bool)
  }));
  dart.setLibraryUri(document.PdfDocument, L45);
  dart.setFieldSignature(document.PdfDocument, () => ({
    __proto__: dart.getFields(document.PdfDocument.__proto__),
    prev: dart.finalFieldType(dart.legacy(document_parser.PdfDocumentParserBase)),
    [_objser]: dart.fieldType(dart.legacy(core.int)),
    objects: dart.finalFieldType(dart.legacy(core.Set$(dart.legacy(object.PdfObject)))),
    catalog: dart.fieldType(dart.legacy(catalog.PdfCatalog)),
    info: dart.fieldType(dart.legacy(info.PdfInfo)),
    pdfPageList: dart.fieldType(dart.legacy(page_list.PdfPageList)),
    pdfNames: dart.fieldType(dart.legacy(names.PdfNames)),
    [_outline]: dart.fieldType(dart.legacy(outline.PdfOutline)),
    defaultOutlineBorder: dart.fieldType(dart.legacy(object.PdfObject)),
    deflate: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(core.List$(dart.legacy(core.int))), [dart.legacy(core.List$(dart.legacy(core.int)))]))),
    encryption: dart.fieldType(dart.legacy(encryption.PdfEncryption)),
    sign: dart.fieldType(dart.legacy(signature.PdfSignature)),
    [_graphicStates]: dart.fieldType(dart.legacy(graphic_state.PdfGraphicStates)),
    version: dart.finalFieldType(dart.legacy(core.String)),
    fonts: dart.finalFieldType(dart.legacy(core.Set$(dart.legacy(font.PdfFont)))),
    [_documentID]: dart.fieldType(dart.legacy(typed_data.Uint8List))
  }));
  var _toStream = dart.privateName(data_types, "_toStream");
  data_types.PdfDataType = class PdfDataType extends core.Object {
    [_toStream]() {
      let s = new stream.PdfStream.new();
      this.output(s);
      return s;
    }
    toString() {
      return core.String.fromCharCodes(this[_toStream]().output());
    }
    toList() {
      return this[_toStream]().output();
    }
  };
  (data_types.PdfDataType.new = function() {
    ;
  }).prototype = data_types.PdfDataType.prototype;
  dart.addTypeTests(data_types.PdfDataType);
  dart.addTypeCaches(data_types.PdfDataType);
  dart.setMethodSignature(data_types.PdfDataType, () => ({
    __proto__: dart.getMethods(data_types.PdfDataType.__proto__),
    [_toStream]: dart.fnType(dart.legacy(stream.PdfStream), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    toList: dart.fnType(dart.legacy(typed_data.Uint8List), [])
  }));
  dart.setLibraryUri(data_types.PdfDataType, L46);
  dart.defineExtensionMethods(data_types.PdfDataType, ['toString']);
  data_types.PdfBool = class PdfBool extends data_types.PdfDataType {
    get value() {
      return this[value$];
    }
    set value(value) {
      super.value = value;
    }
    output(s) {
      s.putString(dart.test(this.value) ? "true" : "false");
    }
    _equals(other) {
      if (other == null) return false;
      if (PdfBoolL().is(other)) {
        return dart.equals(this.value, other.value);
      }
      return false;
    }
    get hashCode() {
      return dart.hashCode(this.value);
    }
  };
  (data_types.PdfBool.new = function(value) {
    this[value$] = value;
    data_types.PdfBool.__proto__.new.call(this);
    ;
  }).prototype = data_types.PdfBool.prototype;
  dart.addTypeTests(data_types.PdfBool);
  dart.addTypeCaches(data_types.PdfBool);
  const value$ = PdfBool_value;
  dart.setMethodSignature(data_types.PdfBool, () => ({
    __proto__: dart.getMethods(data_types.PdfBool.__proto__),
    output: dart.fnType(dart.void, [dart.legacy(stream.PdfStream)]),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(data_types.PdfBool, () => ({
    __proto__: dart.getGetters(data_types.PdfBool.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(data_types.PdfBool, L46);
  dart.setFieldSignature(data_types.PdfBool, () => ({
    __proto__: dart.getFields(data_types.PdfBool.__proto__),
    value: dart.finalFieldType(dart.legacy(core.bool))
  }));
  dart.defineExtensionMethods(data_types.PdfBool, ['_equals']);
  dart.defineExtensionAccessors(data_types.PdfBool, ['hashCode']);
  data_types.PdfNum = class PdfNum extends data_types.PdfDataType {
    get value() {
      return this[value$0];
    }
    set value(value) {
      super.value = value;
    }
    output(s) {
      if (intL().is(this.value)) {
        s.putString(this.value[$toInt]()[$toString]());
      } else {
        let r = this.value[$toStringAsFixed](5);
        if (r[$contains](".")) {
          let n = r.length - 1;
          while (r[$_get](n) === "0") {
            n = n - 1;
          }
          if (r[$_get](n) === ".") {
            n = n - 1;
          }
          r = r[$substring](0, n + 1);
        }
        s.putString(r);
      }
    }
    _equals(other) {
      if (other == null) return false;
      if (PdfNumL().is(other)) {
        return this.value == other.value;
      }
      return false;
    }
    get hashCode() {
      return dart.hashCode(this.value);
    }
  };
  (data_types.PdfNum.new = function(value) {
    this[value$0] = value;
    if (!(value != null)) dart.assertFailed(null, L47, 74, 16, "value != null");
    if (!(value !== 1 / 0)) dart.assertFailed(null, L47, 75, 16, "value != double.infinity");
    if (!(value !== 0 / 0)) dart.assertFailed(null, L47, 76, 16, "value != double.nan");
    if (!(value !== -1 / 0)) dart.assertFailed(null, L47, 77, 16, "value != double.negativeInfinity");
    data_types.PdfNum.__proto__.new.call(this);
    ;
  }).prototype = data_types.PdfNum.prototype;
  dart.addTypeTests(data_types.PdfNum);
  dart.addTypeCaches(data_types.PdfNum);
  const value$0 = PdfNum_value;
  dart.setMethodSignature(data_types.PdfNum, () => ({
    __proto__: dart.getMethods(data_types.PdfNum.__proto__),
    output: dart.fnType(dart.void, [dart.legacy(stream.PdfStream)]),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(data_types.PdfNum, () => ({
    __proto__: dart.getGetters(data_types.PdfNum.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(data_types.PdfNum, L46);
  dart.setFieldSignature(data_types.PdfNum, () => ({
    __proto__: dart.getFields(data_types.PdfNum.__proto__),
    value: dart.finalFieldType(dart.legacy(core.num))
  }));
  dart.defineExtensionMethods(data_types.PdfNum, ['_equals']);
  dart.defineExtensionAccessors(data_types.PdfNum, ['hashCode']);
  dart.defineLazy(data_types.PdfNum, {
    /*data_types.PdfNum.precision*/get precision() {
      return 5;
    }
  }, true);
  var values$ = dart.privateName(data_types, "PdfNumList.values");
  data_types.PdfNumList = class PdfNumList extends data_types.PdfDataType {
    get values() {
      return this[values$];
    }
    set values(value) {
      super.values = value;
    }
    output(s) {
      for (let n = 0; n < dart.notNull(this.values[$length]); n = n + 1) {
        if (n > 0) {
          s.putByte(32);
        }
        new data_types.PdfNum.new(this.values[$_get](n)).output(s);
      }
    }
    _equals(other) {
      if (other == null) return false;
      if (PdfNumListL().is(other)) {
        return dart.equals(this.values, other.values);
      }
      return false;
    }
    get hashCode() {
      return dart.hashCode(this.values);
    }
  };
  (data_types.PdfNumList.new = function(values) {
    this[values$] = values;
    if (!(values != null)) dart.assertFailed(null, L47, 117, 36, "values != null");
    data_types.PdfNumList.__proto__.new.call(this);
    ;
  }).prototype = data_types.PdfNumList.prototype;
  dart.addTypeTests(data_types.PdfNumList);
  dart.addTypeCaches(data_types.PdfNumList);
  dart.setMethodSignature(data_types.PdfNumList, () => ({
    __proto__: dart.getMethods(data_types.PdfNumList.__proto__),
    output: dart.fnType(dart.void, [dart.legacy(stream.PdfStream)]),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(data_types.PdfNumList, () => ({
    __proto__: dart.getGetters(data_types.PdfNumList.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(data_types.PdfNumList, L46);
  dart.setFieldSignature(data_types.PdfNumList, () => ({
    __proto__: dart.getFields(data_types.PdfNumList.__proto__),
    values: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.num))))
  }));
  dart.defineExtensionMethods(data_types.PdfNumList, ['_equals']);
  dart.defineExtensionAccessors(data_types.PdfNumList, ['hashCode']);
  var _name$7 = dart.privateName(data_types, "_name");
  var C191;
  var C192;
  var C193;
  data_types.PdfStringFormat = class PdfStringFormat extends core.Object {
    toString() {
      return this[_name$7];
    }
  };
  (data_types.PdfStringFormat.new = function(index, _name) {
    this.index = index;
    this[_name$7] = _name;
    ;
  }).prototype = data_types.PdfStringFormat.prototype;
  dart.addTypeTests(data_types.PdfStringFormat);
  dart.addTypeCaches(data_types.PdfStringFormat);
  dart.setMethodSignature(data_types.PdfStringFormat, () => ({
    __proto__: dart.getMethods(data_types.PdfStringFormat.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(data_types.PdfStringFormat, L46);
  dart.setFieldSignature(data_types.PdfStringFormat, () => ({
    __proto__: dart.getFields(data_types.PdfStringFormat.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$7]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(data_types.PdfStringFormat, ['toString']);
  data_types.PdfStringFormat.binary = C191 || CT.C191;
  data_types.PdfStringFormat.litteral = C192 || CT.C192;
  data_types.PdfStringFormat.values = C193 || CT.C193;
  var _putTextBytes = dart.privateName(data_types, "_putTextBytes");
  var _codeUnitForDigit = dart.privateName(data_types, "_codeUnitForDigit");
  var _output = dart.privateName(data_types, "_output");
  var value$1 = dart.privateName(data_types, "PdfString.value");
  var format$ = dart.privateName(data_types, "PdfString.format");
  data_types.PdfString = class PdfString extends data_types.PdfDataType {
    get value() {
      return this[value$1];
    }
    set value(value) {
      super.value = value;
    }
    get format() {
      return this[format$];
    }
    set format(value) {
      super.format = value;
    }
    static fromString(value) {
      return new data_types.PdfString.new(data_types.PdfString._string(value), data_types.PdfStringFormat.litteral);
    }
    static fromStream(value, format = C192 || CT.C192) {
      return new data_types.PdfString.new(value.output(), format);
    }
    static fromDate(date) {
      return new data_types.PdfString.new(data_types.PdfString._date(date));
    }
    static _string(value) {
      try {
        return convert.latin1.encode(value);
      } catch (e$) {
        let e = dart.getThrown(e$);
        return _native_typed_data.NativeUint8List.fromList(JSArrayOfintL().of([254, 255])[$plus](data_types.PdfString._encodeUtf16be(value)));
      }
    }
    static _date(date) {
      let utcDate = date.toUtc();
      let year = dart.toString(utcDate.year)[$padLeft](4, "0");
      let month = dart.toString(utcDate.month)[$padLeft](2, "0");
      let day = dart.toString(utcDate.day)[$padLeft](2, "0");
      let hour = dart.toString(utcDate.hour)[$padLeft](2, "0");
      let minute = dart.toString(utcDate.minute)[$padLeft](2, "0");
      let second = dart.toString(utcDate.second)[$padLeft](2, "0");
      return data_types.PdfString._string("D:" + year + month + day + hour + minute + second + "Z");
    }
    static _encodeUtf16be(str) {
      let encoding = JSArrayOfintL().of([]);
      let add = dart.fn(unit => {
        encoding[$add]((dart.notNull(unit) & 65280) >>> 8);
        encoding[$add]((dart.notNull(unit) & 255) >>> 0);
      }, intLToNull());
      for (let unit of str[$codeUnits]) {
        if (dart.notNull(unit) >= 0 && dart.notNull(unit) < 55296 || dart.notNull(unit) > 57343 && dart.notNull(unit) <= 65535) {
          add(unit);
        } else if (dart.notNull(unit) > 65535 && dart.notNull(unit) <= 1114111) {
          let base = dart.notNull(unit) - 65536;
          add(55296 + ((base & 1047552) >>> 10));
          add(56320 + ((base & 1023) >>> 0));
        } else {
          add(65533);
        }
      }
      return encoding;
    }
    [_putTextBytes](s, b) {
      for (let c of b) {
        switch (c) {
          case 10:
          {
            s.putByte(92);
            s.putByte(110);
            break;
          }
          case 13:
          {
            s.putByte(92);
            s.putByte(114);
            break;
          }
          case 9:
          {
            s.putByte(92);
            s.putByte(116);
            break;
          }
          case 8:
          {
            s.putByte(92);
            s.putByte(98);
            break;
          }
          case 12:
          {
            s.putByte(92);
            s.putByte(102);
            break;
          }
          case 40:
          {
            s.putByte(92);
            s.putByte(40);
            break;
          }
          case 41:
          {
            s.putByte(92);
            s.putByte(41);
            break;
          }
          case 92:
          {
            s.putByte(92);
            s.putByte(92);
            break;
          }
          default:
          {
            s.putByte(c);
          }
        }
      }
    }
    [_codeUnitForDigit](digit) {
      return dart.notNull(digit) < 10 ? dart.notNull(digit) + 48 : dart.notNull(digit) + 97 - 10;
    }
    [_output](s, value) {
      switch (this.format) {
        case C191 || CT.C191:
        {
          s.putByte(60);
          for (let byte of value) {
            s.putByte(this[_codeUnitForDigit]((dart.notNull(byte) & 240) >> 4));
            s.putByte(this[_codeUnitForDigit](dart.notNull(byte) & 15));
          }
          s.putByte(62);
          break;
        }
        case C192 || CT.C192:
        {
          s.putByte(40);
          this[_putTextBytes](s, value);
          s.putByte(41);
          break;
        }
      }
    }
    output(s) {
      this[_output](s, this.value);
    }
    _equals(other) {
      if (other == null) return false;
      if (PdfStringL().is(other)) {
        return dart.equals(this.value, other.value);
      }
      return false;
    }
    get hashCode() {
      return dart.hashCode(this.value);
    }
  };
  (data_types.PdfString.new = function(value, format = C192 || CT.C192) {
    this[value$1] = value;
    this[format$] = format;
    data_types.PdfString.__proto__.new.call(this);
    ;
  }).prototype = data_types.PdfString.prototype;
  dart.addTypeTests(data_types.PdfString);
  dart.addTypeCaches(data_types.PdfString);
  dart.setMethodSignature(data_types.PdfString, () => ({
    __proto__: dart.getMethods(data_types.PdfString.__proto__),
    [_putTextBytes]: dart.fnType(dart.void, [dart.legacy(stream.PdfStream), dart.legacy(core.List$(dart.legacy(core.int)))]),
    [_codeUnitForDigit]: dart.fnType(dart.legacy(core.int), [dart.legacy(core.int)]),
    [_output]: dart.fnType(dart.void, [dart.legacy(stream.PdfStream), dart.legacy(typed_data.Uint8List)]),
    output: dart.fnType(dart.void, [dart.legacy(stream.PdfStream)]),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(data_types.PdfString, () => ({
    __proto__: dart.getGetters(data_types.PdfString.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(data_types.PdfString, L46);
  dart.setFieldSignature(data_types.PdfString, () => ({
    __proto__: dart.getFields(data_types.PdfString.__proto__),
    value: dart.finalFieldType(dart.legacy(typed_data.Uint8List)),
    format: dart.finalFieldType(dart.legacy(data_types.PdfStringFormat))
  }));
  dart.defineExtensionMethods(data_types.PdfString, ['_equals']);
  dart.defineExtensionAccessors(data_types.PdfString, ['hashCode']);
  var object$ = dart.privateName(data_types, "PdfSecString.object");
  data_types.PdfSecString = class PdfSecString extends data_types.PdfString {
    get object() {
      return this[object$];
    }
    set object(value) {
      super.object = value;
    }
    static fromString(object, value, format = C192 || CT.C192) {
      return new data_types.PdfSecString.new(object, data_types.PdfString._string(value), format);
    }
    static fromStream(object, value, format = C192 || CT.C192) {
      return new data_types.PdfSecString.new(object, value.output(), format);
    }
    static fromDate(object, date) {
      return new data_types.PdfSecString.new(object, data_types.PdfString._date(date), data_types.PdfStringFormat.litteral);
    }
    output(s) {
      if (this.object.pdfDocument.encryption == null) {
        return super.output(s);
      }
      let enc = this.object.pdfDocument.encryption.encrypt(this.value, this.object);
      this[_output](s, enc);
    }
  };
  (data_types.PdfSecString.new = function(object, value, format = C191 || CT.C191) {
    this[object$] = object;
    data_types.PdfSecString.__proto__.new.call(this, value, format);
    ;
  }).prototype = data_types.PdfSecString.prototype;
  dart.addTypeTests(data_types.PdfSecString);
  dart.addTypeCaches(data_types.PdfSecString);
  dart.setLibraryUri(data_types.PdfSecString, L46);
  dart.setFieldSignature(data_types.PdfSecString, () => ({
    __proto__: dart.getFields(data_types.PdfSecString.__proto__),
    object: dart.finalFieldType(dart.legacy(object.PdfObject))
  }));
  data_types.PdfName = class PdfName extends data_types.PdfDataType {
    get value() {
      return this[value$2];
    }
    set value(value) {
      super.value = value;
    }
    output(s) {
      if (!(this.value[$_get](0) === "/")) dart.assertFailed(null, L47, 366, 12, "value[0] == '/'");
      let bytes = JSArrayOfintL().of([]);
      for (let c of this.value[$codeUnits]) {
        if (!(dart.notNull(c) < 255 && dart.notNull(c) > 0)) dart.assertFailed(null, L47, 369, 14, "c < 0xff && c > 0x00");
        if (dart.notNull(c) < 33 || dart.notNull(c) > 126 || c === 35 || c === 47 && dart.test(bytes[$isNotEmpty]) || c === 91 || c === 93 || c === 40 || c === 60 || c === 62) {
          bytes[$add](35);
          let x = c[$toRadixString](16)[$padLeft](2, "0");
          bytes[$addAll](x[$codeUnits]);
        } else {
          bytes[$add](c);
        }
      }
      s.putBytes(bytes);
    }
    _equals(other) {
      if (other == null) return false;
      if (PdfNameL().is(other)) {
        return this.value == other.value;
      }
      return false;
    }
    get hashCode() {
      return dart.hashCode(this.value);
    }
  };
  (data_types.PdfName.new = function(value) {
    this[value$2] = value;
    if (!(value != null)) dart.assertFailed(null, L47, 360, 38, "value != null");
    data_types.PdfName.__proto__.new.call(this);
    ;
  }).prototype = data_types.PdfName.prototype;
  dart.addTypeTests(data_types.PdfName);
  dart.addTypeCaches(data_types.PdfName);
  const value$2 = PdfName_value;
  dart.setMethodSignature(data_types.PdfName, () => ({
    __proto__: dart.getMethods(data_types.PdfName.__proto__),
    output: dart.fnType(dart.void, [dart.legacy(stream.PdfStream)]),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(data_types.PdfName, () => ({
    __proto__: dart.getGetters(data_types.PdfName.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(data_types.PdfName, L46);
  dart.setFieldSignature(data_types.PdfName, () => ({
    __proto__: dart.getFields(data_types.PdfName.__proto__),
    value: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(data_types.PdfName, ['_equals']);
  dart.defineExtensionAccessors(data_types.PdfName, ['hashCode']);
  data_types.PdfNull = class PdfNull extends data_types.PdfDataType {
    output(s) {
      s.putString("null");
    }
    _equals(other) {
      if (other == null) return false;
      return PdfNullL().is(other);
    }
    get hashCode() {
      return dart.hashCode(null);
    }
  };
  (data_types.PdfNull.new = function() {
    data_types.PdfNull.__proto__.new.call(this);
    ;
  }).prototype = data_types.PdfNull.prototype;
  dart.addTypeTests(data_types.PdfNull);
  dart.addTypeCaches(data_types.PdfNull);
  dart.setMethodSignature(data_types.PdfNull, () => ({
    __proto__: dart.getMethods(data_types.PdfNull.__proto__),
    output: dart.fnType(dart.void, [dart.legacy(stream.PdfStream)]),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(data_types.PdfNull, () => ({
    __proto__: dart.getGetters(data_types.PdfNull.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(data_types.PdfNull, L46);
  dart.defineExtensionMethods(data_types.PdfNull, ['_equals']);
  dart.defineExtensionAccessors(data_types.PdfNull, ['hashCode']);
  var ser$ = dart.privateName(data_types, "PdfIndirect.ser");
  var gen$ = dart.privateName(data_types, "PdfIndirect.gen");
  data_types.PdfIndirect = class PdfIndirect extends data_types.PdfDataType {
    get ser() {
      return this[ser$];
    }
    set ser(value) {
      super.ser = value;
    }
    get gen() {
      return this[gen$];
    }
    set gen(value) {
      super.gen = value;
    }
    output(s) {
      s.putString(dart.str(this.ser) + " " + dart.str(this.gen) + " R");
    }
    _equals(other) {
      if (other == null) return false;
      if (PdfIndirectL().is(other)) {
        return this.ser == other.ser && this.gen == other.gen;
      }
      return false;
    }
    get hashCode() {
      return dart.hashCode(this.ser) + dart.hashCode(this.gen);
    }
  };
  (data_types.PdfIndirect.new = function(ser, gen) {
    this[ser$] = ser;
    this[gen$] = gen;
    data_types.PdfIndirect.__proto__.new.call(this);
    ;
  }).prototype = data_types.PdfIndirect.prototype;
  dart.addTypeTests(data_types.PdfIndirect);
  dart.addTypeCaches(data_types.PdfIndirect);
  dart.setMethodSignature(data_types.PdfIndirect, () => ({
    __proto__: dart.getMethods(data_types.PdfIndirect.__proto__),
    output: dart.fnType(dart.void, [dart.legacy(stream.PdfStream)]),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(data_types.PdfIndirect, () => ({
    __proto__: dart.getGetters(data_types.PdfIndirect.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(data_types.PdfIndirect, L46);
  dart.setFieldSignature(data_types.PdfIndirect, () => ({
    __proto__: dart.getFields(data_types.PdfIndirect.__proto__),
    ser: dart.finalFieldType(dart.legacy(core.int)),
    gen: dart.finalFieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(data_types.PdfIndirect, ['_equals']);
  dart.defineExtensionAccessors(data_types.PdfIndirect, ['hashCode']);
  var values$0 = dart.privateName(data_types, "PdfArray.values");
  data_types.PdfArray = class PdfArray extends data_types.PdfDataType {
    get values() {
      return this[values$0];
    }
    set values(value) {
      super.values = value;
    }
    static fromObjects(objects) {
      return new data_types.PdfArray.new(objects[$map](PdfIndirectL(), dart.fn(e => e.ref(), PdfObjectLToPdfIndirectL()))[$toList]());
    }
    static fromNum(list) {
      return new data_types.PdfArray.new(list[$map](PdfNumL(), dart.fn(e => new data_types.PdfNum.new(e), numLToPdfNumL()))[$toList]());
    }
    add(v) {
      this.values[$add](v);
    }
    output(s) {
      s.putString("[");
      if (dart.test(this.values[$isNotEmpty])) {
        for (let n = 0; n < dart.notNull(this.values[$length]); n = n + 1) {
          let val = this.values[$_get](n);
          if (n > 0 && !(PdfNameL().is(val) || PdfStringL().is(val) || PdfArrayL().is(val) || PdfDictL().is(val))) {
            s.putByte(32);
          }
          val.output(s);
        }
      }
      s.putString("]");
    }
    uniq() {
      if (dart.notNull(this.values[$length]) <= 1) {
        return;
      }
      let uniques = new (LinkedMapOfPdfDataTypeL$boolL()).new();
      for (let s of this.values) {
        uniques[$_set](s, true);
      }
      this.values[$clear]();
      this.values[$addAll](uniques[$keys]);
    }
    _equals(other) {
      if (other == null) return false;
      if (PdfArrayL().is(other)) {
        return dart.equals(this.values, other.values);
      }
      return false;
    }
    get hashCode() {
      return dart.hashCode(this.values);
    }
  };
  (data_types.PdfArray.new = function(values = null) {
    this[values$0] = JSArrayOfPdfDataTypeL().of([]);
    data_types.PdfArray.__proto__.new.call(this);
    if (values != null) {
      this.values[$addAll](values);
    }
  }).prototype = data_types.PdfArray.prototype;
  dart.addTypeTests(data_types.PdfArray);
  dart.addTypeCaches(data_types.PdfArray);
  dart.setMethodSignature(data_types.PdfArray, () => ({
    __proto__: dart.getMethods(data_types.PdfArray.__proto__),
    add: dart.fnType(dart.void, [dart.legacy(data_types.PdfDataType)]),
    output: dart.fnType(dart.void, [dart.legacy(stream.PdfStream)]),
    uniq: dart.fnType(dart.void, []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(data_types.PdfArray, () => ({
    __proto__: dart.getGetters(data_types.PdfArray.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(data_types.PdfArray, L46);
  dart.setFieldSignature(data_types.PdfArray, () => ({
    __proto__: dart.getFields(data_types.PdfArray.__proto__),
    values: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(data_types.PdfDataType))))
  }));
  dart.defineExtensionMethods(data_types.PdfArray, ['_equals']);
  dart.defineExtensionAccessors(data_types.PdfArray, ['hashCode']);
  var C194;
  var C195;
  var values$1 = dart.privateName(data_types, "PdfDict.values");
  data_types.PdfDict = class PdfDict extends data_types.PdfDataType {
    get values() {
      return this[values$1];
    }
    set values(value) {
      super.values = value;
    }
    static fromObjectMap(objects) {
      return new data_types.PdfDict.new(objects[$map](StringL(), PdfIndirectL(), dart.fn((key, value) => new (MapEntryOfStringL$PdfIndirectL()).__(key, value.ref()), StringLAndPdfObjectLToMapEntryLOfStringL$PdfIndirectL())));
    }
    get isNotEmpty() {
      return this.values[$isNotEmpty];
    }
    _set(k, v$) {
      let v = v$;
      this.values[$_set](k, v);
      return v$;
    }
    _get(k) {
      return this.values[$_get](k);
    }
    output(s) {
      s.putBytes(C194 || CT.C194);
      this.values[$forEach](dart.fn((k, v) => {
        s.putString(k);
        if (PdfNumL().is(v) || PdfBoolL().is(v) || PdfNullL().is(v) || PdfIndirectL().is(v)) {
          s.putByte(32);
        }
        v.output(s);
      }, StringLAndPdfDataTypeLToNull()));
      s.putBytes(C195 || CT.C195);
    }
    containsKey(key) {
      return this.values[$containsKey](key);
    }
    merge(other) {
      for (let key of other.values[$keys]) {
        let value = other._get(key);
        let current = this.values[$_get](key);
        if (current == null) {
          this.values[$_set](key, value);
        } else if (PdfArrayL().is(value) && PdfArrayL().is(current)) {
          current.values[$addAll](value.values);
          current.uniq();
        } else if (PdfDictL().is(value) && PdfDictL().is(current)) {
          current.merge(value);
        } else {
          this.values[$_set](key, value);
        }
      }
    }
    addAll(other) {
      this.values[$addAll](other.values);
    }
    _equals(other) {
      if (other == null) return false;
      if (PdfDictL().is(other)) {
        return dart.equals(this.values, other.values);
      }
      return false;
    }
    get hashCode() {
      return dart.hashCode(this.values);
    }
  };
  (data_types.PdfDict.new = function(values = null) {
    this[values$1] = new (IdentityMapOfStringL$PdfDataTypeL()).new();
    data_types.PdfDict.__proto__.new.call(this);
    if (values != null) {
      this.values[$addAll](values);
    }
  }).prototype = data_types.PdfDict.prototype;
  dart.addTypeTests(data_types.PdfDict);
  dart.addTypeCaches(data_types.PdfDict);
  dart.setMethodSignature(data_types.PdfDict, () => ({
    __proto__: dart.getMethods(data_types.PdfDict.__proto__),
    _set: dart.fnType(dart.void, [dart.legacy(core.String), dart.legacy(data_types.PdfDataType)]),
    _get: dart.fnType(dart.legacy(data_types.PdfDataType), [dart.legacy(core.String)]),
    output: dart.fnType(dart.void, [dart.legacy(stream.PdfStream)]),
    containsKey: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.String)]),
    merge: dart.fnType(dart.void, [dart.legacy(data_types.PdfDict)]),
    addAll: dart.fnType(dart.void, [dart.legacy(data_types.PdfDict)]),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(data_types.PdfDict, () => ({
    __proto__: dart.getGetters(data_types.PdfDict.__proto__),
    isNotEmpty: dart.legacy(core.bool),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(data_types.PdfDict, L46);
  dart.setFieldSignature(data_types.PdfDict, () => ({
    __proto__: dart.getFields(data_types.PdfDict.__proto__),
    values: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(data_types.PdfDataType))))
  }));
  dart.defineExtensionMethods(data_types.PdfDict, ['_equals']);
  dart.defineExtensionAccessors(data_types.PdfDict, ['hashCode']);
  var color$0 = dart.privateName(data_types, "PdfColorType.color");
  data_types.PdfColorType = class PdfColorType extends data_types.PdfDataType {
    get color() {
      return this[color$0];
    }
    set color(value) {
      super.color = value;
    }
    output(s) {
      if (PdfColorCmykL().is(this.color)) {
        let k = PdfColorCmykL().as(this.color);
        data_types.PdfArray.fromNum(JSArrayOfdoubleL().of([k.cyan, k.magenta, k.yellow, k.black])).output(s);
      } else {
        data_types.PdfArray.fromNum(JSArrayOfdoubleL().of([this.color.red, this.color.green, this.color.blue])).output(s);
      }
    }
    _equals(other) {
      if (other == null) return false;
      if (PdfColorTypeL().is(other)) {
        return dart.equals(this.color, other.color);
      }
      return false;
    }
    get hashCode() {
      return dart.hashCode(this.color);
    }
  };
  (data_types.PdfColorType.new = function(color) {
    this[color$0] = color;
    data_types.PdfColorType.__proto__.new.call(this);
    ;
  }).prototype = data_types.PdfColorType.prototype;
  dart.addTypeTests(data_types.PdfColorType);
  dart.addTypeCaches(data_types.PdfColorType);
  dart.setMethodSignature(data_types.PdfColorType, () => ({
    __proto__: dart.getMethods(data_types.PdfColorType.__proto__),
    output: dart.fnType(dart.void, [dart.legacy(stream.PdfStream)]),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(data_types.PdfColorType, () => ({
    __proto__: dart.getGetters(data_types.PdfColorType.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(data_types.PdfColorType, L46);
  dart.setFieldSignature(data_types.PdfColorType, () => ({
    __proto__: dart.getFields(data_types.PdfColorType.__proto__),
    color: dart.finalFieldType(dart.legacy(color.PdfColor))
  }));
  dart.defineExtensionMethods(data_types.PdfColorType, ['_equals']);
  dart.defineExtensionAccessors(data_types.PdfColorType, ['hashCode']);
  var _name$8 = dart.privateName(border, "_name");
  var C196;
  var C197;
  var C198;
  var C199;
  var C200;
  var C201;
  border.PdfBorderStyle = class PdfBorderStyle extends core.Object {
    toString() {
      return this[_name$8];
    }
  };
  (border.PdfBorderStyle.new = function(index, _name) {
    this.index = index;
    this[_name$8] = _name;
    ;
  }).prototype = border.PdfBorderStyle.prototype;
  dart.addTypeTests(border.PdfBorderStyle);
  dart.addTypeCaches(border.PdfBorderStyle);
  dart.setMethodSignature(border.PdfBorderStyle, () => ({
    __proto__: dart.getMethods(border.PdfBorderStyle.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(border.PdfBorderStyle, L48);
  dart.setFieldSignature(border.PdfBorderStyle, () => ({
    __proto__: dart.getFields(border.PdfBorderStyle.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$8]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(border.PdfBorderStyle, ['toString']);
  border.PdfBorderStyle.solid = C196 || CT.C196;
  border.PdfBorderStyle.dashed = C197 || CT.C197;
  border.PdfBorderStyle.beveled = C198 || CT.C198;
  border.PdfBorderStyle.inset = C199 || CT.C199;
  border.PdfBorderStyle.underlined = C200 || CT.C200;
  border.PdfBorderStyle.values = C201 || CT.C201;
  var style$0 = dart.privateName(border, "PdfBorder.style");
  var width$0 = dart.privateName(border, "PdfBorder.width");
  var dash$ = dart.privateName(border, "PdfBorder.dash");
  border.PdfBorder = class PdfBorder extends object.PdfObject {
    get style() {
      return this[style$0];
    }
    set style(value) {
      super.style = value;
    }
    get width() {
      return this[width$0];
    }
    set width(value) {
      super.width = value;
    }
    get dash() {
      return this[dash$];
    }
    set dash(value) {
      super.dash = value;
    }
    prepare() {
      super.prepare();
      this.params._set("/S", new data_types.PdfName.new("/" + "SDBIU"[$substring](this.style.index, dart.notNull(this.style.index) + 1)));
      this.params._set("/W", new data_types.PdfNum.new(this.width));
      if (this.dash != null) {
        this.params._set("/D", data_types.PdfArray.fromNum(this.dash));
      }
    }
  };
  (border.PdfBorder.new = function(pdfDocument, width, opts) {
    let style = opts && 'style' in opts ? opts.style : C196 || CT.C196;
    let dash = opts && 'dash' in opts ? opts.dash : null;
    this[width$0] = width;
    this[style$0] = style;
    this[dash$] = dash;
    if (!(width != null)) dart.assertFailed(null, L49, 50, 16, "width != null");
    if (!(style != null)) dart.assertFailed(null, L49, 51, 16, "style != null");
    border.PdfBorder.__proto__.new.call(this, pdfDocument);
    ;
  }).prototype = border.PdfBorder.prototype;
  dart.addTypeTests(border.PdfBorder);
  dart.addTypeCaches(border.PdfBorder);
  dart.setLibraryUri(border.PdfBorder, L48);
  dart.setFieldSignature(border.PdfBorder, () => ({
    __proto__: dart.getFields(border.PdfBorder.__proto__),
    style: dart.finalFieldType(dart.legacy(border.PdfBorderStyle)),
    width: dart.finalFieldType(dart.legacy(core.double)),
    dash: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.double))))
  }));
  var annot$ = dart.privateName(annotation, "PdfAnnot.annot");
  var pdfPage$ = dart.privateName(annotation, "PdfAnnot.pdfPage");
  annotation.PdfAnnot = class PdfAnnot extends object.PdfObject {
    get annot() {
      return this[annot$];
    }
    set annot(value) {
      super.annot = value;
    }
    get pdfPage() {
      return this[pdfPage$];
    }
    set pdfPage(value) {
      super.pdfPage = value;
    }
    prepare() {
      super.prepare();
      this.annot.build(this.pdfPage, this, this.params);
    }
  };
  (annotation.PdfAnnot.new = function(pdfPage, annot) {
    this[pdfPage$] = pdfPage;
    this[annot$] = annot;
    if (!(annot != null)) dart.assertFailed(null, L50, 35, 16, "annot != null");
    annotation.PdfAnnot.__proto__.new.call(this, pdfPage.pdfDocument, {type: "/Annot"});
    this.pdfPage.annotations[$add](this);
  }).prototype = annotation.PdfAnnot.prototype;
  dart.addTypeTests(annotation.PdfAnnot);
  dart.addTypeCaches(annotation.PdfAnnot);
  dart.setLibraryUri(annotation.PdfAnnot, L51);
  dart.setFieldSignature(annotation.PdfAnnot, () => ({
    __proto__: dart.getFields(annotation.PdfAnnot.__proto__),
    annot: dart.finalFieldType(dart.legacy(annotation.PdfAnnotBase)),
    pdfPage: dart.finalFieldType(dart.legacy(page.PdfPage))
  }));
  var _name$9 = dart.privateName(annotation, "_name");
  var C202;
  var C203;
  var C204;
  var C205;
  var C206;
  var C207;
  var C208;
  var C209;
  var C210;
  var C211;
  var C212;
  annotation.PdfAnnotFlags = class PdfAnnotFlags extends core.Object {
    toString() {
      return this[_name$9];
    }
  };
  (annotation.PdfAnnotFlags.new = function(index, _name) {
    this.index = index;
    this[_name$9] = _name;
    ;
  }).prototype = annotation.PdfAnnotFlags.prototype;
  dart.addTypeTests(annotation.PdfAnnotFlags);
  dart.addTypeCaches(annotation.PdfAnnotFlags);
  dart.setMethodSignature(annotation.PdfAnnotFlags, () => ({
    __proto__: dart.getMethods(annotation.PdfAnnotFlags.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(annotation.PdfAnnotFlags, L51);
  dart.setFieldSignature(annotation.PdfAnnotFlags, () => ({
    __proto__: dart.getFields(annotation.PdfAnnotFlags.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$9]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(annotation.PdfAnnotFlags, ['toString']);
  annotation.PdfAnnotFlags.invisible = C202 || CT.C202;
  annotation.PdfAnnotFlags.hidden = C203 || CT.C203;
  annotation.PdfAnnotFlags.print = C204 || CT.C204;
  annotation.PdfAnnotFlags.noZoom = C205 || CT.C205;
  annotation.PdfAnnotFlags.noRotate = C206 || CT.C206;
  annotation.PdfAnnotFlags.noView = C207 || CT.C207;
  annotation.PdfAnnotFlags.readOnly = C208 || CT.C208;
  annotation.PdfAnnotFlags.locked = C209 || CT.C209;
  annotation.PdfAnnotFlags.toggleNoView = C210 || CT.C210;
  annotation.PdfAnnotFlags.lockedContent = C211 || CT.C211;
  annotation.PdfAnnotFlags.values = C212 || CT.C212;
  var C213;
  var C214;
  var C215;
  var C216;
  annotation.PdfAnnotApparence = class PdfAnnotApparence extends core.Object {
    toString() {
      return this[_name$9];
    }
  };
  (annotation.PdfAnnotApparence.new = function(index, _name) {
    this.index = index;
    this[_name$9] = _name;
    ;
  }).prototype = annotation.PdfAnnotApparence.prototype;
  dart.addTypeTests(annotation.PdfAnnotApparence);
  dart.addTypeCaches(annotation.PdfAnnotApparence);
  dart.setMethodSignature(annotation.PdfAnnotApparence, () => ({
    __proto__: dart.getMethods(annotation.PdfAnnotApparence.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(annotation.PdfAnnotApparence, L51);
  dart.setFieldSignature(annotation.PdfAnnotApparence, () => ({
    __proto__: dart.getFields(annotation.PdfAnnotApparence.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$9]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(annotation.PdfAnnotApparence, ['toString']);
  annotation.PdfAnnotApparence.normal = C213 || CT.C213;
  annotation.PdfAnnotApparence.rollover = C214 || CT.C214;
  annotation.PdfAnnotApparence.down = C215 || CT.C215;
  annotation.PdfAnnotApparence.values = C216 || CT.C216;
  var _appearances = dart.privateName(annotation, "_appearances");
  var C217;
  var subtype$0 = dart.privateName(annotation, "PdfAnnotBase.subtype");
  var rect$0 = dart.privateName(annotation, "PdfAnnotBase.rect");
  var border$ = dart.privateName(annotation, "PdfAnnotBase.border");
  var content$ = dart.privateName(annotation, "PdfAnnotBase.content");
  var name$ = dart.privateName(annotation, "PdfAnnotBase.name");
  var flags$0 = dart.privateName(annotation, "PdfAnnotBase.flags");
  var date$ = dart.privateName(annotation, "PdfAnnotBase.date");
  var color$1 = dart.privateName(annotation, "PdfAnnotBase.color");
  annotation.PdfAnnotBase = class PdfAnnotBase extends core.Object {
    get subtype() {
      return this[subtype$0];
    }
    set subtype(value) {
      super.subtype = value;
    }
    get rect() {
      return this[rect$0];
    }
    set rect(value) {
      super.rect = value;
    }
    get border() {
      return this[border$];
    }
    set border(value) {
      super.border = value;
    }
    get content() {
      return this[content$];
    }
    set content(value) {
      super.content = value;
    }
    get name() {
      return this[name$];
    }
    set name(value) {
      super.name = value;
    }
    get flags() {
      return this[flags$0];
    }
    set flags(value) {
      super.flags = value;
    }
    get date() {
      return this[date$];
    }
    set date(value) {
      super.date = value;
    }
    get color() {
      return this[color$1];
    }
    set color(value) {
      super.color = value;
    }
    get flagValue() {
      if (this.flags == null || dart.test(this.flags[$isEmpty])) {
        return 0;
      }
      return this.flags[$map](intL(), dart.fn(e => (1)[$leftShift](e.index), PdfAnnotFlagsLTointL()))[$reduce](dart.fn((a, b) => (dart.notNull(a) | dart.notNull(b)) >>> 0, intLAndintLTointL()));
    }
    appearance(pdfDocument, type, opts) {
      let t6;
      let name = opts && 'name' in opts ? opts.name : null;
      let matrix = opts && 'matrix' in opts ? opts.matrix : null;
      let boundingBox = opts && 'boundingBox' in opts ? opts.boundingBox : null;
      let s = new graphic_stream.PdfGraphicXObject.new(pdfDocument, "/Form");
      let n = null;
      switch (type) {
        case C213 || CT.C213:
        {
          n = "/N";
          break;
        }
        case C214 || CT.C214:
        {
          n = "/R";
          break;
        }
        case C215 || CT.C215:
        {
          n = "/D";
          break;
        }
      }
      if (name == null) {
        this[_appearances][$_set](n, s.ref());
      } else {
        if (!PdfDictL().is(this[_appearances][$_get](n))) {
          this[_appearances][$_set](n, new data_types.PdfDict.new());
        }
        let d = PdfDictL().as(this[_appearances][$_get](n));
        d._set(name, s.ref());
      }
      if (matrix != null) {
        s.params._set("/Matrix", data_types.PdfArray.fromNum(JSArrayOfdoubleL().of([matrix._get(0), matrix._get(1), matrix._get(4), matrix._get(5), matrix._get(12), matrix._get(13)])));
      }
      let bbox = (t6 = boundingBox, t6 == null ? rect.PdfRect.fromPoints(point.PdfPoint.zero, this.rect.size) : t6);
      s.params._set("/BBox", data_types.PdfArray.fromNum(JSArrayOfdoubleL().of([bbox.x, bbox.y, bbox.width, bbox.height])));
      let g = new graphics.PdfGraphics.new(s, s.buf);
      return g;
    }
    build(page, object, params) {
      params._set("/Subtype", new data_types.PdfName.new(this.subtype));
      params._set("/Rect", data_types.PdfArray.fromNum(JSArrayOfdoubleL().of([this.rect.left, this.rect.bottom, this.rect.right, this.rect.top])));
      params._set("/P", page.ref());
      if (this.border == null) {
        params._set("/Border", data_types.PdfArray.fromNum(C217 || CT.C217));
      } else {
        params._set("/BS", this.border.ref());
      }
      if (this.content != null) {
        params._set("/Contents", data_types.PdfSecString.fromString(object, this.content));
      }
      if (this.name != null) {
        params._set("/NM", data_types.PdfSecString.fromString(object, this.name));
      }
      if (this.flags != null && dart.test(this.flags[$isNotEmpty])) {
        params._set("/F", new data_types.PdfNum.new(this.flagValue));
      }
      if (this.date != null) {
        params._set("/M", data_types.PdfSecString.fromDate(object, this.date));
      }
      if (this.color != null) {
        params._set("/C", new data_types.PdfColorType.new(this.color));
      }
      if (dart.test(this[_appearances][$isNotEmpty])) {
        params._set("/AP", new data_types.PdfDict.new(this[_appearances]));
        if (PdfDictL().is(this[_appearances][$_get]("/N"))) {
          let n = PdfDictL().as(this[_appearances][$_get]("/N"));
          params._set("/AS", new data_types.PdfName.new(n.values[$keys][$first]));
        }
      }
    }
  };
  (annotation.PdfAnnotBase.new = function(opts) {
    let subtype = opts && 'subtype' in opts ? opts.subtype : null;
    let rect = opts && 'rect' in opts ? opts.rect : null;
    let border = opts && 'border' in opts ? opts.border : null;
    let content = opts && 'content' in opts ? opts.content : null;
    let name = opts && 'name' in opts ? opts.name : null;
    let flags = opts && 'flags' in opts ? opts.flags : null;
    let date = opts && 'date' in opts ? opts.date : null;
    let color = opts && 'color' in opts ? opts.color : null;
    this[_appearances] = new (IdentityMapOfStringL$PdfDataTypeL()).new();
    this[subtype$0] = subtype;
    this[rect$0] = rect;
    this[border$] = border;
    this[content$] = content;
    this[name$] = name;
    this[flags$0] = flags;
    this[date$] = date;
    this[color$1] = color;
    if (!(subtype != null)) dart.assertFailed(null, L50, 102, 16, "subtype != null");
    if (!(rect != null)) dart.assertFailed(null, L50, 103, 16, "rect != null");
    ;
  }).prototype = annotation.PdfAnnotBase.prototype;
  dart.addTypeTests(annotation.PdfAnnotBase);
  dart.addTypeCaches(annotation.PdfAnnotBase);
  dart.setMethodSignature(annotation.PdfAnnotBase, () => ({
    __proto__: dart.getMethods(annotation.PdfAnnotBase.__proto__),
    appearance: dart.fnType(dart.legacy(graphics.PdfGraphics), [dart.legacy(document.PdfDocument), dart.legacy(annotation.PdfAnnotApparence)], {boundingBox: dart.legacy(rect.PdfRect), matrix: dart.legacy(vector_math_64.Matrix4), name: dart.legacy(core.String)}, {}),
    build: dart.fnType(dart.void, [dart.legacy(page.PdfPage), dart.legacy(object.PdfObject), dart.legacy(data_types.PdfDict)])
  }));
  dart.setGetterSignature(annotation.PdfAnnotBase, () => ({
    __proto__: dart.getGetters(annotation.PdfAnnotBase.__proto__),
    flagValue: dart.legacy(core.int)
  }));
  dart.setLibraryUri(annotation.PdfAnnotBase, L51);
  dart.setFieldSignature(annotation.PdfAnnotBase, () => ({
    __proto__: dart.getFields(annotation.PdfAnnotBase.__proto__),
    subtype: dart.finalFieldType(dart.legacy(core.String)),
    rect: dart.finalFieldType(dart.legacy(rect.PdfRect)),
    border: dart.finalFieldType(dart.legacy(border.PdfBorder)),
    content: dart.finalFieldType(dart.legacy(core.String)),
    name: dart.finalFieldType(dart.legacy(core.String)),
    flags: dart.finalFieldType(dart.legacy(core.Set$(dart.legacy(annotation.PdfAnnotFlags)))),
    date: dart.finalFieldType(dart.legacy(core.DateTime)),
    color: dart.finalFieldType(dart.legacy(color.PdfColor)),
    [_appearances]: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(data_types.PdfDataType))))
  }));
  annotation.PdfAnnotText = class PdfAnnotText extends annotation.PdfAnnotBase {};
  (annotation.PdfAnnotText.new = function(opts) {
    let rect = opts && 'rect' in opts ? opts.rect : null;
    let content = opts && 'content' in opts ? opts.content : null;
    let border = opts && 'border' in opts ? opts.border : null;
    let name = opts && 'name' in opts ? opts.name : null;
    let flags = opts && 'flags' in opts ? opts.flags : null;
    let date = opts && 'date' in opts ? opts.date : null;
    let color = opts && 'color' in opts ? opts.color : null;
    if (!(rect != null)) dart.assertFailed(null, L50, 244, 16, "rect != null");
    if (!(content != null)) dart.assertFailed(null, L50, 245, 16, "content != null");
    annotation.PdfAnnotText.__proto__.new.call(this, {subtype: "/Text", rect: rect, border: border, content: content, name: name, flags: flags, date: date, color: color});
    ;
  }).prototype = annotation.PdfAnnotText.prototype;
  dart.addTypeTests(annotation.PdfAnnotText);
  dart.addTypeCaches(annotation.PdfAnnotText);
  dart.setLibraryUri(annotation.PdfAnnotText, L51);
  var C218;
  var dest$0 = dart.privateName(annotation, "PdfAnnotNamedLink.dest");
  annotation.PdfAnnotNamedLink = class PdfAnnotNamedLink extends annotation.PdfAnnotBase {
    get dest() {
      return this[dest$0];
    }
    set dest(value) {
      super.dest = value;
    }
    build(page, object, params) {
      super.build(page, object, params);
      params._set("/A", new data_types.PdfDict.new(new (IdentityMapOfStringL$PdfDataTypeL()).from(["/S", C218 || CT.C218, "/D", data_types.PdfSecString.fromString(object, this.dest)])));
    }
  };
  (annotation.PdfAnnotNamedLink.new = function(opts) {
    let rect = opts && 'rect' in opts ? opts.rect : null;
    let dest = opts && 'dest' in opts ? opts.dest : null;
    let border = opts && 'border' in opts ? opts.border : null;
    let flags = opts && 'flags' in opts ? opts.flags : null;
    let date = opts && 'date' in opts ? opts.date : null;
    let color = opts && 'color' in opts ? opts.color : null;
    this[dest$0] = dest;
    annotation.PdfAnnotNamedLink.__proto__.new.call(this, {subtype: "/Link", rect: rect, border: border, flags: flags, date: date, color: color});
    ;
  }).prototype = annotation.PdfAnnotNamedLink.prototype;
  dart.addTypeTests(annotation.PdfAnnotNamedLink);
  dart.addTypeCaches(annotation.PdfAnnotNamedLink);
  dart.setLibraryUri(annotation.PdfAnnotNamedLink, L51);
  dart.setFieldSignature(annotation.PdfAnnotNamedLink, () => ({
    __proto__: dart.getFields(annotation.PdfAnnotNamedLink.__proto__),
    dest: dart.finalFieldType(dart.legacy(core.String))
  }));
  var C219;
  var url$ = dart.privateName(annotation, "PdfAnnotUrlLink.url");
  annotation.PdfAnnotUrlLink = class PdfAnnotUrlLink extends annotation.PdfAnnotBase {
    get url() {
      return this[url$];
    }
    set url(value) {
      super.url = value;
    }
    build(page, object, params) {
      super.build(page, object, params);
      params._set("/A", new data_types.PdfDict.new(new (IdentityMapOfStringL$PdfDataTypeL()).from(["/S", C219 || CT.C219, "/URI", data_types.PdfSecString.fromString(object, this.url)])));
    }
  };
  (annotation.PdfAnnotUrlLink.new = function(opts) {
    let rect = opts && 'rect' in opts ? opts.rect : null;
    let url = opts && 'url' in opts ? opts.url : null;
    let border = opts && 'border' in opts ? opts.border : null;
    let flags = opts && 'flags' in opts ? opts.flags : null;
    let date = opts && 'date' in opts ? opts.date : null;
    let color = opts && 'color' in opts ? opts.color : null;
    this[url$] = url;
    if (!(rect != null)) dart.assertFailed(null, L50, 299, 16, "rect != null");
    if (!(url != null)) dart.assertFailed(null, L50, 300, 16, "url != null");
    annotation.PdfAnnotUrlLink.__proto__.new.call(this, {subtype: "/Link", rect: rect, border: border, flags: flags, date: date, color: color});
    ;
  }).prototype = annotation.PdfAnnotUrlLink.prototype;
  dart.addTypeTests(annotation.PdfAnnotUrlLink);
  dart.addTypeCaches(annotation.PdfAnnotUrlLink);
  dart.setLibraryUri(annotation.PdfAnnotUrlLink, L51);
  dart.setFieldSignature(annotation.PdfAnnotUrlLink, () => ({
    __proto__: dart.getFields(annotation.PdfAnnotUrlLink.__proto__),
    url: dart.finalFieldType(dart.legacy(core.String))
  }));
  var C220;
  var C221;
  var C222;
  var C223;
  var C224;
  var C225;
  annotation.PdfAnnotHighlighting = class PdfAnnotHighlighting extends core.Object {
    toString() {
      return this[_name$9];
    }
  };
  (annotation.PdfAnnotHighlighting.new = function(index, _name) {
    this.index = index;
    this[_name$9] = _name;
    ;
  }).prototype = annotation.PdfAnnotHighlighting.prototype;
  dart.addTypeTests(annotation.PdfAnnotHighlighting);
  dart.addTypeCaches(annotation.PdfAnnotHighlighting);
  dart.setMethodSignature(annotation.PdfAnnotHighlighting, () => ({
    __proto__: dart.getMethods(annotation.PdfAnnotHighlighting.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(annotation.PdfAnnotHighlighting, L51);
  dart.setFieldSignature(annotation.PdfAnnotHighlighting, () => ({
    __proto__: dart.getFields(annotation.PdfAnnotHighlighting.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$9]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(annotation.PdfAnnotHighlighting, ['toString']);
  annotation.PdfAnnotHighlighting.none = C220 || CT.C220;
  annotation.PdfAnnotHighlighting.invert = C221 || CT.C221;
  annotation.PdfAnnotHighlighting.outline = C222 || CT.C222;
  annotation.PdfAnnotHighlighting.push = C223 || CT.C223;
  annotation.PdfAnnotHighlighting.toggle = C224 || CT.C224;
  annotation.PdfAnnotHighlighting.values = C225 || CT.C225;
  var C226;
  var C227;
  var C228;
  var C229;
  var C230;
  var fieldType$ = dart.privateName(annotation, "PdfAnnotWidget.fieldType");
  var fieldName$ = dart.privateName(annotation, "PdfAnnotWidget.fieldName");
  var highlighting$ = dart.privateName(annotation, "PdfAnnotWidget.highlighting");
  var backgroundColor$ = dart.privateName(annotation, "PdfAnnotWidget.backgroundColor");
  annotation.PdfAnnotWidget = class PdfAnnotWidget extends annotation.PdfAnnotBase {
    get fieldType() {
      return this[fieldType$];
    }
    set fieldType(value) {
      super.fieldType = value;
    }
    get fieldName() {
      return this[fieldName$];
    }
    set fieldName(value) {
      super.fieldName = value;
    }
    get highlighting() {
      return this[highlighting$];
    }
    set highlighting(value) {
      super.highlighting = value;
    }
    get backgroundColor() {
      return this[backgroundColor$];
    }
    set backgroundColor(value) {
      super.backgroundColor = value;
    }
    build(page, object, params) {
      super.build(page, object, params);
      params._set("/FT", new data_types.PdfName.new(this.fieldType));
      if (this.fieldName != null) {
        params._set("/T", data_types.PdfSecString.fromString(object, this.fieldName));
      }
      let mk = new data_types.PdfDict.new();
      if (this.color != null) {
        mk.values[$_set]("/BC", new data_types.PdfColorType.new(this.color));
      }
      if (this.backgroundColor != null) {
        mk.values[$_set]("/BG", new data_types.PdfColorType.new(this.backgroundColor));
      }
      if (dart.test(mk.values[$isNotEmpty])) {
        params._set("/MK", mk);
      }
      if (this.highlighting != null) {
        switch (this.highlighting) {
          case C220 || CT.C220:
          {
            params._set("/H", C226 || CT.C226);
            break;
          }
          case C221 || CT.C221:
          {
            params._set("/H", C227 || CT.C227);
            break;
          }
          case C222 || CT.C222:
          {
            params._set("/H", C228 || CT.C228);
            break;
          }
          case C223 || CT.C223:
          {
            params._set("/H", C229 || CT.C229);
            break;
          }
          case C224 || CT.C224:
          {
            params._set("/H", C230 || CT.C230);
            break;
          }
        }
      }
    }
  };
  (annotation.PdfAnnotWidget.new = function(opts) {
    let rect = opts && 'rect' in opts ? opts.rect : null;
    let fieldType = opts && 'fieldType' in opts ? opts.fieldType : null;
    let fieldName = opts && 'fieldName' in opts ? opts.fieldName : null;
    let border = opts && 'border' in opts ? opts.border : null;
    let flags = opts && 'flags' in opts ? opts.flags : null;
    let date = opts && 'date' in opts ? opts.date : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let highlighting = opts && 'highlighting' in opts ? opts.highlighting : null;
    this[fieldType$] = fieldType;
    this[fieldName$] = fieldName;
    this[backgroundColor$] = backgroundColor;
    this[highlighting$] = highlighting;
    if (!(rect != null)) dart.assertFailed(null, L50, 338, 16, "rect != null");
    if (!(fieldType != null)) dart.assertFailed(null, L50, 339, 16, "fieldType != null");
    annotation.PdfAnnotWidget.__proto__.new.call(this, {subtype: "/Widget", rect: rect, border: border, flags: flags, date: date, color: color});
    ;
  }).prototype = annotation.PdfAnnotWidget.prototype;
  dart.addTypeTests(annotation.PdfAnnotWidget);
  dart.addTypeCaches(annotation.PdfAnnotWidget);
  dart.setLibraryUri(annotation.PdfAnnotWidget, L51);
  dart.setFieldSignature(annotation.PdfAnnotWidget, () => ({
    __proto__: dart.getFields(annotation.PdfAnnotWidget.__proto__),
    fieldType: dart.finalFieldType(dart.legacy(core.String)),
    fieldName: dart.finalFieldType(dart.legacy(core.String)),
    highlighting: dart.finalFieldType(dart.legacy(annotation.PdfAnnotHighlighting)),
    backgroundColor: dart.finalFieldType(dart.legacy(color.PdfColor))
  }));
  annotation.PdfAnnotSign = class PdfAnnotSign extends annotation.PdfAnnotWidget {
    build(page, object, params) {
      super.build(page, object, params);
      if (!(page.pdfDocument.sign != null)) dart.assertFailed(null, L50, 426, 12, "page.pdfDocument.sign != null");
      params._set("/V", page.pdfDocument.sign.ref());
    }
  };
  (annotation.PdfAnnotSign.new = function(opts) {
    let rect = opts && 'rect' in opts ? opts.rect : null;
    let fieldName = opts && 'fieldName' in opts ? opts.fieldName : null;
    let border = opts && 'border' in opts ? opts.border : null;
    let flags = opts && 'flags' in opts ? opts.flags : null;
    let date = opts && 'date' in opts ? opts.date : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let highlighting = opts && 'highlighting' in opts ? opts.highlighting : null;
    if (!(rect != null)) dart.assertFailed(null, L50, 411, 16, "rect != null");
    annotation.PdfAnnotSign.__proto__.new.call(this, {rect: rect, fieldType: "/Sig", fieldName: fieldName, border: border, flags: flags, date: date, color: color, highlighting: highlighting});
    ;
  }).prototype = annotation.PdfAnnotSign.prototype;
  dart.addTypeTests(annotation.PdfAnnotSign);
  dart.addTypeCaches(annotation.PdfAnnotSign);
  dart.setLibraryUri(annotation.PdfAnnotSign, L51);
  var C231;
  var C232;
  var C233;
  var C234;
  var C235;
  var C236;
  var C237;
  var C238;
  var C239;
  var C240;
  var C241;
  var C242;
  var C243;
  var C244;
  var C245;
  var C246;
  var C247;
  var C248;
  var C249;
  var C250;
  var C251;
  var C252;
  var C253;
  var C254;
  var C255;
  var C256;
  var C257;
  var C258;
  annotation.PdfFieldFlags = class PdfFieldFlags extends core.Object {
    toString() {
      return this[_name$9];
    }
  };
  (annotation.PdfFieldFlags.new = function(index, _name) {
    this.index = index;
    this[_name$9] = _name;
    ;
  }).prototype = annotation.PdfFieldFlags.prototype;
  dart.addTypeTests(annotation.PdfFieldFlags);
  dart.addTypeCaches(annotation.PdfFieldFlags);
  dart.setMethodSignature(annotation.PdfFieldFlags, () => ({
    __proto__: dart.getMethods(annotation.PdfFieldFlags.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(annotation.PdfFieldFlags, L51);
  dart.setFieldSignature(annotation.PdfFieldFlags, () => ({
    __proto__: dart.getFields(annotation.PdfFieldFlags.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$9]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(annotation.PdfFieldFlags, ['toString']);
  annotation.PdfFieldFlags.readOnly = C231 || CT.C231;
  annotation.PdfFieldFlags.mandatory = C232 || CT.C232;
  annotation.PdfFieldFlags.noExport = C233 || CT.C233;
  annotation.PdfFieldFlags.reserved4 = C234 || CT.C234;
  annotation.PdfFieldFlags.reserved5 = C235 || CT.C235;
  annotation.PdfFieldFlags.reserved6 = C236 || CT.C236;
  annotation.PdfFieldFlags.reserved7 = C237 || CT.C237;
  annotation.PdfFieldFlags.reserved8 = C238 || CT.C238;
  annotation.PdfFieldFlags.reserved9 = C239 || CT.C239;
  annotation.PdfFieldFlags.reserved10 = C240 || CT.C240;
  annotation.PdfFieldFlags.reserved11 = C241 || CT.C241;
  annotation.PdfFieldFlags.reserved12 = C242 || CT.C242;
  annotation.PdfFieldFlags.multiline = C243 || CT.C243;
  annotation.PdfFieldFlags.password = C244 || CT.C244;
  annotation.PdfFieldFlags.noToggleToOff = C245 || CT.C245;
  annotation.PdfFieldFlags.radio = C246 || CT.C246;
  annotation.PdfFieldFlags.pushButton = C247 || CT.C247;
  annotation.PdfFieldFlags.combo = C248 || CT.C248;
  annotation.PdfFieldFlags.edit = C249 || CT.C249;
  annotation.PdfFieldFlags.sort = C250 || CT.C250;
  annotation.PdfFieldFlags.fileSelect = C251 || CT.C251;
  annotation.PdfFieldFlags.multiSelect = C252 || CT.C252;
  annotation.PdfFieldFlags.doNotSpellCheck = C253 || CT.C253;
  annotation.PdfFieldFlags.doNotScroll = C254 || CT.C254;
  annotation.PdfFieldFlags.comb = C255 || CT.C255;
  annotation.PdfFieldFlags.radiosInUnison = C256 || CT.C256;
  annotation.PdfFieldFlags.commitOnSelChange = C257 || CT.C257;
  annotation.PdfFieldFlags.values = C258 || CT.C258;
  var alternateName$ = dart.privateName(annotation, "PdfFormField.alternateName");
  var mappingName$ = dart.privateName(annotation, "PdfFormField.mappingName");
  var fieldFlags$ = dart.privateName(annotation, "PdfFormField.fieldFlags");
  annotation.PdfFormField = class PdfFormField extends annotation.PdfAnnotWidget {
    get alternateName() {
      return this[alternateName$];
    }
    set alternateName(value) {
      super.alternateName = value;
    }
    get mappingName() {
      return this[mappingName$];
    }
    set mappingName(value) {
      super.mappingName = value;
    }
    get fieldFlags() {
      return this[fieldFlags$];
    }
    set fieldFlags(value) {
      super.fieldFlags = value;
    }
    get fieldFlagsValue() {
      if (this.fieldFlags == null || dart.test(this.fieldFlags[$isEmpty])) {
        return 0;
      }
      return this.fieldFlags[$map](intL(), dart.fn(e => (1)[$leftShift](e.index), PdfFieldFlagsLTointL()))[$reduce](dart.fn((a, b) => (dart.notNull(a) | dart.notNull(b)) >>> 0, intLAndintLTointL()));
    }
    build(page, object, params) {
      super.build(page, object, params);
      if (this.alternateName != null) {
        params._set("/TU", data_types.PdfSecString.fromString(object, this.alternateName));
      }
      if (this.mappingName != null) {
        params._set("/TM", data_types.PdfSecString.fromString(object, this.mappingName));
      }
      params._set("/Ff", new data_types.PdfNum.new(this.fieldFlagsValue));
    }
  };
  (annotation.PdfFormField.new = function(opts) {
    let fieldType = opts && 'fieldType' in opts ? opts.fieldType : null;
    let rect = opts && 'rect' in opts ? opts.rect : null;
    let fieldName = opts && 'fieldName' in opts ? opts.fieldName : null;
    let alternateName = opts && 'alternateName' in opts ? opts.alternateName : null;
    let mappingName = opts && 'mappingName' in opts ? opts.mappingName : null;
    let border = opts && 'border' in opts ? opts.border : null;
    let flags = opts && 'flags' in opts ? opts.flags : null;
    let date = opts && 'date' in opts ? opts.date : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let highlighting = opts && 'highlighting' in opts ? opts.highlighting : null;
    let fieldFlags = opts && 'fieldFlags' in opts ? opts.fieldFlags : null;
    this[alternateName$] = alternateName;
    this[mappingName$] = mappingName;
    this[fieldFlags$] = fieldFlags;
    if (!(rect != null)) dart.assertFailed(null, L50, 543, 16, "rect != null");
    if (!(fieldType != null)) dart.assertFailed(null, L50, 544, 16, "fieldType != null");
    annotation.PdfFormField.__proto__.new.call(this, {rect: rect, fieldType: fieldType, fieldName: fieldName, border: border, flags: flags, date: date, backgroundColor: backgroundColor, color: color, highlighting: highlighting});
    ;
  }).prototype = annotation.PdfFormField.prototype;
  dart.addTypeTests(annotation.PdfFormField);
  dart.addTypeCaches(annotation.PdfFormField);
  dart.setGetterSignature(annotation.PdfFormField, () => ({
    __proto__: dart.getGetters(annotation.PdfFormField.__proto__),
    fieldFlagsValue: dart.legacy(core.int)
  }));
  dart.setLibraryUri(annotation.PdfFormField, L51);
  dart.setFieldSignature(annotation.PdfFormField, () => ({
    __proto__: dart.getFields(annotation.PdfFormField.__proto__),
    alternateName: dart.finalFieldType(dart.legacy(core.String)),
    mappingName: dart.finalFieldType(dart.legacy(core.String)),
    fieldFlags: dart.finalFieldType(dart.legacy(core.Set$(dart.legacy(annotation.PdfFieldFlags))))
  }));
  var C259;
  var C260;
  var C261;
  var C262;
  annotation.PdfTextFieldAlign = class PdfTextFieldAlign extends core.Object {
    toString() {
      return this[_name$9];
    }
  };
  (annotation.PdfTextFieldAlign.new = function(index, _name) {
    this.index = index;
    this[_name$9] = _name;
    ;
  }).prototype = annotation.PdfTextFieldAlign.prototype;
  dart.addTypeTests(annotation.PdfTextFieldAlign);
  dart.addTypeCaches(annotation.PdfTextFieldAlign);
  dart.setMethodSignature(annotation.PdfTextFieldAlign, () => ({
    __proto__: dart.getMethods(annotation.PdfTextFieldAlign.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(annotation.PdfTextFieldAlign, L51);
  dart.setFieldSignature(annotation.PdfTextFieldAlign, () => ({
    __proto__: dart.getFields(annotation.PdfTextFieldAlign.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$9]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(annotation.PdfTextFieldAlign, ['toString']);
  annotation.PdfTextFieldAlign.left = C259 || CT.C259;
  annotation.PdfTextFieldAlign.center = C260 || CT.C260;
  annotation.PdfTextFieldAlign.right = C261 || CT.C261;
  annotation.PdfTextFieldAlign.values = C262 || CT.C262;
  var maxLength$ = dart.privateName(annotation, "PdfTextField.maxLength");
  var value$3 = dart.privateName(annotation, "PdfTextField.value");
  var defaultValue$ = dart.privateName(annotation, "PdfTextField.defaultValue");
  var font$0 = dart.privateName(annotation, "PdfTextField.font");
  var fontSize$ = dart.privateName(annotation, "PdfTextField.fontSize");
  var textColor$ = dart.privateName(annotation, "PdfTextField.textColor");
  var textAlign$ = dart.privateName(annotation, "PdfTextField.textAlign");
  annotation.PdfTextField = class PdfTextField extends annotation.PdfFormField {
    get maxLength() {
      return this[maxLength$];
    }
    set maxLength(value) {
      super.maxLength = value;
    }
    get value() {
      return this[value$3];
    }
    set value(value) {
      super.value = value;
    }
    get defaultValue() {
      return this[defaultValue$];
    }
    set defaultValue(value) {
      super.defaultValue = value;
    }
    get font() {
      return this[font$0];
    }
    set font(value) {
      super.font = value;
    }
    get fontSize() {
      return this[fontSize$];
    }
    set fontSize(value) {
      super.fontSize = value;
    }
    get textColor() {
      return this[textColor$];
    }
    set textColor(value) {
      super.textColor = value;
    }
    get textAlign() {
      return this[textAlign$];
    }
    set textAlign(value) {
      super.textAlign = value;
    }
    build(page, object, params) {
      super.build(page, object, params);
      if (this.maxLength != null) {
        params._set("/MaxLen", new data_types.PdfNum.new(this.maxLength));
      }
      let buf = new stream.PdfStream.new();
      let g = new graphics.PdfGraphics.new(page, buf);
      g.setFillColor(this.textColor);
      g.setFont(this.font, this.fontSize);
      params._set("/DA", data_types.PdfSecString.fromStream(object, buf));
      if (this.value != null) {
        params._set("/V", data_types.PdfSecString.fromString(object, this.value));
      }
      if (this.defaultValue != null) {
        params._set("/DV", data_types.PdfSecString.fromString(object, this.defaultValue));
      }
      if (this.textAlign != null) {
        params._set("/Q", new data_types.PdfNum.new(this.textAlign.index));
      }
    }
  };
  (annotation.PdfTextField.new = function(opts) {
    let rect = opts && 'rect' in opts ? opts.rect : null;
    let fieldName = opts && 'fieldName' in opts ? opts.fieldName : null;
    let alternateName = opts && 'alternateName' in opts ? opts.alternateName : null;
    let mappingName = opts && 'mappingName' in opts ? opts.mappingName : null;
    let border = opts && 'border' in opts ? opts.border : null;
    let flags = opts && 'flags' in opts ? opts.flags : null;
    let date = opts && 'date' in opts ? opts.date : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let highlighting = opts && 'highlighting' in opts ? opts.highlighting : null;
    let fieldFlags = opts && 'fieldFlags' in opts ? opts.fieldFlags : null;
    let value = opts && 'value' in opts ? opts.value : null;
    let defaultValue = opts && 'defaultValue' in opts ? opts.defaultValue : null;
    let maxLength = opts && 'maxLength' in opts ? opts.maxLength : null;
    let font = opts && 'font' in opts ? opts.font : null;
    let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
    let textColor = opts && 'textColor' in opts ? opts.textColor : null;
    let textAlign = opts && 'textAlign' in opts ? opts.textAlign : null;
    this[value$3] = value;
    this[defaultValue$] = defaultValue;
    this[maxLength$] = maxLength;
    this[font$0] = font;
    this[fontSize$] = fontSize;
    this[textColor$] = textColor;
    this[textAlign$] = textAlign;
    if (!(rect != null)) dart.assertFailed(null, L50, 609, 16, "rect != null");
    if (!(fontSize != null)) dart.assertFailed(null, L50, 610, 16, "fontSize != null");
    if (!(textColor != null)) dart.assertFailed(null, L50, 611, 16, "textColor != null");
    if (!(font != null)) dart.assertFailed(null, L50, 612, 16, "font != null");
    annotation.PdfTextField.__proto__.new.call(this, {rect: rect, fieldType: "/Tx", fieldName: fieldName, border: border, flags: flags, date: date, color: color, backgroundColor: backgroundColor, highlighting: highlighting, alternateName: alternateName, mappingName: mappingName, fieldFlags: fieldFlags});
    ;
  }).prototype = annotation.PdfTextField.prototype;
  dart.addTypeTests(annotation.PdfTextField);
  dart.addTypeCaches(annotation.PdfTextField);
  dart.setLibraryUri(annotation.PdfTextField, L51);
  dart.setFieldSignature(annotation.PdfTextField, () => ({
    __proto__: dart.getFields(annotation.PdfTextField.__proto__),
    maxLength: dart.finalFieldType(dart.legacy(core.int)),
    value: dart.finalFieldType(dart.legacy(core.String)),
    defaultValue: dart.finalFieldType(dart.legacy(core.String)),
    font: dart.finalFieldType(dart.legacy(font.PdfFont)),
    fontSize: dart.finalFieldType(dart.legacy(core.double)),
    textColor: dart.finalFieldType(dart.legacy(color.PdfColor)),
    textAlign: dart.finalFieldType(dart.legacy(annotation.PdfTextFieldAlign))
  }));
  var C263;
  var C264;
  var value$4 = dart.privateName(annotation, "PdfButtonField.value");
  var defaultValue$0 = dart.privateName(annotation, "PdfButtonField.defaultValue");
  annotation.PdfButtonField = class PdfButtonField extends annotation.PdfFormField {
    get value() {
      return this[value$4];
    }
    set value(value) {
      super.value = value;
    }
    get defaultValue() {
      return this[defaultValue$0];
    }
    set defaultValue(value) {
      super.defaultValue = value;
    }
    build(page, object, params) {
      super.build(page, object, params);
      if (this.value != null) {
        params._set("/V", dart.test(this.value) ? C263 || CT.C263 : C264 || CT.C264);
      }
      if (this.defaultValue != null) {
        params._set("/DV", dart.test(this.defaultValue) ? C263 || CT.C263 : C264 || CT.C264);
      }
    }
  };
  (annotation.PdfButtonField.new = function(opts) {
    let rect = opts && 'rect' in opts ? opts.rect : null;
    let fieldName = opts && 'fieldName' in opts ? opts.fieldName : null;
    let alternateName = opts && 'alternateName' in opts ? opts.alternateName : null;
    let mappingName = opts && 'mappingName' in opts ? opts.mappingName : null;
    let border = opts && 'border' in opts ? opts.border : null;
    let flags = opts && 'flags' in opts ? opts.flags : null;
    let date = opts && 'date' in opts ? opts.date : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let highlighting = opts && 'highlighting' in opts ? opts.highlighting : null;
    let fieldFlags = opts && 'fieldFlags' in opts ? opts.fieldFlags : null;
    let value = opts && 'value' in opts ? opts.value : null;
    let defaultValue = opts && 'defaultValue' in opts ? opts.defaultValue : null;
    this[value$4] = value;
    this[defaultValue$0] = defaultValue;
    if (!(rect != null)) dart.assertFailed(null, L50, 682, 16, "rect != null");
    annotation.PdfButtonField.__proto__.new.call(this, {rect: rect, fieldType: "/Btn", fieldName: fieldName, border: border, flags: flags, date: date, color: color, backgroundColor: backgroundColor, highlighting: highlighting, alternateName: alternateName, mappingName: mappingName, fieldFlags: fieldFlags});
    ;
  }).prototype = annotation.PdfButtonField.prototype;
  dart.addTypeTests(annotation.PdfButtonField);
  dart.addTypeCaches(annotation.PdfButtonField);
  dart.setLibraryUri(annotation.PdfButtonField, L51);
  dart.setFieldSignature(annotation.PdfButtonField, () => ({
    __proto__: dart.getFields(annotation.PdfButtonField.__proto__),
    value: dart.finalFieldType(dart.legacy(core.bool)),
    defaultValue: dart.finalFieldType(dart.legacy(core.bool))
  }));
  dart.trackLibraries("packages/pdf/src/pdf/signature.dart", {
    "package:pdf/src/pdf/signature.dart": signature,
    "package:pdf/src/pdf/output.dart": output,
    "package:pdf/src/pdf/io/js.dart": js,
    "package:pdf/src/pdf/info.dart": info,
    "package:pdf/src/pdf/encryption.dart": encryption,
    "package:pdf/src/pdf/document_parser.dart": document_parser,
    "package:pdf/src/pdf/page_list.dart": page_list,
    "package:pdf/src/pdf/outline.dart": outline,
    "package:pdf/src/pdf/shading.dart": shading,
    "package:pdf/src/pdf/pattern.dart": pattern,
    "package:pdf/src/pdf/xobject.dart": xobject,
    "package:pdf/src/pdf/exif.dart": exif,
    "package:pdf/src/pdf/image.dart": image$0,
    "package:pdf/src/pdf/graphics.dart": graphics,
    "package:pdf/src/pdf/function.dart": $function,
    "package:pdf/src/pdf/smask.dart": smask,
    "package:pdf/src/pdf/graphic_state.dart": graphic_state,
    "package:pdf/src/pdf/unicode_cmap.dart": unicode_cmap,
    "package:pdf/src/pdf/object_stream.dart": object_stream,
    "package:pdf/src/pdf/font_descriptor.dart": font_descriptor,
    "package:pdf/src/pdf/array.dart": array$,
    "package:pdf/src/pdf/ttffont.dart": ttffont,
    "package:pdf/src/pdf/type1_font.dart": type1_font,
    "package:pdf/src/pdf/font.dart": font,
    "package:pdf/src/pdf/graphic_stream.dart": graphic_stream,
    "package:pdf/src/pdf/page.dart": page,
    "package:pdf/src/pdf/names.dart": names,
    "package:pdf/src/pdf/catalog.dart": catalog,
    "package:pdf/src/pdf/document.dart": document,
    "package:pdf/src/pdf/object.dart": object,
    "package:pdf/src/pdf/data_types.dart": data_types,
    "package:pdf/src/pdf/border.dart": border,
    "package:pdf/src/pdf/annotation.dart": annotation,
    "package:pdf/pdf.dart": pdf
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["signature.dart","object.dart","output.dart","io/js.dart","info.dart","encryption.dart","document_parser.dart","page_list.dart","outline.dart","shading.dart","pattern.dart","object_stream.dart","xobject.dart","exif.dart","image.dart","graphics.dart","function.dart","smask.dart","graphic_state.dart","unicode_cmap.dart","font_descriptor.dart","array.dart","font.dart","ttffont.dart","type1_font.dart","graphic_stream.dart","page.dart","names.dart","catalog.dart","document.dart","data_types.dart","border.dart","annotation.dart"],"names":[],"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","file":"../../../../../../../../../packages/pdf/src/pdf/signature.dart.lib.js"}');
  // Exports:
  return {
    src__pdf__signature: signature,
    src__pdf__output: output,
    src__pdf__io__js: js,
    src__pdf__info: info,
    src__pdf__encryption: encryption,
    src__pdf__document_parser: document_parser,
    src__pdf__page_list: page_list,
    src__pdf__outline: outline,
    src__pdf__shading: shading,
    src__pdf__pattern: pattern,
    src__pdf__xobject: xobject,
    src__pdf__exif: exif,
    src__pdf__image: image$0,
    src__pdf__graphics: graphics,
    src__pdf__function: $function,
    src__pdf__smask: smask,
    src__pdf__graphic_state: graphic_state,
    src__pdf__unicode_cmap: unicode_cmap,
    src__pdf__object_stream: object_stream,
    src__pdf__font_descriptor: font_descriptor,
    src__pdf__array: array$,
    src__pdf__ttffont: ttffont,
    src__pdf__type1_font: type1_font,
    src__pdf__font: font,
    src__pdf__graphic_stream: graphic_stream,
    src__pdf__page: page,
    src__pdf__names: names,
    src__pdf__catalog: catalog,
    src__pdf__document: document,
    src__pdf__object: object,
    src__pdf__data_types: data_types,
    src__pdf__border: border,
    src__pdf__annotation: annotation,
    pdf: pdf
  };
}));

//# sourceMappingURL=signature.dart.lib.js.map
