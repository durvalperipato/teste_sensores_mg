define(['dart_sdk', 'packages/image/src/util/input_buffer.dart', 'packages/image/src/image.dart', 'packages/image/src/hdr/hdr_slice.dart', 'packages/image/src/formats/tiff/tiff_lzw_decoder.dart', 'packages/archive/src/zlib/inflate.dart', 'packages/archive/src/zlib_decoder.dart', 'packages/image/src/formats/jpeg_decoder.dart', 'packages/image/src/image_exception.dart', 'packages/image/src/hdr/half.dart', 'packages/image/src/color.dart', 'packages/image/src/formats/tiff/tiff_fax_decoder.dart', 'packages/image/src/formats/tiff/tiff_bit_reader.dart', 'packages/image/src/internal/bit_operators.dart'], (function load__packages__image__src__formats__tiff__tiff_image_dart(dart_sdk, packages__image__src__util__input_buffer$46dart, packages__image__src__image$46dart, packages__image__src__hdr__hdr_slice$46dart, packages__image__src__formats__tiff__tiff_lzw_decoder$46dart, packages__archive__src__zlib__inflate$46dart, packages__archive__src__zlib_decoder$46dart, packages__image__src__formats__jpeg_decoder$46dart, packages__image__src__image_exception$46dart, packages__image__src__hdr__half$46dart, packages__image__src__color$46dart, packages__image__src__formats__tiff__tiff_fax_decoder$46dart, packages__image__src__formats__tiff__tiff_bit_reader$46dart, packages__image__src__internal__bit_operators$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _js_helper = dart_sdk._js_helper;
  const _native_typed_data = dart_sdk._native_typed_data;
  const _interceptors = dart_sdk._interceptors;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const input_buffer = packages__image__src__util__input_buffer$46dart.src__util__input_buffer;
  const image = packages__image__src__image$46dart.src__image;
  const hdr_image = packages__image__src__hdr__hdr_slice$46dart.src__hdr__hdr_image;
  const tiff_lzw_decoder = packages__image__src__formats__tiff__tiff_lzw_decoder$46dart.src__formats__tiff__tiff_lzw_decoder;
  const inflate = packages__archive__src__zlib__inflate$46dart.src__zlib__inflate;
  const zlib_decoder = packages__archive__src__zlib_decoder$46dart.src__zlib_decoder;
  const jpeg_decoder = packages__image__src__formats__jpeg_decoder$46dart.src__formats__jpeg_decoder;
  const image_exception = packages__image__src__image_exception$46dart.src__image_exception;
  const half = packages__image__src__hdr__half$46dart.src__hdr__half;
  const color = packages__image__src__color$46dart.src__color;
  const tiff_fax_decoder = packages__image__src__formats__tiff__tiff_fax_decoder$46dart.src__formats__tiff__tiff_fax_decoder;
  const tiff_bit_reader = packages__image__src__formats__tiff__tiff_bit_reader$46dart.src__formats__tiff__tiff_bit_reader;
  const bit_operators = packages__image__src__internal__bit_operators$46dart.src__internal__bit_operators;
  var tiff_image = Object.create(dart.library);
  var tiff_entry = Object.create(dart.library);
  var $_set = dartx._set;
  var $length = dartx.length;
  var $truncate = dartx.truncate;
  var $rightShift = dartx['>>'];
  var $_get = dartx._get;
  var $leftShift = dartx['<<'];
  var $modulo = dartx['%'];
  var $containsKey = dartx.containsKey;
  var $clamp = dartx.clamp;
  var $toInt = dartx.toInt;
  var $add = dartx.add;
  var $toString = dartx.toString;
  var intL = () => (intL = dart.constFn(dart.legacy(core.int)))();
  var TiffEntryL = () => (TiffEntryL = dart.constFn(dart.legacy(tiff_entry.TiffEntry)))();
  var IdentityMapOfintL$TiffEntryL = () => (IdentityMapOfintL$TiffEntryL = dart.constFn(_js_helper.IdentityMap$(intL(), TiffEntryL())))();
  var StringL = () => (StringL = dart.constFn(dart.legacy(core.String)))();
  var JSArrayOfintL = () => (JSArrayOfintL = dart.constFn(_interceptors.JSArray$(intL())))();
  const CT = Object.create(null);
  var L0 = "package:image/src/formats/tiff/tiff_image.dart";
  var L1 = "package:image/src/formats/tiff/tiff_entry.dart";
  dart.defineLazy(CT, {
    get C0() {
      return C0 = dart.constMap(intL(), StringL(), [315, "artist", 258, "bitsPerSample", 265, "cellLength", 264, "cellWidth", 320, "colorMap", 259, "compression", 306, "dateTime", 34665, "exifIFD", 338, "extraSamples", 266, "fillOrder", 289, "freeByteCounts", 288, "freeOffsets", 291, "grayResponseCurve", 290, "grayResponseUnit", 316, "hostComputer", 34675, "iccProfile", 270, "imageDescription", 257, "imageLength", 256, "imageWidth", 33723, "iptc", 271, "make", 281, "maxSampleValue", 280, "minSampleValue", 272, "model", 254, "newSubfileType", 274, "orientation", 262, "photometricInterpretation", 34377, "photoshop", 284, "planarConfiguration", 317, "predictor", 296, "resolutionUnit", 278, "rowsPerStrip", 277, "samplesPerPixel", 305, "software", 279, "stripByteCounts", 273, "stropOffsets", 255, "subfileType", 292, "t4Options", 293, "t6Options", 263, "thresholding", 322, "tileWidth", 323, "tileLength", 324, "tileOffsets", 325, "tileByteCounts", 700, "xmp", 282, "xResolution", 283, "yResolution", 529, "yCbCrCoefficients", 530, "yCbCrSubsampling", 531, "yCbCrPositioning", 339, "sampleFormat"]);
    },
    get C1() {
      return C1 = dart.constList([0, 1, 1, 2, 4, 8, 1, 1, 2, 4, 8, 4, 8, 0], intL());
    }
  }, false);
  var _readTag = dart.privateName(tiff_image, "_readTag");
  var _readTagList = dart.privateName(tiff_image, "_readTagList");
  var _decodeTile = dart.privateName(tiff_image, "_decodeTile");
  var _decodeBilevelTile = dart.privateName(tiff_image, "_decodeBilevelTile");
  var _decodePackbits = dart.privateName(tiff_image, "_decodePackbits");
  var _jpegToImage = dart.privateName(tiff_image, "_jpegToImage");
  var tags = dart.privateName(tiff_image, "TiffImage.tags");
  var width = dart.privateName(tiff_image, "TiffImage.width");
  var height = dart.privateName(tiff_image, "TiffImage.height");
  var photometricType = dart.privateName(tiff_image, "TiffImage.photometricType");
  var compression = dart.privateName(tiff_image, "TiffImage.compression");
  var bitsPerSample = dart.privateName(tiff_image, "TiffImage.bitsPerSample");
  var samplesPerPixel = dart.privateName(tiff_image, "TiffImage.samplesPerPixel");
  var sampleFormat = dart.privateName(tiff_image, "TiffImage.sampleFormat");
  var imageType = dart.privateName(tiff_image, "TiffImage.imageType");
  var isWhiteZero = dart.privateName(tiff_image, "TiffImage.isWhiteZero");
  var predictor = dart.privateName(tiff_image, "TiffImage.predictor");
  var chromaSubH = dart.privateName(tiff_image, "TiffImage.chromaSubH");
  var chromaSubV = dart.privateName(tiff_image, "TiffImage.chromaSubV");
  var tiled = dart.privateName(tiff_image, "TiffImage.tiled");
  var tileWidth = dart.privateName(tiff_image, "TiffImage.tileWidth");
  var tileHeight = dart.privateName(tiff_image, "TiffImage.tileHeight");
  var tileOffsets = dart.privateName(tiff_image, "TiffImage.tileOffsets");
  var tileByteCounts = dart.privateName(tiff_image, "TiffImage.tileByteCounts");
  var tilesX = dart.privateName(tiff_image, "TiffImage.tilesX");
  var tilesY = dart.privateName(tiff_image, "TiffImage.tilesY");
  var tileSize = dart.privateName(tiff_image, "TiffImage.tileSize");
  var fillOrder = dart.privateName(tiff_image, "TiffImage.fillOrder");
  var t4Options = dart.privateName(tiff_image, "TiffImage.t4Options");
  var t6Options = dart.privateName(tiff_image, "TiffImage.t6Options");
  var extraSamples = dart.privateName(tiff_image, "TiffImage.extraSamples");
  var colorMap = dart.privateName(tiff_image, "TiffImage.colorMap");
  var colorMapRed = dart.privateName(tiff_image, "TiffImage.colorMapRed");
  var colorMapGreen = dart.privateName(tiff_image, "TiffImage.colorMapGreen");
  var colorMapBlue = dart.privateName(tiff_image, "TiffImage.colorMapBlue");
  var image$ = dart.privateName(tiff_image, "TiffImage.image");
  var hdrImage = dart.privateName(tiff_image, "TiffImage.hdrImage");
  var C0;
  tiff_image.TiffImage = class TiffImage extends core.Object {
    get tags() {
      return this[tags];
    }
    set tags(value) {
      this[tags] = value;
    }
    get width() {
      return this[width];
    }
    set width(value) {
      this[width] = value;
    }
    get height() {
      return this[height];
    }
    set height(value) {
      this[height] = value;
    }
    get photometricType() {
      return this[photometricType];
    }
    set photometricType(value) {
      this[photometricType] = value;
    }
    get compression() {
      return this[compression];
    }
    set compression(value) {
      this[compression] = value;
    }
    get bitsPerSample() {
      return this[bitsPerSample];
    }
    set bitsPerSample(value) {
      this[bitsPerSample] = value;
    }
    get samplesPerPixel() {
      return this[samplesPerPixel];
    }
    set samplesPerPixel(value) {
      this[samplesPerPixel] = value;
    }
    get sampleFormat() {
      return this[sampleFormat];
    }
    set sampleFormat(value) {
      this[sampleFormat] = value;
    }
    get imageType() {
      return this[imageType];
    }
    set imageType(value) {
      this[imageType] = value;
    }
    get isWhiteZero() {
      return this[isWhiteZero];
    }
    set isWhiteZero(value) {
      this[isWhiteZero] = value;
    }
    get predictor() {
      return this[predictor];
    }
    set predictor(value) {
      this[predictor] = value;
    }
    get chromaSubH() {
      return this[chromaSubH];
    }
    set chromaSubH(value) {
      this[chromaSubH] = value;
    }
    get chromaSubV() {
      return this[chromaSubV];
    }
    set chromaSubV(value) {
      this[chromaSubV] = value;
    }
    get tiled() {
      return this[tiled];
    }
    set tiled(value) {
      this[tiled] = value;
    }
    get tileWidth() {
      return this[tileWidth];
    }
    set tileWidth(value) {
      this[tileWidth] = value;
    }
    get tileHeight() {
      return this[tileHeight];
    }
    set tileHeight(value) {
      this[tileHeight] = value;
    }
    get tileOffsets() {
      return this[tileOffsets];
    }
    set tileOffsets(value) {
      this[tileOffsets] = value;
    }
    get tileByteCounts() {
      return this[tileByteCounts];
    }
    set tileByteCounts(value) {
      this[tileByteCounts] = value;
    }
    get tilesX() {
      return this[tilesX];
    }
    set tilesX(value) {
      this[tilesX] = value;
    }
    get tilesY() {
      return this[tilesY];
    }
    set tilesY(value) {
      this[tilesY] = value;
    }
    get tileSize() {
      return this[tileSize];
    }
    set tileSize(value) {
      this[tileSize] = value;
    }
    get fillOrder() {
      return this[fillOrder];
    }
    set fillOrder(value) {
      this[fillOrder] = value;
    }
    get t4Options() {
      return this[t4Options];
    }
    set t4Options(value) {
      this[t4Options] = value;
    }
    get t6Options() {
      return this[t6Options];
    }
    set t6Options(value) {
      this[t6Options] = value;
    }
    get extraSamples() {
      return this[extraSamples];
    }
    set extraSamples(value) {
      this[extraSamples] = value;
    }
    get colorMap() {
      return this[colorMap];
    }
    set colorMap(value) {
      this[colorMap] = value;
    }
    get colorMapRed() {
      return this[colorMapRed];
    }
    set colorMapRed(value) {
      this[colorMapRed] = value;
    }
    get colorMapGreen() {
      return this[colorMapGreen];
    }
    set colorMapGreen(value) {
      this[colorMapGreen] = value;
    }
    get colorMapBlue() {
      return this[colorMapBlue];
    }
    set colorMapBlue(value) {
      this[colorMapBlue] = value;
    }
    get image() {
      return this[image$];
    }
    set image(value) {
      this[image$] = value;
    }
    get hdrImage() {
      return this[hdrImage];
    }
    set hdrImage(value) {
      this[hdrImage] = value;
    }
    get isValid() {
      return this.width != null && this.height != null && this.samplesPerPixel != null && this.bitsPerSample != null && this.compression != null;
    }
    decode(p) {
      this.image = new image.Image.new(this.width, this.height);
      for (let tileY = 0, ti = 0; tileY < dart.notNull(this.tilesY); tileY = tileY + 1) {
        for (let tileX = 0; tileX < dart.notNull(this.tilesX); tileX = tileX + 1, ti = ti + 1) {
          this[_decodeTile](p, tileX, tileY);
        }
      }
      return this.image;
    }
    decodeHdr(p) {
      this.hdrImage = new hdr_image.HdrImage.create(this.width, this.height, this.samplesPerPixel, this.sampleFormat === 1 ? 0 : this.sampleFormat === 2 ? 1 : 3, this.bitsPerSample);
      for (let tileY = 0, ti = 0; tileY < dart.notNull(this.tilesY); tileY = tileY + 1) {
        for (let tileX = 0; tileX < dart.notNull(this.tilesX); tileX = tileX + 1, ti = ti + 1) {
          this[_decodeTile](p, tileX, tileY);
        }
      }
      return this.hdrImage;
    }
    hasTag(tag) {
      return this.tags[$containsKey](tag);
    }
    [_decodeTile](p, tileX, tileY) {
      let t2, t1;
      if (this.imageType === 0) {
        this[_decodeBilevelTile](p, tileX, tileY);
        return;
      }
      let tileIndex = dart.notNull(tileY) * dart.notNull(this.tilesX) + dart.notNull(tileX);
      p.offset = this.tileOffsets[$_get](tileIndex);
      let outX = dart.notNull(tileX) * dart.notNull(this.tileWidth);
      let outY = dart.notNull(tileY) * dart.notNull(this.tileHeight);
      let byteCount = this.tileByteCounts[$_get](tileIndex);
      let bytesInThisTile = dart.notNull(this.tileWidth) * dart.notNull(this.tileHeight) * dart.notNull(this.samplesPerPixel);
      if (this.bitsPerSample === 16) {
        bytesInThisTile = bytesInThisTile * 2;
      } else if (this.bitsPerSample === 32) {
        bytesInThisTile = bytesInThisTile * 4;
      }
      let bdata = null;
      if (this.bitsPerSample === 8 || this.bitsPerSample === 16 || this.bitsPerSample === 32 || this.bitsPerSample === 64) {
        if (this.compression === 1) {
          bdata = p;
        } else if (this.compression === 5) {
          bdata = new input_buffer.InputBuffer.new(_native_typed_data.NativeUint8List.new(bytesInThisTile));
          let decoder = new tiff_lzw_decoder.LzwDecoder.new();
          try {
            decoder.decode(new input_buffer.InputBuffer.from(p, {offset: 0, length: byteCount}), bdata.buffer);
          } catch (e$) {
            let e = dart.getThrown(e$);
            core.print(e);
          }
          if (this.predictor === 2) {
            let count = null;
            for (let j = 0; j < dart.notNull(this.tileHeight); j = j + 1) {
              count = dart.notNull(this.samplesPerPixel) * (j * dart.notNull(this.tileWidth) + 1);
              for (let i = this.samplesPerPixel, len = dart.notNull(this.tileWidth) * dart.notNull(this.samplesPerPixel); dart.notNull(i) < len; i = dart.notNull(i) + 1) {
                t1 = bdata;
                t2 = count;
                t1._set(t2, dart.notNull(t1._get(t2)) + dart.notNull(bdata._get(dart.notNull(count) - dart.notNull(this.samplesPerPixel))));
                count = dart.notNull(count) + 1;
              }
            }
          }
        } else if (this.compression === 32773) {
          bdata = new input_buffer.InputBuffer.new(_native_typed_data.NativeUint8List.new(bytesInThisTile));
          this[_decodePackbits](p, bytesInThisTile, bdata.buffer);
        } else if (this.compression === 32946) {
          let data = p.toList(0, byteCount);
          let outData = new inflate.Inflate.new(data).getBytes();
          bdata = new input_buffer.InputBuffer.new(outData);
        } else if (this.compression === 8) {
          let data = p.toList(0, byteCount);
          let outData = new zlib_decoder.ZLibDecoder.new().decodeBytes(data);
          bdata = new input_buffer.InputBuffer.new(outData);
        } else if (this.compression === 6) {
          this.image == null ? this.image = new image.Image.new(this.width, this.height) : null;
          let data = p.toList(0, byteCount);
          let tile = new jpeg_decoder.JpegDecoder.new().decodeImage(data);
          this[_jpegToImage](tile, this.image, outX, outY, this.tileWidth, this.tileHeight);
          if (this.hdrImage != null) {
            this.hdrImage = new hdr_image.HdrImage.fromImage(this.image);
          }
          return;
        } else {
          dart.throw(new image_exception.ImageException.new("Unsupported Compression Type: " + dart.str(this.compression)));
        }
        if (bdata == null) {
          return;
        }
        for (let y = 0, py = outY; y < dart.notNull(this.tileHeight) && py < dart.notNull(this.height); y = y + 1, py = py + 1) {
          for (let x = 0, px = outX; x < dart.notNull(this.tileWidth) && px < dart.notNull(this.width); x = x + 1, px = px + 1) {
            if (this.samplesPerPixel === 1) {
              if (this.sampleFormat === 3) {
                let sample = 0.0;
                if (this.bitsPerSample === 32) {
                  sample = bdata.readFloat32();
                } else if (this.bitsPerSample === 64) {
                  sample = bdata.readFloat64();
                } else if (this.bitsPerSample === 16) {
                  sample = half.Half.HalfToDouble(bdata.readUint16());
                }
                if (this.hdrImage != null) {
                  this.hdrImage.setRed(px, py, sample);
                }
                if (this.image != null) {
                  let gray = (dart.notNull(sample) * 255)[$clamp](0, 255)[$toInt]();
                  let c = null;
                  if (this.photometricType === 3 && this.colorMap != null) {
                    c = color.getColor(this.colorMap[$_get](dart.notNull(this.colorMapRed) + gray), this.colorMap[$_get](dart.notNull(this.colorMapGreen) + gray), this.colorMap[$_get](dart.notNull(this.colorMapBlue) + gray));
                  } else {
                    c = color.getColor(gray, gray, gray, 255);
                  }
                  this.image.setPixel(px, py, c);
                }
              } else {
                let gray = 0;
                if (this.bitsPerSample === 8) {
                  gray = this.sampleFormat === 2 ? bdata.readInt8() : bdata.readByte();
                } else if (this.bitsPerSample === 16) {
                  gray = this.sampleFormat === 2 ? bdata.readInt16() : bdata.readUint16();
                } else if (this.bitsPerSample === 32) {
                  gray = this.sampleFormat === 2 ? bdata.readInt32() : bdata.readUint32();
                }
                if (this.hdrImage != null) {
                  this.hdrImage.setRed(px, py, gray);
                }
                if (this.image != null) {
                  gray = this.bitsPerSample === 16 ? gray[$rightShift](8) : this.bitsPerSample === 32 ? gray[$rightShift](24) : gray;
                  if (this.photometricType === 0) {
                    gray = 255 - dart.notNull(gray);
                  }
                  let c = null;
                  if (this.photometricType === 3 && this.colorMap != null) {
                    c = color.getColor(this.colorMap[$_get](dart.notNull(this.colorMapRed) + dart.notNull(gray)), this.colorMap[$_get](dart.notNull(this.colorMapGreen) + dart.notNull(gray)), this.colorMap[$_get](dart.notNull(this.colorMapBlue) + dart.notNull(gray)));
                  } else {
                    c = color.getColor(gray, gray, gray, 255);
                  }
                  this.image.setPixel(px, py, c);
                }
              }
            } else if (this.samplesPerPixel === 2) {
              let gray = 0;
              let alpha = 0;
              if (this.bitsPerSample === 8) {
                gray = this.sampleFormat === 2 ? bdata.readInt8() : bdata.readByte();
                alpha = this.sampleFormat === 2 ? bdata.readInt8() : bdata.readByte();
              } else if (this.bitsPerSample === 16) {
                gray = this.sampleFormat === 2 ? bdata.readInt16() : bdata.readUint16();
                alpha = this.sampleFormat === 2 ? bdata.readInt16() : bdata.readUint16();
              } else if (this.bitsPerSample === 32) {
                gray = this.sampleFormat === 2 ? bdata.readInt32() : bdata.readUint32();
                alpha = this.sampleFormat === 2 ? bdata.readInt32() : bdata.readUint32();
              }
              if (this.hdrImage != null) {
                this.hdrImage.setRed(px, py, gray);
                this.hdrImage.setGreen(px, py, alpha);
              }
              if (this.image != null) {
                gray = this.bitsPerSample === 16 ? gray[$rightShift](8) : this.bitsPerSample === 32 ? gray[$rightShift](24) : gray;
                alpha = this.bitsPerSample === 16 ? alpha[$rightShift](8) : this.bitsPerSample === 32 ? alpha[$rightShift](24) : alpha;
                let c = color.getColor(gray, gray, gray, alpha);
                this.image.setPixel(px, py, c);
              }
            } else if (this.samplesPerPixel === 3) {
              if (this.sampleFormat === 3) {
                let r = 0.0;
                let g = 0.0;
                let b = 0.0;
                if (this.bitsPerSample === 32) {
                  r = bdata.readFloat32();
                  g = bdata.readFloat32();
                  b = bdata.readFloat32();
                } else if (this.bitsPerSample === 64) {
                  r = bdata.readFloat64();
                  g = bdata.readFloat64();
                  b = bdata.readFloat64();
                } else if (this.bitsPerSample === 16) {
                  r = half.Half.HalfToDouble(bdata.readUint16());
                  g = half.Half.HalfToDouble(bdata.readUint16());
                  b = half.Half.HalfToDouble(bdata.readUint16());
                }
                if (this.hdrImage != null) {
                  this.hdrImage.setRed(px, py, r);
                  this.hdrImage.setGreen(px, py, g);
                  this.hdrImage.setBlue(px, py, b);
                }
                if (this.image != null) {
                  let ri = (dart.notNull(r) * 255)[$clamp](0, 255)[$toInt]();
                  let gi = (dart.notNull(g) * 255)[$clamp](0, 255)[$toInt]();
                  let bi = (dart.notNull(b) * 255)[$clamp](0, 255)[$toInt]();
                  let c = color.getColor(ri, gi, bi, 255);
                  this.image.setPixel(px, py, c);
                }
              } else {
                let r = 0;
                let g = 0;
                let b = 0;
                if (this.bitsPerSample === 8) {
                  r = this.sampleFormat === 2 ? bdata.readInt8() : bdata.readByte();
                  g = this.sampleFormat === 2 ? bdata.readInt8() : bdata.readByte();
                  b = this.sampleFormat === 2 ? bdata.readInt8() : bdata.readByte();
                } else if (this.bitsPerSample === 16) {
                  r = this.sampleFormat === 2 ? bdata.readInt16() : bdata.readUint16();
                  g = this.sampleFormat === 2 ? bdata.readInt16() : bdata.readUint16();
                  b = this.sampleFormat === 2 ? bdata.readInt16() : bdata.readUint16();
                } else if (this.bitsPerSample === 32) {
                  r = this.sampleFormat === 2 ? bdata.readInt32() : bdata.readUint32();
                  g = this.sampleFormat === 2 ? bdata.readInt32() : bdata.readUint32();
                  b = this.sampleFormat === 2 ? bdata.readInt32() : bdata.readUint32();
                }
                if (this.hdrImage != null) {
                  this.hdrImage.setRed(px, py, r);
                  this.hdrImage.setGreen(px, py, g);
                  this.hdrImage.setBlue(px, py, b);
                }
                if (this.image != null) {
                  r = this.bitsPerSample === 16 ? r[$rightShift](8) : this.bitsPerSample === 32 ? r[$rightShift](24) : r;
                  g = this.bitsPerSample === 16 ? g[$rightShift](8) : this.bitsPerSample === 32 ? g[$rightShift](24) : g;
                  b = this.bitsPerSample === 16 ? b[$rightShift](8) : this.bitsPerSample === 32 ? b[$rightShift](24) : b;
                  let c = color.getColor(r, g, b, 255);
                  this.image.setPixel(px, py, c);
                }
              }
            } else if (dart.notNull(this.samplesPerPixel) >= 4) {
              if (this.sampleFormat === 3) {
                let r = 0.0;
                let g = 0.0;
                let b = 0.0;
                let a = 0.0;
                if (this.bitsPerSample === 32) {
                  r = bdata.readFloat32();
                  g = bdata.readFloat32();
                  b = bdata.readFloat32();
                  a = bdata.readFloat32();
                } else if (this.bitsPerSample === 64) {
                  r = bdata.readFloat64();
                  g = bdata.readFloat64();
                  b = bdata.readFloat64();
                  a = bdata.readFloat64();
                } else if (this.bitsPerSample === 16) {
                  r = half.Half.HalfToDouble(bdata.readUint16());
                  g = half.Half.HalfToDouble(bdata.readUint16());
                  b = half.Half.HalfToDouble(bdata.readUint16());
                  a = half.Half.HalfToDouble(bdata.readUint16());
                }
                if (this.hdrImage != null) {
                  this.hdrImage.setRed(px, py, r);
                  this.hdrImage.setGreen(px, py, g);
                  this.hdrImage.setBlue(px, py, b);
                  this.hdrImage.setAlpha(px, py, a);
                }
                if (this.image != null) {
                  let ri = (dart.notNull(r) * 255)[$clamp](0, 255)[$toInt]();
                  let gi = (dart.notNull(g) * 255)[$clamp](0, 255)[$toInt]();
                  let bi = (dart.notNull(b) * 255)[$clamp](0, 255)[$toInt]();
                  let ai = (dart.notNull(a) * 255)[$clamp](0, 255)[$toInt]();
                  let c = color.getColor(ri, gi, bi, ai);
                  this.image.setPixel(px, py, c);
                }
              } else {
                let r = 0;
                let g = 0;
                let b = 0;
                let a = 0;
                if (this.bitsPerSample === 8) {
                  r = this.sampleFormat === 2 ? bdata.readInt8() : bdata.readByte();
                  g = this.sampleFormat === 2 ? bdata.readInt8() : bdata.readByte();
                  b = this.sampleFormat === 2 ? bdata.readInt8() : bdata.readByte();
                  a = this.sampleFormat === 2 ? bdata.readInt8() : bdata.readByte();
                } else if (this.bitsPerSample === 16) {
                  r = this.sampleFormat === 2 ? bdata.readInt16() : bdata.readUint16();
                  g = this.sampleFormat === 2 ? bdata.readInt16() : bdata.readUint16();
                  b = this.sampleFormat === 2 ? bdata.readInt16() : bdata.readUint16();
                  a = this.sampleFormat === 2 ? bdata.readInt16() : bdata.readUint16();
                } else if (this.bitsPerSample === 32) {
                  r = this.sampleFormat === 2 ? bdata.readInt32() : bdata.readUint32();
                  g = this.sampleFormat === 2 ? bdata.readInt32() : bdata.readUint32();
                  b = this.sampleFormat === 2 ? bdata.readInt32() : bdata.readUint32();
                  a = this.sampleFormat === 2 ? bdata.readInt32() : bdata.readUint32();
                }
                if (this.hdrImage != null) {
                  this.hdrImage.setRed(px, py, r);
                  this.hdrImage.setGreen(px, py, g);
                  this.hdrImage.setBlue(px, py, b);
                  this.hdrImage.setAlpha(px, py, a);
                }
                if (this.image != null) {
                  r = this.bitsPerSample === 16 ? r[$rightShift](8) : this.bitsPerSample === 32 ? r[$rightShift](24) : r;
                  g = this.bitsPerSample === 16 ? g[$rightShift](8) : this.bitsPerSample === 32 ? g[$rightShift](24) : g;
                  b = this.bitsPerSample === 16 ? b[$rightShift](8) : this.bitsPerSample === 32 ? b[$rightShift](24) : b;
                  a = this.bitsPerSample === 16 ? a[$rightShift](8) : this.bitsPerSample === 32 ? a[$rightShift](24) : a;
                  let c = color.getColor(r, g, b, a);
                  this.image.setPixel(px, py, c);
                }
              }
            }
          }
        }
      } else {
        dart.throw(new image_exception.ImageException.new("Unsupported bitsPerSample: " + dart.str(this.bitsPerSample)));
      }
    }
    [_jpegToImage](tile, image, outX, outY, tileWidth, tileHeight) {
      let width = tileWidth;
      let height = tileHeight;
      for (let y = 0; y < dart.notNull(height); y = y + 1) {
        for (let x = 0; x < dart.notNull(width); x = x + 1) {
          image.setPixel(x + dart.notNull(outX), y + dart.notNull(outY), tile.getPixel(x, y));
        }
      }
    }
    [_decodeBilevelTile](p, tileX, tileY) {
      let t2, t1;
      let tileIndex = dart.notNull(tileY) * dart.notNull(this.tilesX) + dart.notNull(tileX);
      p.offset = this.tileOffsets[$_get](tileIndex);
      let outX = dart.notNull(tileX) * dart.notNull(this.tileWidth);
      let outY = dart.notNull(tileY) * dart.notNull(this.tileHeight);
      let byteCount = this.tileByteCounts[$_get](tileIndex);
      let bdata = null;
      if (this.compression === 32773) {
        let bytesInThisTile = null;
        if (this.tileWidth[$modulo](8) === 0) {
          bytesInThisTile = (dart.notNull(this.tileWidth) / 8)[$truncate]() * dart.notNull(this.tileHeight);
        } else {
          bytesInThisTile = ((dart.notNull(this.tileWidth) / 8)[$truncate]() + 1) * dart.notNull(this.tileHeight);
        }
        bdata = new input_buffer.InputBuffer.new(_native_typed_data.NativeUint8List.new(dart.notNull(this.tileWidth) * dart.notNull(this.tileHeight)));
        this[_decodePackbits](p, bytesInThisTile, bdata.buffer);
      } else if (this.compression === 5) {
        bdata = new input_buffer.InputBuffer.new(_native_typed_data.NativeUint8List.new(dart.notNull(this.tileWidth) * dart.notNull(this.tileHeight)));
        let decoder = new tiff_lzw_decoder.LzwDecoder.new();
        decoder.decode(new input_buffer.InputBuffer.from(p, {length: byteCount}), bdata.buffer);
        if (this.predictor === 2) {
          let count = null;
          for (let j = 0; j < dart.notNull(this.height); j = j + 1) {
            count = dart.notNull(this.samplesPerPixel) * (j * dart.notNull(this.width) + 1);
            for (let i = this.samplesPerPixel; dart.notNull(i) < dart.notNull(this.width) * dart.notNull(this.samplesPerPixel); i = dart.notNull(i) + 1) {
              t1 = bdata;
              t2 = count;
              t1._set(t2, dart.notNull(t1._get(t2)) + dart.notNull(bdata._get(dart.notNull(count) - dart.notNull(this.samplesPerPixel))));
              count = dart.notNull(count) + 1;
            }
          }
        }
      } else if (this.compression === 2) {
        bdata = new input_buffer.InputBuffer.new(_native_typed_data.NativeUint8List.new(dart.notNull(this.tileWidth) * dart.notNull(this.tileHeight)));
        try {
          new tiff_fax_decoder.TiffFaxDecoder.new(this.fillOrder, this.tileWidth, this.tileHeight).decode1D(bdata, p, 0, this.tileHeight);
        } catch (e) {
          let _ = dart.getThrown(e);
        }
      } else if (this.compression === 3) {
        bdata = new input_buffer.InputBuffer.new(_native_typed_data.NativeUint8List.new(dart.notNull(this.tileWidth) * dart.notNull(this.tileHeight)));
        try {
          new tiff_fax_decoder.TiffFaxDecoder.new(this.fillOrder, this.tileWidth, this.tileHeight).decode2D(bdata, p, 0, this.tileHeight, this.t4Options);
        } catch (e$) {
          let _ = dart.getThrown(e$);
        }
      } else if (this.compression === 4) {
        bdata = new input_buffer.InputBuffer.new(_native_typed_data.NativeUint8List.new(dart.notNull(this.tileWidth) * dart.notNull(this.tileHeight)));
        try {
          new tiff_fax_decoder.TiffFaxDecoder.new(this.fillOrder, this.tileWidth, this.tileHeight).decodeT6(bdata, p, 0, this.tileHeight, this.t6Options);
        } catch (e$0) {
          let _ = dart.getThrown(e$0);
        }
      } else if (this.compression === 8) {
        let data = p.toList(0, byteCount);
        let outData = new zlib_decoder.ZLibDecoder.new().decodeBytes(data);
        bdata = new input_buffer.InputBuffer.new(outData);
      } else if (this.compression === 32946) {
        let data = p.toList(0, byteCount);
        let outData = new inflate.Inflate.new(data).getBytes();
        bdata = new input_buffer.InputBuffer.new(outData);
      } else if (this.compression === 1) {
        bdata = p;
      } else {
        dart.throw(new image_exception.ImageException.new("Unsupported Compression Type: " + dart.str(this.compression)));
      }
      if (bdata == null) {
        return;
      }
      let br = new tiff_bit_reader.TiffBitReader.new(bdata);
      let white = dart.test(this.isWhiteZero) ? 4278190080 : 4294967295;
      let black = dart.test(this.isWhiteZero) ? 4294967295 : 4278190080;
      for (let y = 0, py = outY; y < dart.notNull(this.tileHeight); y = y + 1, py = py + 1) {
        for (let x = 0, px = outX; x < dart.notNull(this.tileWidth); x = x + 1, px = px + 1) {
          if (br.readBits(1) === 0) {
            this.image.setPixel(px, py, black);
          } else {
            this.image.setPixel(px, py, white);
          }
        }
        br.flushByte();
      }
    }
    [_decodePackbits](data, arraySize, dst) {
      let t4, t4$, t4$0, t4$1, t4$2;
      let srcCount = 0;
      let dstCount = 0;
      while (dstCount < dart.notNull(arraySize)) {
        let b = bit_operators.uint8ToInt8(data._get((t4 = srcCount, srcCount = t4 + 1, t4)));
        if (dart.notNull(b) >= 0 && dart.notNull(b) <= 127) {
          for (let i = 0; i < dart.notNull(b) + 1; i = i + 1) {
            dst[$_set]((t4$ = dstCount, dstCount = t4$ + 1, t4$), data._get((t4$0 = srcCount, srcCount = t4$0 + 1, t4$0)));
          }
        } else if (dart.notNull(b) <= -1 && dart.notNull(b) >= -127) {
          let repeat = data._get((t4$1 = srcCount, srcCount = t4$1 + 1, t4$1));
          for (let i = 0; i < -dart.notNull(b) + 1; i = i + 1) {
            dst[$_set]((t4$2 = dstCount, dstCount = t4$2 + 1, t4$2), repeat);
          }
        } else {
          srcCount = srcCount + 1;
        }
      }
    }
    [_readTag](type, defaultValue = 0) {
      if (!dart.test(this.hasTag(type))) {
        return defaultValue;
      }
      return this.tags[$_get](type).readValue();
    }
    [_readTagList](type) {
      if (!dart.test(this.hasTag(type))) {
        return null;
      }
      return this.tags[$_get](type).readValues();
    }
  };
  (tiff_image.TiffImage.new = function(p) {
    let t0, t1, t0$;
    this[tags] = new (IdentityMapOfintL$TiffEntryL()).new();
    this[width] = null;
    this[height] = null;
    this[photometricType] = null;
    this[compression] = 1;
    this[bitsPerSample] = 1;
    this[samplesPerPixel] = 1;
    this[sampleFormat] = 1;
    this[imageType] = -1;
    this[isWhiteZero] = false;
    this[predictor] = 1;
    this[chromaSubH] = null;
    this[chromaSubV] = null;
    this[tiled] = false;
    this[tileWidth] = null;
    this[tileHeight] = null;
    this[tileOffsets] = null;
    this[tileByteCounts] = null;
    this[tilesX] = null;
    this[tilesY] = null;
    this[tileSize] = null;
    this[fillOrder] = 1;
    this[t4Options] = 0;
    this[t6Options] = 0;
    this[extraSamples] = null;
    this[colorMap] = null;
    this[colorMapRed] = null;
    this[colorMapGreen] = null;
    this[colorMapBlue] = null;
    this[image$] = null;
    this[hdrImage] = null;
    let p3 = new input_buffer.InputBuffer.from(p);
    let numDirEntries = p.readUint16();
    for (let i = 0; i < dart.notNull(numDirEntries); i = i + 1) {
      let tag = p.readUint16();
      let type = p.readUint16();
      let numValues = p.readUint32();
      let entry = new tiff_entry.TiffEntry.new(tag, type, numValues, p3);
      if (dart.notNull(entry.numValues) * dart.notNull(entry.typeSize) > 4) {
        entry.valueOffset = p.readUint32();
      } else {
        entry.valueOffset = p.offset;
        t0 = p;
        t0.offset = dart.notNull(t0.offset) + 4;
      }
      this.tags[$_set](entry.tag, entry);
      if (entry.tag === 256) {
        this.width = entry.readValue();
      } else if (entry.tag === 257) {
        this.height = entry.readValue();
      } else if (entry.tag === 262) {
        this.photometricType = entry.readValue();
      } else if (entry.tag === 259) {
        this.compression = entry.readValue();
      } else if (entry.tag === 258) {
        this.bitsPerSample = entry.readValue();
      } else if (entry.tag === 277) {
        this.samplesPerPixel = entry.readValue();
      } else if (entry.tag === 317) {
        this.predictor = entry.readValue();
      } else if (entry.tag === 339) {
        this.sampleFormat = entry.readValue();
      } else if (entry.tag === 320) {
        this.colorMap = entry.readValues();
        this.colorMapRed = 0;
        this.colorMapGreen = (dart.notNull(this.colorMap[$length]) / 3)[$truncate]();
        this.colorMapBlue = dart.notNull(this.colorMapGreen) * 2;
      }
    }
    if (this.width == null || this.height == null || this.bitsPerSample == null || this.compression == null) {
      return;
    }
    if (this.colorMap != null && this.bitsPerSample === 8) {
      for (let i = 0, len = this.colorMap[$length]; i < dart.notNull(len); i = i + 1) {
        t0$ = this.colorMap;
        t1 = i;
        t0$[$_set](t1, t0$[$_get](t1)[$rightShift](8));
      }
    }
    if (this.photometricType === 0) {
      this.isWhiteZero = true;
    }
    if (dart.test(this.hasTag(324))) {
      this.tiled = true;
      this.tileWidth = this[_readTag](322);
      this.tileHeight = this[_readTag](323);
      this.tileOffsets = this[_readTagList](324);
      this.tileByteCounts = this[_readTagList](325);
    } else {
      this.tiled = false;
      this.tileWidth = this[_readTag](322, this.width);
      if (!dart.test(this.hasTag(278))) {
        this.tileHeight = this[_readTag](323, this.height);
      } else {
        let l = this[_readTag](278);
        let infinity = 1;
        infinity = infinity[$leftShift](32) - 1;
        if (l === infinity) {
          this.tileHeight = this.height;
        } else {
          this.tileHeight = l;
        }
      }
      this.tileOffsets = this[_readTagList](273);
      this.tileByteCounts = this[_readTagList](279);
    }
    this.tilesX = ((dart.notNull(this.width) + dart.notNull(this.tileWidth) - 1) / dart.notNull(this.tileWidth))[$truncate]();
    this.tilesY = ((dart.notNull(this.height) + dart.notNull(this.tileHeight) - 1) / dart.notNull(this.tileHeight))[$truncate]();
    this.tileSize = dart.notNull(this.tileWidth) * dart.notNull(this.tileHeight) * dart.notNull(this.samplesPerPixel);
    this.fillOrder = this[_readTag](266, 1);
    this.t4Options = this[_readTag](292, 0);
    this.t6Options = this[_readTag](293, 0);
    this.extraSamples = this[_readTag](338, 0);
    switch (this.photometricType) {
      case 0:
      case 1:
      {
        if (this.bitsPerSample === 1 && this.samplesPerPixel === 1) {
          this.imageType = 0;
        } else if (this.bitsPerSample === 4 && this.samplesPerPixel === 1) {
          this.imageType = 1;
        } else if (this.bitsPerSample[$modulo](8) === 0) {
          if (this.samplesPerPixel === 1) {
            this.imageType = 2;
          } else if (this.samplesPerPixel === 2) {
            this.imageType = 3;
          } else {
            this.imageType = 8;
          }
        }
        break;
      }
      case 2:
      {
        if (this.bitsPerSample[$modulo](8) === 0) {
          if (this.samplesPerPixel === 3) {
            this.imageType = 5;
          } else if (this.samplesPerPixel === 4) {
            this.imageType = 6;
          } else {
            this.imageType = 8;
          }
        }
        break;
      }
      case 3:
      {
        if (this.samplesPerPixel === 1 && (this.bitsPerSample === 4 || this.bitsPerSample === 8 || this.bitsPerSample === 16)) {
          this.imageType = 4;
        }
        break;
      }
      case 4:
      {
        if (this.bitsPerSample === 1 && this.samplesPerPixel === 1) {
          this.imageType = 0;
        }
        break;
      }
      case 6:
      {
        if (this.compression === 7 && this.bitsPerSample === 8 && this.samplesPerPixel === 3) {
          this.imageType = 5;
        } else {
          if (dart.test(this.hasTag(530))) {
            let v = this.tags[$_get](530).readValues();
            this.chromaSubH = v[$_get](0);
            this.chromaSubV = v[$_get](1);
          } else {
            this.chromaSubH = 2;
            this.chromaSubV = 2;
          }
          if (dart.notNull(this.chromaSubH) * dart.notNull(this.chromaSubV) === 1) {
            this.imageType = 8;
          } else if (this.bitsPerSample === 8 && this.samplesPerPixel === 3) {
            this.imageType = 7;
          }
        }
        break;
      }
      default:
      {
        if (this.bitsPerSample[$modulo](8) === 0) {
          this.imageType = 8;
        }
        break;
      }
    }
  }).prototype = tiff_image.TiffImage.prototype;
  dart.addTypeTests(tiff_image.TiffImage);
  dart.addTypeCaches(tiff_image.TiffImage);
  dart.setMethodSignature(tiff_image.TiffImage, () => ({
    __proto__: dart.getMethods(tiff_image.TiffImage.__proto__),
    decode: dart.fnType(dart.legacy(image.Image), [dart.legacy(input_buffer.InputBuffer)]),
    decodeHdr: dart.fnType(dart.legacy(hdr_image.HdrImage), [dart.legacy(input_buffer.InputBuffer)]),
    hasTag: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.int)]),
    [_decodeTile]: dart.fnType(dart.void, [dart.legacy(input_buffer.InputBuffer), dart.legacy(core.int), dart.legacy(core.int)]),
    [_jpegToImage]: dart.fnType(dart.void, [dart.legacy(image.Image), dart.legacy(image.Image), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int)]),
    [_decodeBilevelTile]: dart.fnType(dart.void, [dart.legacy(input_buffer.InputBuffer), dart.legacy(core.int), dart.legacy(core.int)]),
    [_decodePackbits]: dart.fnType(dart.void, [dart.legacy(input_buffer.InputBuffer), dart.legacy(core.int), dart.legacy(core.List$(dart.legacy(core.int)))]),
    [_readTag]: dart.fnType(dart.legacy(core.int), [dart.legacy(core.int)], [dart.legacy(core.int)]),
    [_readTagList]: dart.fnType(dart.legacy(core.List$(dart.legacy(core.int))), [dart.legacy(core.int)])
  }));
  dart.setGetterSignature(tiff_image.TiffImage, () => ({
    __proto__: dart.getGetters(tiff_image.TiffImage.__proto__),
    isValid: dart.legacy(core.bool)
  }));
  dart.setLibraryUri(tiff_image.TiffImage, L0);
  dart.setFieldSignature(tiff_image.TiffImage, () => ({
    __proto__: dart.getFields(tiff_image.TiffImage.__proto__),
    tags: dart.fieldType(dart.legacy(core.Map$(dart.legacy(core.int), dart.legacy(tiff_entry.TiffEntry)))),
    width: dart.fieldType(dart.legacy(core.int)),
    height: dart.fieldType(dart.legacy(core.int)),
    photometricType: dart.fieldType(dart.legacy(core.int)),
    compression: dart.fieldType(dart.legacy(core.int)),
    bitsPerSample: dart.fieldType(dart.legacy(core.int)),
    samplesPerPixel: dart.fieldType(dart.legacy(core.int)),
    sampleFormat: dart.fieldType(dart.legacy(core.int)),
    imageType: dart.fieldType(dart.legacy(core.int)),
    isWhiteZero: dart.fieldType(dart.legacy(core.bool)),
    predictor: dart.fieldType(dart.legacy(core.int)),
    chromaSubH: dart.fieldType(dart.legacy(core.int)),
    chromaSubV: dart.fieldType(dart.legacy(core.int)),
    tiled: dart.fieldType(dart.legacy(core.bool)),
    tileWidth: dart.fieldType(dart.legacy(core.int)),
    tileHeight: dart.fieldType(dart.legacy(core.int)),
    tileOffsets: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.int)))),
    tileByteCounts: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.int)))),
    tilesX: dart.fieldType(dart.legacy(core.int)),
    tilesY: dart.fieldType(dart.legacy(core.int)),
    tileSize: dart.fieldType(dart.legacy(core.int)),
    fillOrder: dart.fieldType(dart.legacy(core.int)),
    t4Options: dart.fieldType(dart.legacy(core.int)),
    t6Options: dart.fieldType(dart.legacy(core.int)),
    extraSamples: dart.fieldType(dart.legacy(core.int)),
    colorMap: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.int)))),
    colorMapRed: dart.fieldType(dart.legacy(core.int)),
    colorMapGreen: dart.fieldType(dart.legacy(core.int)),
    colorMapBlue: dart.fieldType(dart.legacy(core.int)),
    image: dart.fieldType(dart.legacy(image.Image)),
    hdrImage: dart.fieldType(dart.legacy(hdr_image.HdrImage))
  }));
  dart.defineLazy(tiff_image.TiffImage, {
    /*tiff_image.TiffImage.COMPRESSION_NONE*/get COMPRESSION_NONE() {
      return 1;
    },
    /*tiff_image.TiffImage.COMPRESSION_CCITT_RLE*/get COMPRESSION_CCITT_RLE() {
      return 2;
    },
    /*tiff_image.TiffImage.COMPRESSION_CCITT_FAX3*/get COMPRESSION_CCITT_FAX3() {
      return 3;
    },
    /*tiff_image.TiffImage.COMPRESSION_CCITT_FAX4*/get COMPRESSION_CCITT_FAX4() {
      return 4;
    },
    /*tiff_image.TiffImage.COMPRESSION_LZW*/get COMPRESSION_LZW() {
      return 5;
    },
    /*tiff_image.TiffImage.COMPRESSION_OLD_JPEG*/get COMPRESSION_OLD_JPEG() {
      return 6;
    },
    /*tiff_image.TiffImage.COMPRESSION_JPEG*/get COMPRESSION_JPEG() {
      return 7;
    },
    /*tiff_image.TiffImage.COMPRESSION_NEXT*/get COMPRESSION_NEXT() {
      return 32766;
    },
    /*tiff_image.TiffImage.COMPRESSION_CCITT_RLEW*/get COMPRESSION_CCITT_RLEW() {
      return 32771;
    },
    /*tiff_image.TiffImage.COMPRESSION_PACKBITS*/get COMPRESSION_PACKBITS() {
      return 32773;
    },
    /*tiff_image.TiffImage.COMPRESSION_THUNDERSCAN*/get COMPRESSION_THUNDERSCAN() {
      return 32809;
    },
    /*tiff_image.TiffImage.COMPRESSION_IT8CTPAD*/get COMPRESSION_IT8CTPAD() {
      return 32895;
    },
    /*tiff_image.TiffImage.COMPRESSION_IT8LW*/get COMPRESSION_IT8LW() {
      return 32896;
    },
    /*tiff_image.TiffImage.COMPRESSION_IT8MP*/get COMPRESSION_IT8MP() {
      return 32897;
    },
    /*tiff_image.TiffImage.COMPRESSION_IT8BL*/get COMPRESSION_IT8BL() {
      return 32898;
    },
    /*tiff_image.TiffImage.COMPRESSION_PIXARFILM*/get COMPRESSION_PIXARFILM() {
      return 32908;
    },
    /*tiff_image.TiffImage.COMPRESSION_PIXARLOG*/get COMPRESSION_PIXARLOG() {
      return 32909;
    },
    /*tiff_image.TiffImage.COMPRESSION_DEFLATE*/get COMPRESSION_DEFLATE() {
      return 32946;
    },
    /*tiff_image.TiffImage.COMPRESSION_ZIP*/get COMPRESSION_ZIP() {
      return 8;
    },
    /*tiff_image.TiffImage.COMPRESSION_DCS*/get COMPRESSION_DCS() {
      return 32947;
    },
    /*tiff_image.TiffImage.COMPRESSION_JBIG*/get COMPRESSION_JBIG() {
      return 34661;
    },
    /*tiff_image.TiffImage.COMPRESSION_SGILOG*/get COMPRESSION_SGILOG() {
      return 34676;
    },
    /*tiff_image.TiffImage.COMPRESSION_SGILOG24*/get COMPRESSION_SGILOG24() {
      return 34677;
    },
    /*tiff_image.TiffImage.COMPRESSION_JP2000*/get COMPRESSION_JP2000() {
      return 34712;
    },
    /*tiff_image.TiffImage.PHOTOMETRIC_BLACKISZERO*/get PHOTOMETRIC_BLACKISZERO() {
      return 1;
    },
    /*tiff_image.TiffImage.PHOTOMETRIC_RGB*/get PHOTOMETRIC_RGB() {
      return 2;
    },
    /*tiff_image.TiffImage.TYPE_UNSUPPORTED*/get TYPE_UNSUPPORTED() {
      return -1;
    },
    /*tiff_image.TiffImage.TYPE_BILEVEL*/get TYPE_BILEVEL() {
      return 0;
    },
    /*tiff_image.TiffImage.TYPE_GRAY_4BIT*/get TYPE_GRAY_4BIT() {
      return 1;
    },
    /*tiff_image.TiffImage.TYPE_GRAY*/get TYPE_GRAY() {
      return 2;
    },
    /*tiff_image.TiffImage.TYPE_GRAY_ALPHA*/get TYPE_GRAY_ALPHA() {
      return 3;
    },
    /*tiff_image.TiffImage.TYPE_PALETTE*/get TYPE_PALETTE() {
      return 4;
    },
    /*tiff_image.TiffImage.TYPE_RGB*/get TYPE_RGB() {
      return 5;
    },
    /*tiff_image.TiffImage.TYPE_RGB_ALPHA*/get TYPE_RGB_ALPHA() {
      return 6;
    },
    /*tiff_image.TiffImage.TYPE_YCBCR_SUB*/get TYPE_YCBCR_SUB() {
      return 7;
    },
    /*tiff_image.TiffImage.TYPE_GENERIC*/get TYPE_GENERIC() {
      return 8;
    },
    /*tiff_image.TiffImage.FORMAT_UINT*/get FORMAT_UINT() {
      return 1;
    },
    /*tiff_image.TiffImage.FORMAT_INT*/get FORMAT_INT() {
      return 2;
    },
    /*tiff_image.TiffImage.FORMAT_FLOAT*/get FORMAT_FLOAT() {
      return 3;
    },
    /*tiff_image.TiffImage.TAG_ARTIST*/get TAG_ARTIST() {
      return 315;
    },
    /*tiff_image.TiffImage.TAG_BITS_PER_SAMPLE*/get TAG_BITS_PER_SAMPLE() {
      return 258;
    },
    /*tiff_image.TiffImage.TAG_CELL_LENGTH*/get TAG_CELL_LENGTH() {
      return 265;
    },
    /*tiff_image.TiffImage.TAG_CELL_WIDTH*/get TAG_CELL_WIDTH() {
      return 264;
    },
    /*tiff_image.TiffImage.TAG_COLOR_MAP*/get TAG_COLOR_MAP() {
      return 320;
    },
    /*tiff_image.TiffImage.TAG_COMPRESSION*/get TAG_COMPRESSION() {
      return 259;
    },
    /*tiff_image.TiffImage.TAG_DATE_TIME*/get TAG_DATE_TIME() {
      return 306;
    },
    /*tiff_image.TiffImage.TAG_EXIF_IFD*/get TAG_EXIF_IFD() {
      return 34665;
    },
    /*tiff_image.TiffImage.TAG_EXTRA_SAMPLES*/get TAG_EXTRA_SAMPLES() {
      return 338;
    },
    /*tiff_image.TiffImage.TAG_FILL_ORDER*/get TAG_FILL_ORDER() {
      return 266;
    },
    /*tiff_image.TiffImage.TAG_FREE_BYTE_COUNTS*/get TAG_FREE_BYTE_COUNTS() {
      return 289;
    },
    /*tiff_image.TiffImage.TAG_FREE_OFFSETS*/get TAG_FREE_OFFSETS() {
      return 288;
    },
    /*tiff_image.TiffImage.TAG_GRAY_RESPONSE_CURVE*/get TAG_GRAY_RESPONSE_CURVE() {
      return 291;
    },
    /*tiff_image.TiffImage.TAG_GRAY_RESPONSE_UNIT*/get TAG_GRAY_RESPONSE_UNIT() {
      return 290;
    },
    /*tiff_image.TiffImage.TAG_HOST_COMPUTER*/get TAG_HOST_COMPUTER() {
      return 316;
    },
    /*tiff_image.TiffImage.TAG_ICC_PROFILE*/get TAG_ICC_PROFILE() {
      return 34675;
    },
    /*tiff_image.TiffImage.TAG_IMAGE_DESCRIPTION*/get TAG_IMAGE_DESCRIPTION() {
      return 270;
    },
    /*tiff_image.TiffImage.TAG_IMAGE_LENGTH*/get TAG_IMAGE_LENGTH() {
      return 257;
    },
    /*tiff_image.TiffImage.TAG_IMAGE_WIDTH*/get TAG_IMAGE_WIDTH() {
      return 256;
    },
    /*tiff_image.TiffImage.TAG_IPTC*/get TAG_IPTC() {
      return 33723;
    },
    /*tiff_image.TiffImage.TAG_MAKE*/get TAG_MAKE() {
      return 271;
    },
    /*tiff_image.TiffImage.TAG_MAX_SAMPLE_VALUE*/get TAG_MAX_SAMPLE_VALUE() {
      return 281;
    },
    /*tiff_image.TiffImage.TAG_MIN_SAMPLE_VALUE*/get TAG_MIN_SAMPLE_VALUE() {
      return 280;
    },
    /*tiff_image.TiffImage.TAG_MODEL*/get TAG_MODEL() {
      return 272;
    },
    /*tiff_image.TiffImage.TAG_NEW_SUBFILE_TYPE*/get TAG_NEW_SUBFILE_TYPE() {
      return 254;
    },
    /*tiff_image.TiffImage.TAG_ORIENTATION*/get TAG_ORIENTATION() {
      return 274;
    },
    /*tiff_image.TiffImage.TAG_PHOTOMETRIC_INTERPRETATION*/get TAG_PHOTOMETRIC_INTERPRETATION() {
      return 262;
    },
    /*tiff_image.TiffImage.TAG_PHOTOSHOP*/get TAG_PHOTOSHOP() {
      return 34377;
    },
    /*tiff_image.TiffImage.TAG_PLANAR_CONFIGURATION*/get TAG_PLANAR_CONFIGURATION() {
      return 284;
    },
    /*tiff_image.TiffImage.TAG_PREDICTOR*/get TAG_PREDICTOR() {
      return 317;
    },
    /*tiff_image.TiffImage.TAG_RESOLUTION_UNIT*/get TAG_RESOLUTION_UNIT() {
      return 296;
    },
    /*tiff_image.TiffImage.TAG_ROWS_PER_STRIP*/get TAG_ROWS_PER_STRIP() {
      return 278;
    },
    /*tiff_image.TiffImage.TAG_SAMPLES_PER_PIXEL*/get TAG_SAMPLES_PER_PIXEL() {
      return 277;
    },
    /*tiff_image.TiffImage.TAG_SOFTWARE*/get TAG_SOFTWARE() {
      return 305;
    },
    /*tiff_image.TiffImage.TAG_STRIP_BYTE_COUNTS*/get TAG_STRIP_BYTE_COUNTS() {
      return 279;
    },
    /*tiff_image.TiffImage.TAG_STRIP_OFFSETS*/get TAG_STRIP_OFFSETS() {
      return 273;
    },
    /*tiff_image.TiffImage.TAG_SUBFILE_TYPE*/get TAG_SUBFILE_TYPE() {
      return 255;
    },
    /*tiff_image.TiffImage.TAG_T4_OPTIONS*/get TAG_T4_OPTIONS() {
      return 292;
    },
    /*tiff_image.TiffImage.TAG_T6_OPTIONS*/get TAG_T6_OPTIONS() {
      return 293;
    },
    /*tiff_image.TiffImage.TAG_THRESHOLDING*/get TAG_THRESHOLDING() {
      return 263;
    },
    /*tiff_image.TiffImage.TAG_TILE_WIDTH*/get TAG_TILE_WIDTH() {
      return 322;
    },
    /*tiff_image.TiffImage.TAG_TILE_LENGTH*/get TAG_TILE_LENGTH() {
      return 323;
    },
    /*tiff_image.TiffImage.TAG_TILE_OFFSETS*/get TAG_TILE_OFFSETS() {
      return 324;
    },
    /*tiff_image.TiffImage.TAG_TILE_BYTE_COUNTS*/get TAG_TILE_BYTE_COUNTS() {
      return 325;
    },
    /*tiff_image.TiffImage.TAG_SAMPLE_FORMAT*/get TAG_SAMPLE_FORMAT() {
      return 339;
    },
    /*tiff_image.TiffImage.TAG_XMP*/get TAG_XMP() {
      return 700;
    },
    /*tiff_image.TiffImage.TAG_X_RESOLUTION*/get TAG_X_RESOLUTION() {
      return 282;
    },
    /*tiff_image.TiffImage.TAG_Y_RESOLUTION*/get TAG_Y_RESOLUTION() {
      return 283;
    },
    /*tiff_image.TiffImage.TAG_YCBCR_COEFFICIENTS*/get TAG_YCBCR_COEFFICIENTS() {
      return 529;
    },
    /*tiff_image.TiffImage.TAG_YCBCR_SUBSAMPLING*/get TAG_YCBCR_SUBSAMPLING() {
      return 530;
    },
    /*tiff_image.TiffImage.TAG_YCBCR_POSITIONING*/get TAG_YCBCR_POSITIONING() {
      return 531;
    },
    /*tiff_image.TiffImage.TAG_NAME*/get TAG_NAME() {
      return C0 || CT.C0;
    }
  }, true);
  var _readValue = dart.privateName(tiff_entry, "_readValue");
  var tag$ = dart.privateName(tiff_entry, "TiffEntry.tag");
  var type$ = dart.privateName(tiff_entry, "TiffEntry.type");
  var numValues$ = dart.privateName(tiff_entry, "TiffEntry.numValues");
  var valueOffset = dart.privateName(tiff_entry, "TiffEntry.valueOffset");
  var p$ = dart.privateName(tiff_entry, "TiffEntry.p");
  var C1;
  tiff_entry.TiffEntry = class TiffEntry extends core.Object {
    get tag() {
      return this[tag$];
    }
    set tag(value) {
      this[tag$] = value;
    }
    get type() {
      return this[type$];
    }
    set type(value) {
      this[type$] = value;
    }
    get numValues() {
      return this[numValues$];
    }
    set numValues(value) {
      this[numValues$] = value;
    }
    get valueOffset() {
      return this[valueOffset];
    }
    set valueOffset(value) {
      this[valueOffset] = value;
    }
    get p() {
      return this[p$];
    }
    set p(value) {
      this[p$] = value;
    }
    toString() {
      if (dart.test(tiff_image.TiffImage.TAG_NAME[$containsKey](this.tag))) {
        return dart.str(tiff_image.TiffImage.TAG_NAME[$_get](this.tag)) + ": " + dart.str(this.type) + " " + dart.str(this.numValues);
      }
      return "<" + dart.str(this.tag) + ">: " + dart.str(this.type) + " " + dart.str(this.numValues);
    }
    get isValid() {
      return dart.notNull(this.type) < 13 && dart.notNull(this.type) > 0;
    }
    get typeSize() {
      return dart.test(this.isValid) ? tiff_entry.TiffEntry.SIZE_OF_TYPE[$_get](this.type) : 0;
    }
    get isString() {
      return this.type === 2;
    }
    readValue() {
      this.p.offset = this.valueOffset;
      return this[_readValue]();
    }
    readValues() {
      this.p.offset = this.valueOffset;
      let values = JSArrayOfintL().of([]);
      for (let i = 0; i < dart.notNull(this.numValues); i = i + 1) {
        values[$add](this[_readValue]());
      }
      return values;
    }
    readString() {
      if (this.type !== 2) {
        dart.throw(new image_exception.ImageException.new("readString requires ASCII entity"));
      }
      return core.String.fromCharCodes(this.readValues());
    }
    read() {
      this.p.offset = this.valueOffset;
      let values = [];
      for (let i = 0; i < dart.notNull(this.numValues); i = i + 1) {
        switch (this.type) {
          case 1:
          case 2:
          {
            values[$add](this.p.readByte());
            break;
          }
          case 3:
          {
            values[$add](this.p.readUint16());
            break;
          }
          case 4:
          {
            values[$add](this.p.readUint32());
            break;
          }
          case 5:
          {
            let num = this.p.readUint32();
            let den = this.p.readUint32();
            if (den !== 0) {
              values[$add](dart.notNull(num) / dart.notNull(den));
            }
            break;
          }
          case 11:
          {
            values[$add](this.p.readFloat32());
            break;
          }
          case 12:
          {
            values[$add](this.p.readFloat64());
            break;
          }
        }
      }
      return values;
    }
    [_readValue]() {
      switch (this.type) {
        case 1:
        case 2:
        {
          return this.p.readByte();
        }
        case 3:
        {
          return this.p.readUint16();
        }
        case 4:
        {
          return this.p.readUint32();
        }
        case 5:
        {
          let num = this.p.readUint32();
          let den = this.p.readUint32();
          if (den === 0) {
            return 0;
          }
          return (dart.notNull(num) / dart.notNull(den))[$truncate]();
        }
        case 6:
        {
          dart.throw(new image_exception.ImageException.new("Unhandled value type: SBYTE"));
        }
        case 7:
        {
          return this.p.readByte();
        }
        case 8:
        {
          dart.throw(new image_exception.ImageException.new("Unhandled value type: SSHORT"));
        }
        case 9:
        {
          dart.throw(new image_exception.ImageException.new("Unhandled value type: SLONG"));
        }
        case 10:
        {
          dart.throw(new image_exception.ImageException.new("Unhandled value type: SRATIONAL"));
        }
        case 11:
        {
          dart.throw(new image_exception.ImageException.new("Unhandled value type: FLOAT"));
        }
        case 12:
        {
          dart.throw(new image_exception.ImageException.new("Unhandled value type: DOUBLE"));
        }
      }
      return 0;
    }
  };
  (tiff_entry.TiffEntry.new = function(tag, type, numValues, p) {
    this[valueOffset] = null;
    this[tag$] = tag;
    this[type$] = type;
    this[numValues$] = numValues;
    this[p$] = p;
    ;
  }).prototype = tiff_entry.TiffEntry.prototype;
  dart.addTypeTests(tiff_entry.TiffEntry);
  dart.addTypeCaches(tiff_entry.TiffEntry);
  dart.setMethodSignature(tiff_entry.TiffEntry, () => ({
    __proto__: dart.getMethods(tiff_entry.TiffEntry.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    readValue: dart.fnType(dart.legacy(core.int), []),
    readValues: dart.fnType(dart.legacy(core.List$(dart.legacy(core.int))), []),
    readString: dart.fnType(dart.legacy(core.String), []),
    read: dart.fnType(dart.legacy(core.List), []),
    [_readValue]: dart.fnType(dart.legacy(core.int), [])
  }));
  dart.setGetterSignature(tiff_entry.TiffEntry, () => ({
    __proto__: dart.getGetters(tiff_entry.TiffEntry.__proto__),
    isValid: dart.legacy(core.bool),
    typeSize: dart.legacy(core.int),
    isString: dart.legacy(core.bool)
  }));
  dart.setLibraryUri(tiff_entry.TiffEntry, L1);
  dart.setFieldSignature(tiff_entry.TiffEntry, () => ({
    __proto__: dart.getFields(tiff_entry.TiffEntry.__proto__),
    tag: dart.fieldType(dart.legacy(core.int)),
    type: dart.fieldType(dart.legacy(core.int)),
    numValues: dart.fieldType(dart.legacy(core.int)),
    valueOffset: dart.fieldType(dart.legacy(core.int)),
    p: dart.fieldType(dart.legacy(input_buffer.InputBuffer))
  }));
  dart.defineExtensionMethods(tiff_entry.TiffEntry, ['toString']);
  dart.defineLazy(tiff_entry.TiffEntry, {
    /*tiff_entry.TiffEntry.TYPE_BYTE*/get TYPE_BYTE() {
      return 1;
    },
    /*tiff_entry.TiffEntry.TYPE_ASCII*/get TYPE_ASCII() {
      return 2;
    },
    /*tiff_entry.TiffEntry.TYPE_SHORT*/get TYPE_SHORT() {
      return 3;
    },
    /*tiff_entry.TiffEntry.TYPE_LONG*/get TYPE_LONG() {
      return 4;
    },
    /*tiff_entry.TiffEntry.TYPE_RATIONAL*/get TYPE_RATIONAL() {
      return 5;
    },
    /*tiff_entry.TiffEntry.TYPE_SBYTE*/get TYPE_SBYTE() {
      return 6;
    },
    /*tiff_entry.TiffEntry.TYPE_UNDEFINED*/get TYPE_UNDEFINED() {
      return 7;
    },
    /*tiff_entry.TiffEntry.TYPE_SSHORT*/get TYPE_SSHORT() {
      return 8;
    },
    /*tiff_entry.TiffEntry.TYPE_SLONG*/get TYPE_SLONG() {
      return 9;
    },
    /*tiff_entry.TiffEntry.TYPE_SRATIONAL*/get TYPE_SRATIONAL() {
      return 10;
    },
    /*tiff_entry.TiffEntry.TYPE_FLOAT*/get TYPE_FLOAT() {
      return 11;
    },
    /*tiff_entry.TiffEntry.TYPE_DOUBLE*/get TYPE_DOUBLE() {
      return 12;
    },
    /*tiff_entry.TiffEntry.SIZE_OF_TYPE*/get SIZE_OF_TYPE() {
      return C1 || CT.C1;
    }
  }, true);
  dart.trackLibraries("packages/image/src/formats/tiff/tiff_image.dart", {
    "package:image/src/formats/tiff/tiff_image.dart": tiff_image,
    "package:image/src/formats/tiff/tiff_entry.dart": tiff_entry
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["tiff_image.dart","tiff_entry.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../packages/image/src/formats/tiff/tiff_image.dart.lib.js"}');
  // Exports:
  return {
    src__formats__tiff__tiff_image: tiff_image,
    src__formats__tiff__tiff_entry: tiff_entry
  };
}));

//# sourceMappingURL=tiff_image.dart.lib.js.map
