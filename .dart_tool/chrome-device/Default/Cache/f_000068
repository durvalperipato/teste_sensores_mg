define(['dart_sdk', 'packages/pdf/src/widgets/container.dart', 'packages/pdf/src/pdf/rect.dart', 'packages/pdf/src/pdf/point.dart', 'packages/vector_math/vector_math_64.dart'], (function load__packages__pdf__src__widgets__stack_dart(dart_sdk, packages__pdf__src__widgets__container$46dart, packages__pdf__src__pdf__rect$46dart, packages__pdf__src__pdf__point$46dart, packages__vector_math__vector_math_64$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const math = dart_sdk.math;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const widget = packages__pdf__src__widgets__container$46dart.src__widgets__widget;
  const geometry = packages__pdf__src__widgets__container$46dart.src__widgets__geometry;
  const rect = packages__pdf__src__pdf__rect$46dart.src__pdf__rect;
  const point = packages__pdf__src__pdf__point$46dart.src__pdf__point;
  const vector_math_64 = packages__vector_math__vector_math_64$46dart.vector_math_64;
  var stack = Object.create(dart.library);
  var $toString = dartx.toString;
  var $length = dartx.length;
  var StackFitL = () => (StackFitL = dart.constFn(dart.legacy(stack.StackFit)))();
  var OverflowL = () => (OverflowL = dart.constFn(dart.legacy(stack.Overflow)))();
  var WidgetL = () => (WidgetL = dart.constFn(dart.legacy(widget.Widget)))();
  var PositionedL = () => (PositionedL = dart.constFn(dart.legacy(stack.Positioned)))();
  var doubleL = () => (doubleL = dart.constFn(dart.legacy(core.double)))();
  const CT = Object.create(null);
  var L0 = "package:pdf/src/widgets/stack.dart";
  var L1 = "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-2.0.0/lib/src/widgets/stack.dart";
  dart.defineLazy(CT, {
    get C0() {
      return C0 = dart.const({
        __proto__: stack.StackFit.prototype,
        [_name$]: "StackFit.loose",
        index: 0
      });
    },
    get C1() {
      return C1 = dart.const({
        __proto__: stack.StackFit.prototype,
        [_name$]: "StackFit.expand",
        index: 1
      });
    },
    get C2() {
      return C2 = dart.const({
        __proto__: stack.StackFit.prototype,
        [_name$]: "StackFit.passthrough",
        index: 2
      });
    },
    get C3() {
      return C3 = dart.constList([C0 || CT.C0, C1 || CT.C1, C2 || CT.C2], StackFitL());
    },
    get C4() {
      return C4 = dart.const({
        __proto__: stack.Overflow.prototype,
        [_name$]: "Overflow.visible",
        index: 0
      });
    },
    get C5() {
      return C5 = dart.const({
        __proto__: stack.Overflow.prototype,
        [_name$]: "Overflow.clip",
        index: 1
      });
    },
    get C6() {
      return C6 = dart.constList([C4 || CT.C4, C5 || CT.C5], OverflowL());
    },
    get C7() {
      return C7 = dart.const({
        __proto__: geometry.Alignment.prototype,
        [Alignment_y]: 1,
        [Alignment_x]: -1
      });
    },
    get C8() {
      return C8 = dart.constList([], WidgetL());
    },
    get C9() {
      return C9 = dart.const({
        __proto__: geometry.BoxConstraints.prototype,
        [BoxConstraints_maxHeight]: 1 / 0,
        [BoxConstraints_minHeight]: 0,
        [BoxConstraints_maxWidth]: 1 / 0,
        [BoxConstraints_minWidth]: 0
      });
    }
  }, false);
  var _name$ = dart.privateName(stack, "_name");
  var C0;
  var C1;
  var C2;
  var C3;
  stack.StackFit = class StackFit extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (stack.StackFit.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = stack.StackFit.prototype;
  dart.addTypeTests(stack.StackFit);
  dart.addTypeCaches(stack.StackFit);
  dart.setMethodSignature(stack.StackFit, () => ({
    __proto__: dart.getMethods(stack.StackFit.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(stack.StackFit, L0);
  dart.setFieldSignature(stack.StackFit, () => ({
    __proto__: dart.getFields(stack.StackFit.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(stack.StackFit, ['toString']);
  stack.StackFit.loose = C0 || CT.C0;
  stack.StackFit.expand = C1 || CT.C1;
  stack.StackFit.passthrough = C2 || CT.C2;
  stack.StackFit.values = C3 || CT.C3;
  var C4;
  var C5;
  var C6;
  stack.Overflow = class Overflow extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (stack.Overflow.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = stack.Overflow.prototype;
  dart.addTypeTests(stack.Overflow);
  dart.addTypeCaches(stack.Overflow);
  dart.setMethodSignature(stack.Overflow, () => ({
    __proto__: dart.getMethods(stack.Overflow.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(stack.Overflow, L0);
  dart.setFieldSignature(stack.Overflow, () => ({
    __proto__: dart.getFields(stack.Overflow.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(stack.Overflow, ['toString']);
  stack.Overflow.visible = C4 || CT.C4;
  stack.Overflow.clip = C5 || CT.C5;
  stack.Overflow.values = C6 || CT.C6;
  var left$ = dart.privateName(stack, "Positioned.left");
  var top$ = dart.privateName(stack, "Positioned.top");
  var right$ = dart.privateName(stack, "Positioned.right");
  var bottom$ = dart.privateName(stack, "Positioned.bottom");
  stack.Positioned = class Positioned extends widget.SingleChildWidget {
    get left() {
      return this[left$];
    }
    set left(value) {
      super.left = value;
    }
    get top() {
      return this[top$];
    }
    set top(value) {
      super.top = value;
    }
    get right() {
      return this[right$];
    }
    set right(value) {
      super.right = value;
    }
    get bottom() {
      return this[bottom$];
    }
    set bottom(value) {
      super.bottom = value;
    }
    get width() {
      let t0;
      t0 = this.box;
      return t0 == null ? null : t0.width;
    }
    get height() {
      let t0;
      t0 = this.box;
      return t0 == null ? null : t0.height;
    }
    paint(context) {
      super.paint(context);
      this.paintChild(context);
    }
  };
  (stack.Positioned.new = function(opts) {
    let left = opts && 'left' in opts ? opts.left : null;
    let top = opts && 'top' in opts ? opts.top : null;
    let right = opts && 'right' in opts ? opts.right : null;
    let bottom = opts && 'bottom' in opts ? opts.bottom : null;
    let child = opts && 'child' in opts ? opts.child : null;
    this[left$] = left;
    this[top$] = top;
    this[right$] = right;
    this[bottom$] = bottom;
    stack.Positioned.__proto__.new.call(this, {child: child});
    ;
  }).prototype = stack.Positioned.prototype;
  dart.addTypeTests(stack.Positioned);
  dart.addTypeCaches(stack.Positioned);
  dart.setGetterSignature(stack.Positioned, () => ({
    __proto__: dart.getGetters(stack.Positioned.__proto__),
    width: dart.legacy(core.double),
    height: dart.legacy(core.double)
  }));
  dart.setLibraryUri(stack.Positioned, L0);
  dart.setFieldSignature(stack.Positioned, () => ({
    __proto__: dart.getFields(stack.Positioned.__proto__),
    left: dart.finalFieldType(dart.legacy(core.double)),
    top: dart.finalFieldType(dart.legacy(core.double)),
    right: dart.finalFieldType(dart.legacy(core.double)),
    bottom: dart.finalFieldType(dart.legacy(core.double))
  }));
  var Alignment_y = dart.privateName(geometry, "Alignment.y");
  var Alignment_x = dart.privateName(geometry, "Alignment.x");
  var C7;
  var C8;
  var BoxConstraints_maxHeight = dart.privateName(geometry, "BoxConstraints.maxHeight");
  var BoxConstraints_minHeight = dart.privateName(geometry, "BoxConstraints.minHeight");
  var BoxConstraints_maxWidth = dart.privateName(geometry, "BoxConstraints.maxWidth");
  var BoxConstraints_minWidth = dart.privateName(geometry, "BoxConstraints.minWidth");
  var C9;
  var alignment$ = dart.privateName(stack, "Stack.alignment");
  var fit$ = dart.privateName(stack, "Stack.fit");
  var overflow$ = dart.privateName(stack, "Stack.overflow");
  stack.Stack = class Stack extends widget.MultiChildWidget {
    get alignment() {
      return this[alignment$];
    }
    set alignment(value) {
      super.alignment = value;
    }
    get fit() {
      return this[fit$];
    }
    set fit(value) {
      super.fit = value;
    }
    get overflow() {
      return this[overflow$];
    }
    set overflow(value) {
      super.overflow = value;
    }
    layout(context, constraints, opts) {
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      let childCount = this.children[$length];
      let hasNonPositionedChildren = false;
      if (childCount === 0) {
        this.box = rect.PdfRect.fromPoints(point.PdfPoint.zero, constraints.biggest);
        return;
      }
      let width = constraints.minWidth;
      let height = constraints.minHeight;
      let nonPositionedConstraints = null;
      if (!(this.fit != null)) dart.assertFailed(null, L1, 97, 12, "fit != null");
      switch (this.fit) {
        case C0 || CT.C0:
        {
          nonPositionedConstraints = constraints.loosen();
          break;
        }
        case C1 || CT.C1:
        {
          nonPositionedConstraints = new geometry.BoxConstraints.tight(constraints.biggest);
          break;
        }
        case C2 || CT.C2:
        {
          nonPositionedConstraints = constraints;
          break;
        }
      }
      if (!(nonPositionedConstraints != null)) dart.assertFailed(null, L1, 109, 12, "nonPositionedConstraints != null");
      for (let child of this.children) {
        if (!PositionedL().is(child)) {
          hasNonPositionedChildren = true;
          child.layout(context, nonPositionedConstraints, {parentUsesSize: true});
          if (!(child.box != null)) dart.assertFailed(null, L1, 116, 16, "child.box != null");
          let childSize = child.box;
          width = math.max(doubleL(), width, childSize.width);
          height = math.max(doubleL(), height, childSize.height);
        }
      }
      if (hasNonPositionedChildren) {
        this.box = rect.PdfRect.fromPoints(point.PdfPoint.zero, new point.PdfPoint.new(width, height));
        if (!(this.box.width == constraints.constrainWidth(width))) dart.assertFailed(null, L1, 126, 14, "box.width == constraints.constrainWidth(width)");
        if (!(this.box.height == constraints.constrainHeight(height))) dart.assertFailed(null, L1, 127, 14, "box.height == constraints.constrainHeight(height)");
      } else {
        this.box = rect.PdfRect.fromPoints(point.PdfPoint.zero, constraints.biggest);
      }
      for (let child of this.children) {
        if (!PositionedL().is(child)) {
          child.box = rect.PdfRect.fromPoints(this.alignment.inscribe(child.box.size, this.box).offset, child.box.size);
        } else {
          let positioned = PositionedL().as(child);
          let childConstraints = C9 || CT.C9;
          if (positioned.left != null && positioned.right != null) {
            childConstraints = childConstraints.tighten({width: dart.notNull(this.box.width) - dart.notNull(positioned.right) - dart.notNull(positioned.left)});
          } else if (positioned.width != null) {
            childConstraints = childConstraints.tighten({width: positioned.width});
          }
          if (positioned.top != null && positioned.bottom != null) {
            childConstraints = childConstraints.tighten({height: dart.notNull(this.box.height) - dart.notNull(positioned.bottom) - dart.notNull(positioned.top)});
          } else if (positioned.height != null) {
            childConstraints = childConstraints.tighten({height: positioned.height});
          }
          positioned.layout(context, childConstraints, {parentUsesSize: true});
          if (!(positioned.box != null)) dart.assertFailed(null, L1, 156, 16, "positioned.box != null");
          let x = null;
          if (positioned.left != null) {
            x = positioned.left;
          } else if (positioned.right != null) {
            x = dart.notNull(this.box.width) - dart.notNull(positioned.right) - dart.notNull(positioned.width);
          } else {
            x = this.alignment.inscribe(positioned.box.size, this.box).x;
          }
          let y = null;
          if (positioned.bottom != null) {
            y = positioned.bottom;
          } else if (positioned.top != null) {
            y = dart.notNull(this.box.height) - dart.notNull(positioned.top) - dart.notNull(positioned.height);
          } else {
            y = this.alignment.inscribe(positioned.box.size, this.box).y;
          }
          positioned.box = rect.PdfRect.fromPoints(new point.PdfPoint.new(x, y), positioned.box.size);
        }
      }
    }
    paint(context) {
      let t0, t0$;
      super.paint(context);
      let mat = vector_math_64.Matrix4.identity();
      mat.translate(this.box.x, this.box.y);
      t0 = context.canvas;
      (() => {
        t0.saveContext();
        t0.setTransform(mat);
        return t0;
      })();
      if (this.overflow == stack.Overflow.clip) {
        t0$ = context.canvas;
        (() => {
          t0$.drawRect(0.0, 0.0, this.box.width, this.box.height);
          t0$.clipPath();
          return t0$;
        })();
      }
      for (let child of this.children) {
        child.paint(context);
      }
      context.canvas.restoreContext();
    }
  };
  (stack.Stack.new = function(opts) {
    let alignment = opts && 'alignment' in opts ? opts.alignment : C7 || CT.C7;
    let fit = opts && 'fit' in opts ? opts.fit : C0 || CT.C0;
    let overflow = opts && 'overflow' in opts ? opts.overflow : C5 || CT.C5;
    let children = opts && 'children' in opts ? opts.children : C8 || CT.C8;
    this[alignment$] = alignment;
    this[fit$] = fit;
    this[overflow$] = overflow;
    stack.Stack.__proto__.new.call(this, {children: children});
    ;
  }).prototype = stack.Stack.prototype;
  dart.addTypeTests(stack.Stack);
  dart.addTypeCaches(stack.Stack);
  dart.setMethodSignature(stack.Stack, () => ({
    __proto__: dart.getMethods(stack.Stack.__proto__),
    layout: dart.fnType(dart.void, [dart.legacy(widget.Context), dart.legacy(geometry.BoxConstraints)], {parentUsesSize: dart.legacy(core.bool)}, {})
  }));
  dart.setLibraryUri(stack.Stack, L0);
  dart.setFieldSignature(stack.Stack, () => ({
    __proto__: dart.getFields(stack.Stack.__proto__),
    alignment: dart.finalFieldType(dart.legacy(geometry.Alignment)),
    fit: dart.finalFieldType(dart.legacy(stack.StackFit)),
    overflow: dart.finalFieldType(dart.legacy(stack.Overflow))
  }));
  dart.trackLibraries("packages/pdf/src/widgets/stack.dart", {
    "package:pdf/src/widgets/stack.dart": stack
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["stack.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../packages/pdf/src/widgets/stack.dart.lib.js"}');
  // Exports:
  return {
    src__widgets__stack: stack
  };
}));

//# sourceMappingURL=stack.dart.lib.js.map
