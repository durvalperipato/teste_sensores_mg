define(['dart_sdk', 'packages/image/src/util/input_buffer.dart', 'packages/image/src/formats/gif/gif_info.dart', 'packages/image/src/formats/gif/gif_image_desc.dart', 'packages/image/src/animation.dart', 'packages/image/src/image.dart', 'packages/image/src/transform/copy_into.dart', 'packages/image/src/formats/gif/gif_color_map.dart', 'packages/image/src/formats/decoder.dart'], (function load__packages__image__src__formats__gif_decoder_dart(dart_sdk, packages__image__src__util__input_buffer$46dart, packages__image__src__formats__gif__gif_info$46dart, packages__image__src__formats__gif__gif_image_desc$46dart, packages__image__src__animation$46dart, packages__image__src__image$46dart, packages__image__src__transform__copy_into$46dart, packages__image__src__formats__gif__gif_color_map$46dart, packages__image__src__formats__decoder$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _native_typed_data = dart_sdk._native_typed_data;
  const typed_data = dart_sdk.typed_data;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const input_buffer = packages__image__src__util__input_buffer$46dart.src__util__input_buffer;
  const gif_info = packages__image__src__formats__gif__gif_info$46dart.src__formats__gif__gif_info;
  const gif_image_desc = packages__image__src__formats__gif__gif_image_desc$46dart.src__formats__gif__gif_image_desc;
  const animation = packages__image__src__animation$46dart.src__animation;
  const image$ = packages__image__src__image$46dart.src__image;
  const copy_into = packages__image__src__transform__copy_into$46dart.src__transform__copy_into;
  const gif_color_map = packages__image__src__formats__gif__gif_color_map$46dart.src__formats__gif__gif_color_map;
  const decoder = packages__image__src__formats__decoder$46dart.src__formats__decoder;
  var gif_decoder = Object.create(dart.library);
  var $add = dartx.add;
  var $length = dartx.length;
  var $_get = dartx._get;
  var $leftShift = dartx['<<'];
  var $_set = dartx._set;
  var $fillRange = dartx.fillRange;
  var $rightShift = dartx['>>'];
  var $setRange = dartx.setRange;
  var InternalGifImageDescL = () => (InternalGifImageDescL = dart.constFn(dart.legacy(gif_image_desc.InternalGifImageDesc)))();
  var intL = () => (intL = dart.constFn(dart.legacy(core.int)))();
  const CT = Object.create(null);
  var L0 = "package:image/src/formats/gif_decoder.dart";
  dart.defineLazy(CT, {
    get C0() {
      return C0 = dart.constList([0, 1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095], intL());
    },
    get C1() {
      return C1 = dart.constList([0, 4, 2, 1], intL());
    },
    get C2() {
      return C2 = dart.constList([8, 8, 4, 2], intL());
    }
  }, false);
  var _input = dart.privateName(gif_decoder, "_input");
  var _repeat = dart.privateName(gif_decoder, "_repeat");
  var _buffer = dart.privateName(gif_decoder, "_buffer");
  var _stack = dart.privateName(gif_decoder, "_stack");
  var _suffix = dart.privateName(gif_decoder, "_suffix");
  var _prefix = dart.privateName(gif_decoder, "_prefix");
  var _bitsPerPixel = dart.privateName(gif_decoder, "_bitsPerPixel");
  var _pixelCount = dart.privateName(gif_decoder, "_pixelCount");
  var _currentShiftDWord = dart.privateName(gif_decoder, "_currentShiftDWord");
  var _currentShiftState = dart.privateName(gif_decoder, "_currentShiftState");
  var _stackPtr = dart.privateName(gif_decoder, "_stackPtr");
  var _currentCode = dart.privateName(gif_decoder, "_currentCode");
  var _lastCode = dart.privateName(gif_decoder, "_lastCode");
  var _maxCode1 = dart.privateName(gif_decoder, "_maxCode1");
  var _runningBits = dart.privateName(gif_decoder, "_runningBits");
  var _runningCode = dart.privateName(gif_decoder, "_runningCode");
  var _eofCode = dart.privateName(gif_decoder, "_eofCode");
  var _clearCode = dart.privateName(gif_decoder, "_clearCode");
  var _getInfo = dart.privateName(gif_decoder, "_getInfo");
  var _skipImage = dart.privateName(gif_decoder, "_skipImage");
  var _readApplicationExt = dart.privateName(gif_decoder, "_readApplicationExt");
  var _readGraphicsControlExt = dart.privateName(gif_decoder, "_readGraphicsControlExt");
  var _skipRemainder = dart.privateName(gif_decoder, "_skipRemainder");
  var _decodeImage = dart.privateName(gif_decoder, "_decodeImage");
  var _initDecode = dart.privateName(gif_decoder, "_initDecode");
  var _getLine = dart.privateName(gif_decoder, "_getLine");
  var _updateImage = dart.privateName(gif_decoder, "_updateImage");
  var _decompressLine = dart.privateName(gif_decoder, "_decompressLine");
  var _decompressInput = dart.privateName(gif_decoder, "_decompressInput");
  var _getPrefixChar = dart.privateName(gif_decoder, "_getPrefixChar");
  var _bufferedInput = dart.privateName(gif_decoder, "_bufferedInput");
  var info = dart.privateName(gif_decoder, "GifDecoder.info");
  var C0;
  var C1;
  var C2;
  gif_decoder.GifDecoder = class GifDecoder extends decoder.Decoder {
    get info() {
      return this[info];
    }
    set info(value) {
      this[info] = value;
    }
    isValidFile(bytes) {
      this[_input] = new input_buffer.InputBuffer.new(bytes);
      this.info = new gif_info.GifInfo.new();
      return this[_getInfo]();
    }
    numFrames() {
      return this.info != null ? this.info.numFrames : 0;
    }
    startDecode(bytes) {
      this[_input] = new input_buffer.InputBuffer.new(bytes);
      this.info = new gif_info.GifInfo.new();
      if (!dart.test(this[_getInfo]())) {
        return null;
      }
      try {
        while (!dart.test(this[_input].isEOS)) {
          let recordType = this[_input].readByte();
          switch (recordType) {
            case 44:
            {
              let gifImage = this[_skipImage]();
              if (gifImage == null) {
                return this.info;
              }
              this.info.frames[$add](gifImage);
              break;
            }
            case 33:
            {
              let extCode = this[_input].readByte();
              if (extCode === 255) {
                this[_readApplicationExt](this[_input]);
              } else if (extCode === 249) {
                this[_readGraphicsControlExt](this[_input]);
              } else {
                this[_skipRemainder]();
              }
              break;
            }
            case 59:
            {
              return this.info;
            }
            default:
            {
              break;
            }
          }
        }
      } catch (e) {
        let error = dart.getThrown(e);
        core.print(error);
      }
      return this.info;
    }
    [_readApplicationExt](_input) {
      let blockSize = _input.readByte();
      let tag = _input.readString(blockSize);
      if (tag === "NETSCAPE2.0") {
        let b1 = _input.readByte();
        let b2 = _input.readByte();
        if (b1 === 3 && b2 === 1) {
          this[_repeat] = _input.readUint16();
        }
      } else {
        this[_skipRemainder]();
      }
    }
    [_readGraphicsControlExt](_input) {
      _input.readByte();
      let b = _input.readByte();
      let duration = _input.readUint16();
      let transparent = _input.readByte();
      _input.readByte();
      let disposalMethod = dart.notNull(b) >> 2 & 7;
      let transparentFlag = dart.notNull(b) & 1;
      let recordType = _input.peekBytes(1)._get(0);
      if (recordType === 44) {
        _input.skip(1);
        let gifImage = this[_skipImage]();
        if (gifImage == null) {
          return;
        }
        gifImage.duration = duration;
        gifImage.clearFrame = disposalMethod === 2;
        if (transparentFlag !== 0) {
          if (gifImage.colorMap != null) {
            gifImage.colorMap.transparent = transparent;
          } else if (this.info.globalColorMap != null) {
            this.info.globalColorMap.transparent = transparent;
          }
        }
        this.info.frames[$add](gifImage);
      }
    }
    decodeFrame(frame) {
      if (this[_input] == null || this.info == null) {
        return null;
      }
      if (dart.notNull(frame) >= dart.notNull(this.info.frames[$length]) || dart.notNull(frame) < 0) {
        return null;
      }
      let gifImage = InternalGifImageDescL().as(this.info.frames[$_get](frame));
      this[_input].offset = gifImage.inputPosition;
      return this[_decodeImage](this.info.frames[$_get](frame));
    }
    decodeImage(bytes, opts) {
      let frame = opts && 'frame' in opts ? opts.frame : 0;
      if (this.startDecode(bytes) == null) {
        return null;
      }
      return this.decodeFrame(frame);
    }
    decodeAnimation(bytes) {
      if (this.startDecode(bytes) == null) {
        return null;
      }
      let anim = new animation.Animation.new();
      anim.width = this.info.width;
      anim.height = this.info.height;
      anim.loopCount = this[_repeat];
      let lastImage = new image$.Image.new(this.info.width, this.info.height);
      for (let i = 0; i < dart.notNull(this.info.numFrames); i = i + 1) {
        if (lastImage == null) {
          lastImage = new image$.Image.new(this.info.width, this.info.height);
        } else {
          lastImage = new image$.Image.from(lastImage);
        }
        let frame = this.info.frames[$_get](i);
        let image = this.decodeFrame(i);
        if (image == null) {
          return null;
        }
        let colorMap = frame.colorMap != null ? frame.colorMap : this.info.globalColorMap;
        if (lastImage != null) {
          if (dart.test(frame.clearFrame)) {
            lastImage.fill(colorMap.color(this.info.backgroundColor));
          }
          copy_into.copyInto(lastImage, image, {dstX: frame.x, dstY: frame.y});
        } else {
          lastImage = image;
        }
        lastImage.duration = dart.notNull(frame.duration) * 10;
        anim.addFrame(lastImage);
      }
      return anim;
    }
    [_skipImage]() {
      if (dart.test(this[_input].isEOS)) {
        return null;
      }
      let gifImage = new gif_image_desc.InternalGifImageDesc.new(this[_input]);
      this[_input].skip(1);
      this[_skipRemainder]();
      return gifImage;
    }
    [_decodeImage](gifImage) {
      if (this[_buffer] == null) {
        this[_initDecode]();
      }
      this[_bitsPerPixel] = this[_input].readByte();
      this[_clearCode] = (1)[$leftShift](this[_bitsPerPixel]);
      this[_eofCode] = dart.notNull(this[_clearCode]) + 1;
      this[_runningCode] = dart.notNull(this[_eofCode]) + 1;
      this[_runningBits] = dart.notNull(this[_bitsPerPixel]) + 1;
      this[_maxCode1] = (1)[$leftShift](this[_runningBits]);
      this[_stackPtr] = 0;
      this[_lastCode] = 4098;
      this[_currentShiftState] = 0;
      this[_currentShiftDWord] = 0;
      this[_buffer][$_set](0, 0);
      this[_prefix][$fillRange](0, this[_prefix][$length], 4098);
      let width = gifImage.width;
      let height = gifImage.height;
      if (dart.notNull(gifImage.x) + dart.notNull(width) > dart.notNull(this.info.width) || dart.notNull(gifImage.y) + dart.notNull(height) > dart.notNull(this.info.height)) {
        return null;
      }
      let colorMap = gifImage.colorMap != null ? gifImage.colorMap : this.info.globalColorMap;
      this[_pixelCount] = dart.notNull(width) * dart.notNull(height);
      let image = new image$.Image.new(width, height);
      let line = _native_typed_data.NativeUint8List.new(width);
      if (dart.test(gifImage.interlaced)) {
        let row = gifImage.y;
        for (let i = 0, j = 0; i < 4; i = i + 1) {
          for (let y = dart.notNull(row) + dart.notNull(gif_decoder.GifDecoder.INTERLACED_OFFSET[$_get](i)); y < dart.notNull(row) + dart.notNull(height); y = y + dart.notNull(gif_decoder.GifDecoder.INTERLACED_JUMP[$_get](i)), j = j + 1) {
            if (!dart.test(this[_getLine](line))) {
              return image;
            }
            this[_updateImage](image, y, colorMap, line);
          }
        }
      } else {
        for (let y = 0; y < dart.notNull(height); y = y + 1) {
          if (!dart.test(this[_getLine](line))) {
            return image;
          }
          this[_updateImage](image, y, colorMap, line);
        }
      }
      return image;
    }
    [_updateImage](image, y, colorMap, line) {
      if (colorMap != null) {
        for (let x = 0, width = line[$length]; x < dart.notNull(width); x = x + 1) {
          image.setPixel(x, y, colorMap.color(line[$_get](x)));
        }
      }
    }
    [_getInfo]() {
      let tag = this[_input].readString(6);
      if (tag !== "GIF87a" && tag !== "GIF89a") {
        return false;
      }
      this.info.width = this[_input].readUint16();
      this.info.height = this[_input].readUint16();
      let b = this[_input].readByte();
      this.info.colorResolution = ((dart.notNull(b) & 112) + 1)[$rightShift](4) + 1;
      let bitsPerPixel = (dart.notNull(b) & 7) + 1;
      this.info.backgroundColor = this[_input].readByte();
      this[_input].skip(1);
      if ((dart.notNull(b) & 128) !== 0) {
        this.info.globalColorMap = new gif_color_map.GifColorMap.new((1)[$leftShift](bitsPerPixel));
        for (let i = 0; i < dart.notNull(this.info.globalColorMap.numColors); i = i + 1) {
          let r = this[_input].readByte();
          let g = this[_input].readByte();
          let b = this[_input].readByte();
          this.info.globalColorMap.setColor(i, r, g, b);
        }
      }
      this.info.isGif89 = tag === "GIF89a";
      return true;
    }
    [_getLine](line) {
      this[_pixelCount] = dart.notNull(this[_pixelCount]) - dart.notNull(line[$length]);
      if (!dart.test(this[_decompressLine](line))) {
        return false;
      }
      if (this[_pixelCount] === 0) {
        this[_skipRemainder]();
      }
      return true;
    }
    [_skipRemainder]() {
      if (dart.test(this[_input].isEOS)) {
        return true;
      }
      let b = this[_input].readByte();
      while (b !== 0 && !dart.test(this[_input].isEOS)) {
        this[_input].skip(b);
        if (dart.test(this[_input].isEOS)) {
          return true;
        }
        b = this[_input].readByte();
      }
      return true;
    }
    [_decompressLine](line) {
      let t1, t1$, t1$0, t3, t2, t1$1, t1$2, t1$3, t1$4, t1$5;
      if (dart.notNull(this[_stackPtr]) > 4095) {
        return false;
      }
      let lineLen = line[$length];
      let i = 0;
      if (this[_stackPtr] !== 0) {
        while (this[_stackPtr] !== 0 && i < dart.notNull(lineLen)) {
          line[$_set]((t1 = i, i = t1 + 1, t1), this[_stack][$_get](this[_stackPtr] = dart.notNull(this[_stackPtr]) - 1));
        }
      }
      let currentPrefix = null;
      while (i < dart.notNull(lineLen)) {
        this[_currentCode] = this[_decompressInput]();
        if (this[_currentCode] == null) {
          return false;
        }
        if (this[_currentCode] == this[_eofCode]) {
          return false;
        }
        if (this[_currentCode] == this[_clearCode]) {
          for (let j = 0; j <= 4095; j = j + 1) {
            this[_prefix][$_set](j, 4098);
          }
          this[_runningCode] = dart.notNull(this[_eofCode]) + 1;
          this[_runningBits] = dart.notNull(this[_bitsPerPixel]) + 1;
          this[_maxCode1] = (1)[$leftShift](this[_runningBits]);
          this[_lastCode] = 4098;
        } else {
          if (dart.notNull(this[_currentCode]) < dart.notNull(this[_clearCode])) {
            line[$_set]((t1$ = i, i = t1$ + 1, t1$), this[_currentCode]);
          } else {
            if (this[_prefix][$_get](this[_currentCode]) === 4098) {
              if (this[_currentCode] === dart.notNull(this[_runningCode]) - 2) {
                currentPrefix = this[_lastCode];
                this[_suffix][$_set](dart.notNull(this[_runningCode]) - 2, (t1$1 = this[_stack], t2 = (t1$0 = this[_stackPtr], this[_stackPtr] = dart.notNull(t1$0) + 1, t1$0), t3 = this[_getPrefixChar](this[_prefix], this[_lastCode], this[_clearCode]), t1$1[$_set](t2, t3), t3));
              } else {
                return false;
              }
            } else {
              currentPrefix = this[_currentCode];
            }
            let j = 0;
            while ((t1$2 = j, j = t1$2 + 1, t1$2) <= 4095 && dart.notNull(currentPrefix) > dart.notNull(this[_clearCode]) && dart.notNull(currentPrefix) <= 4095) {
              this[_stack][$_set]((t1$3 = this[_stackPtr], this[_stackPtr] = dart.notNull(t1$3) + 1, t1$3), this[_suffix][$_get](currentPrefix));
              currentPrefix = this[_prefix][$_get](currentPrefix);
            }
            if (j >= 4095 || dart.notNull(currentPrefix) > 4095) {
              return false;
            }
            this[_stack][$_set]((t1$4 = this[_stackPtr], this[_stackPtr] = dart.notNull(t1$4) + 1, t1$4), currentPrefix);
            while (this[_stackPtr] !== 0 && i < dart.notNull(lineLen)) {
              line[$_set]((t1$5 = i, i = t1$5 + 1, t1$5), this[_stack][$_get](this[_stackPtr] = dart.notNull(this[_stackPtr]) - 1));
            }
          }
          if (this[_lastCode] !== 4098 && this[_prefix][$_get](dart.notNull(this[_runningCode]) - 2) === 4098) {
            this[_prefix][$_set](dart.notNull(this[_runningCode]) - 2, this[_lastCode]);
            if (this[_currentCode] === dart.notNull(this[_runningCode]) - 2) {
              this[_suffix][$_set](dart.notNull(this[_runningCode]) - 2, this[_getPrefixChar](this[_prefix], this[_lastCode], this[_clearCode]));
            } else {
              this[_suffix][$_set](dart.notNull(this[_runningCode]) - 2, this[_getPrefixChar](this[_prefix], this[_currentCode], this[_clearCode]));
            }
          }
          this[_lastCode] = this[_currentCode];
        }
      }
      return true;
    }
    [_decompressInput]() {
      let code = null;
      if (dart.notNull(this[_runningBits]) > 12) {
        return null;
      }
      while (dart.notNull(this[_currentShiftState]) < dart.notNull(this[_runningBits])) {
        let nextByte = this[_bufferedInput]();
        this[_currentShiftDWord] = (dart.notNull(this[_currentShiftDWord]) | nextByte[$leftShift](this[_currentShiftState])) >>> 0;
        this[_currentShiftState] = dart.notNull(this[_currentShiftState]) + 8;
      }
      code = (dart.notNull(this[_currentShiftDWord]) & dart.notNull(gif_decoder.GifDecoder.CODE_MASKS[$_get](this[_runningBits]))) >>> 0;
      this[_currentShiftDWord] = this[_currentShiftDWord][$rightShift](this[_runningBits]);
      this[_currentShiftState] = dart.notNull(this[_currentShiftState]) - dart.notNull(this[_runningBits]);
      if (dart.notNull(this[_runningCode]) < 4095 + 2 && (this[_runningCode] = dart.notNull(this[_runningCode]) + 1) > dart.notNull(this[_maxCode1]) && dart.notNull(this[_runningBits]) < 12) {
        this[_maxCode1] = dart.notNull(this[_maxCode1]) << 1 >>> 0;
        this[_runningBits] = dart.notNull(this[_runningBits]) + 1;
      }
      return code;
    }
    [_getPrefixChar](prefix, code, clearCode) {
      let t1;
      let i = 0;
      while (dart.notNull(code) > dart.notNull(clearCode) && (t1 = i, i = t1 + 1, t1) <= 4095) {
        if (dart.notNull(code) > 4095) {
          return 4098;
        }
        code = prefix[$_get](code);
      }
      return code;
    }
    [_bufferedInput]() {
      let t2, t1, t3, t2$, t1$, t2$0, t1$0;
      let nextByte = null;
      if (this[_buffer][$_get](0) === 0) {
        this[_buffer][$_set](0, this[_input].readByte());
        if (this[_buffer][$_get](0) === 0) {
          return null;
        }
        this[_buffer][$setRange](1, 1 + dart.notNull(this[_buffer][$_get](0)), this[_input].readBytes(this[_buffer][$_get](0)).toUint8List());
        nextByte = this[_buffer][$_get](1);
        this[_buffer][$_set](1, 2);
        t1 = this[_buffer];
        t2 = 0;
        t1[$_set](t2, dart.notNull(t1[$_get](t2)) - 1);
      } else {
        nextByte = this[_buffer][$_get]((t1$ = this[_buffer], t2$ = 1, t3 = t1$[$_get](t2$), t1$[$_set](t2$, dart.notNull(t3) + 1), t3));
        t1$0 = this[_buffer];
        t2$0 = 0;
        t1$0[$_set](t2$0, dart.notNull(t1$0[$_get](t2$0)) - 1);
      }
      return nextByte;
    }
    [_initDecode]() {
      this[_buffer] = _native_typed_data.NativeUint8List.new(256);
      this[_stack] = _native_typed_data.NativeUint8List.new(4095);
      this[_suffix] = _native_typed_data.NativeUint8List.new(4095 + 1);
      this[_prefix] = _native_typed_data.NativeUint32List.new(4095 + 1);
    }
  };
  (gif_decoder.GifDecoder.new = function(bytes = null) {
    this[info] = null;
    this[_input] = null;
    this[_repeat] = 0;
    this[_buffer] = null;
    this[_stack] = null;
    this[_suffix] = null;
    this[_prefix] = null;
    this[_bitsPerPixel] = null;
    this[_pixelCount] = null;
    this[_currentShiftDWord] = null;
    this[_currentShiftState] = null;
    this[_stackPtr] = null;
    this[_currentCode] = null;
    this[_lastCode] = null;
    this[_maxCode1] = null;
    this[_runningBits] = null;
    this[_runningCode] = null;
    this[_eofCode] = null;
    this[_clearCode] = null;
    if (bytes != null) {
      this.startDecode(bytes);
    }
  }).prototype = gif_decoder.GifDecoder.prototype;
  dart.addTypeTests(gif_decoder.GifDecoder);
  dart.addTypeCaches(gif_decoder.GifDecoder);
  dart.setMethodSignature(gif_decoder.GifDecoder, () => ({
    __proto__: dart.getMethods(gif_decoder.GifDecoder.__proto__),
    isValidFile: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.List$(dart.legacy(core.int)))]),
    numFrames: dart.fnType(dart.legacy(core.int), []),
    startDecode: dart.fnType(dart.legacy(gif_info.GifInfo), [dart.legacy(core.List$(dart.legacy(core.int)))]),
    [_readApplicationExt]: dart.fnType(dart.void, [dart.legacy(input_buffer.InputBuffer)]),
    [_readGraphicsControlExt]: dart.fnType(dart.void, [dart.legacy(input_buffer.InputBuffer)]),
    decodeFrame: dart.fnType(dart.legacy(image$.Image), [dart.legacy(core.int)]),
    decodeImage: dart.fnType(dart.legacy(image$.Image), [dart.legacy(core.List$(dart.legacy(core.int)))], {frame: dart.legacy(core.int)}, {}),
    decodeAnimation: dart.fnType(dart.legacy(animation.Animation), [dart.legacy(core.List$(dart.legacy(core.int)))]),
    [_skipImage]: dart.fnType(dart.legacy(gif_image_desc.InternalGifImageDesc), []),
    [_decodeImage]: dart.fnType(dart.legacy(image$.Image), [dart.legacy(gif_image_desc.GifImageDesc)]),
    [_updateImage]: dart.fnType(dart.void, [dart.legacy(image$.Image), dart.legacy(core.int), dart.legacy(gif_color_map.GifColorMap), dart.legacy(typed_data.Uint8List)]),
    [_getInfo]: dart.fnType(dart.legacy(core.bool), []),
    [_getLine]: dart.fnType(dart.legacy(core.bool), [dart.legacy(typed_data.Uint8List)]),
    [_skipRemainder]: dart.fnType(dart.legacy(core.bool), []),
    [_decompressLine]: dart.fnType(dart.legacy(core.bool), [dart.legacy(typed_data.Uint8List)]),
    [_decompressInput]: dart.fnType(dart.legacy(core.int), []),
    [_getPrefixChar]: dart.fnType(dart.legacy(core.int), [dart.legacy(typed_data.Uint32List), dart.legacy(core.int), dart.legacy(core.int)]),
    [_bufferedInput]: dart.fnType(dart.legacy(core.int), []),
    [_initDecode]: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(gif_decoder.GifDecoder, L0);
  dart.setFieldSignature(gif_decoder.GifDecoder, () => ({
    __proto__: dart.getFields(gif_decoder.GifDecoder.__proto__),
    info: dart.fieldType(dart.legacy(gif_info.GifInfo)),
    [_input]: dart.fieldType(dart.legacy(input_buffer.InputBuffer)),
    [_repeat]: dart.fieldType(dart.legacy(core.int)),
    [_buffer]: dart.fieldType(dart.legacy(typed_data.Uint8List)),
    [_stack]: dart.fieldType(dart.legacy(typed_data.Uint8List)),
    [_suffix]: dart.fieldType(dart.legacy(typed_data.Uint8List)),
    [_prefix]: dart.fieldType(dart.legacy(typed_data.Uint32List)),
    [_bitsPerPixel]: dart.fieldType(dart.legacy(core.int)),
    [_pixelCount]: dart.fieldType(dart.legacy(core.int)),
    [_currentShiftDWord]: dart.fieldType(dart.legacy(core.int)),
    [_currentShiftState]: dart.fieldType(dart.legacy(core.int)),
    [_stackPtr]: dart.fieldType(dart.legacy(core.int)),
    [_currentCode]: dart.fieldType(dart.legacy(core.int)),
    [_lastCode]: dart.fieldType(dart.legacy(core.int)),
    [_maxCode1]: dart.fieldType(dart.legacy(core.int)),
    [_runningBits]: dart.fieldType(dart.legacy(core.int)),
    [_runningCode]: dart.fieldType(dart.legacy(core.int)),
    [_eofCode]: dart.fieldType(dart.legacy(core.int)),
    [_clearCode]: dart.fieldType(dart.legacy(core.int))
  }));
  dart.defineLazy(gif_decoder.GifDecoder, {
    /*gif_decoder.GifDecoder.STAMP_SIZE*/get STAMP_SIZE() {
      return 6;
    },
    /*gif_decoder.GifDecoder.GIF87_STAMP*/get GIF87_STAMP() {
      return "GIF87a";
    },
    /*gif_decoder.GifDecoder.GIF89_STAMP*/get GIF89_STAMP() {
      return "GIF89a";
    },
    /*gif_decoder.GifDecoder.IMAGE_DESC_RECORD_TYPE*/get IMAGE_DESC_RECORD_TYPE() {
      return 44;
    },
    /*gif_decoder.GifDecoder.EXTENSION_RECORD_TYPE*/get EXTENSION_RECORD_TYPE() {
      return 33;
    },
    /*gif_decoder.GifDecoder.TERMINATE_RECORD_TYPE*/get TERMINATE_RECORD_TYPE() {
      return 59;
    },
    /*gif_decoder.GifDecoder.GRAPHIC_CONTROL_EXT*/get GRAPHIC_CONTROL_EXT() {
      return 249;
    },
    /*gif_decoder.GifDecoder.APPLICATION_EXT*/get APPLICATION_EXT() {
      return 255;
    },
    /*gif_decoder.GifDecoder.LZ_MAX_CODE*/get LZ_MAX_CODE() {
      return 4095;
    },
    /*gif_decoder.GifDecoder.LZ_BITS*/get LZ_BITS() {
      return 12;
    },
    /*gif_decoder.GifDecoder.NO_SUCH_CODE*/get NO_SUCH_CODE() {
      return 4098;
    },
    /*gif_decoder.GifDecoder.CODE_MASKS*/get CODE_MASKS() {
      return C0 || CT.C0;
    },
    /*gif_decoder.GifDecoder.INTERLACED_OFFSET*/get INTERLACED_OFFSET() {
      return C1 || CT.C1;
    },
    /*gif_decoder.GifDecoder.INTERLACED_JUMP*/get INTERLACED_JUMP() {
      return C2 || CT.C2;
    }
  }, true);
  dart.trackLibraries("packages/image/src/formats/gif_decoder.dart", {
    "package:image/src/formats/gif_decoder.dart": gif_decoder
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["gif_decoder.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../packages/image/src/formats/gif_decoder.dart.lib.js"}');
  // Exports:
  return {
    src__formats__gif_decoder: gif_decoder
  };
}));

//# sourceMappingURL=gif_decoder.dart.lib.js.map
