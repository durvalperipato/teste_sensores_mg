define(['dart_sdk', 'packages/pdf/src/pdf/rect.dart', 'packages/pdf/src/pdf/point.dart', 'packages/vector_math/vector_math_64.dart', 'packages/pdf/src/pdf/colors.dart', 'packages/pdf/src/pdf/color.dart', 'packages/pdf/src/pdf/signature.dart', 'packages/pdf/src/pdf/ttf_parser.dart', 'packages/image/src/formats/cur_encoder.dart', 'packages/image/src/formats/jpeg_decoder.dart', 'packages/image/src/transform/copy_resize.dart', 'packages/image/src/image.dart', 'packages/image/src/draw/fill_rect.dart', 'packages/image/src/filter/gaussian_blur.dart', 'packages/image/src/draw/draw_line.dart', 'packages/pdf/src/pdf/font_metrics.dart', 'packages/pdf/src/pdf/arabic.dart', 'packages/pdf/src/pdf/page_format.dart'], (function load__packages__pdf__src__widgets__container_dart(dart_sdk, packages__pdf__src__pdf__rect$46dart, packages__pdf__src__pdf__point$46dart, packages__vector_math__vector_math_64$46dart, packages__pdf__src__pdf__colors$46dart, packages__pdf__src__pdf__color$46dart, packages__pdf__src__pdf__signature$46dart, packages__pdf__src__pdf__ttf_parser$46dart, packages__image__src__formats__cur_encoder$46dart, packages__image__src__formats__jpeg_decoder$46dart, packages__image__src__transform__copy_resize$46dart, packages__image__src__image$46dart, packages__image__src__draw__fill_rect$46dart, packages__image__src__filter__gaussian_blur$46dart, packages__image__src__draw__draw_line$46dart, packages__pdf__src__pdf__font_metrics$46dart, packages__pdf__src__pdf__arabic$46dart, packages__pdf__src__pdf__page_format$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _interceptors = dart_sdk._interceptors;
  const typed_data = dart_sdk.typed_data;
  const _js_helper = dart_sdk._js_helper;
  const math = dart_sdk.math;
  const async = dart_sdk.async;
  const collection = dart_sdk.collection;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const rect$ = packages__pdf__src__pdf__rect$46dart.src__pdf__rect;
  const point$ = packages__pdf__src__pdf__point$46dart.src__pdf__point;
  const vector_math_64 = packages__vector_math__vector_math_64$46dart.vector_math_64;
  const colors = packages__pdf__src__pdf__colors$46dart.src__pdf__colors;
  const color = packages__pdf__src__pdf__color$46dart.src__pdf__color;
  const font = packages__pdf__src__pdf__signature$46dart.src__pdf__font;
  const document = packages__pdf__src__pdf__signature$46dart.src__pdf__document;
  const ttffont = packages__pdf__src__pdf__signature$46dart.src__pdf__ttffont;
  const image$ = packages__pdf__src__pdf__signature$46dart.src__pdf__image;
  const exif = packages__pdf__src__pdf__signature$46dart.src__pdf__exif;
  const shading = packages__pdf__src__pdf__signature$46dart.src__pdf__shading;
  const $function = packages__pdf__src__pdf__signature$46dart.src__pdf__function;
  const graphics = packages__pdf__src__pdf__signature$46dart.src__pdf__graphics;
  const page = packages__pdf__src__pdf__signature$46dart.src__pdf__page;
  const info = packages__pdf__src__pdf__signature$46dart.src__pdf__info;
  const graphic_state = packages__pdf__src__pdf__signature$46dart.src__pdf__graphic_state;
  const annotation = packages__pdf__src__pdf__signature$46dart.src__pdf__annotation;
  const signature = packages__pdf__src__pdf__signature$46dart.src__pdf__signature;
  const border = packages__pdf__src__pdf__signature$46dart.src__pdf__border;
  const outline = packages__pdf__src__pdf__signature$46dart.src__pdf__outline;
  const ttf_parser = packages__pdf__src__pdf__ttf_parser$46dart.src__pdf__ttf_parser;
  const formats = packages__image__src__formats__cur_encoder$46dart.src__formats__formats;
  const jpeg_decoder = packages__image__src__formats__jpeg_decoder$46dart.src__formats__jpeg_decoder;
  const copy_resize = packages__image__src__transform__copy_resize$46dart.src__transform__copy_resize;
  const image = packages__image__src__image$46dart.src__image;
  const fill_rect = packages__image__src__draw__fill_rect$46dart.src__draw__fill_rect;
  const gaussian_blur = packages__image__src__filter__gaussian_blur$46dart.src__filter__gaussian_blur;
  const draw_circle = packages__image__src__draw__draw_line$46dart.src__draw__draw_circle;
  const font_metrics = packages__pdf__src__pdf__font_metrics$46dart.src__pdf__font_metrics;
  const arabic = packages__pdf__src__pdf__arabic$46dart.src__pdf__arabic;
  const page_format = packages__pdf__src__pdf__page_format$46dart.src__pdf__page_format;
  var container = Object.create(dart.library);
  var icon$ = Object.create(dart.library);
  var theme$ = Object.create(dart.library);
  var font$ = Object.create(dart.library);
  var image_provider = Object.create(dart.library);
  var decoration$ = Object.create(dart.library);
  var text_style = Object.create(dart.library);
  var text$ = Object.create(dart.library);
  var page_theme = Object.create(dart.library);
  var geometry = Object.create(dart.library);
  var page$ = Object.create(dart.library);
  var document$ = Object.create(dart.library);
  var widget$ = Object.create(dart.library);
  var border_radius = Object.create(dart.library);
  var box_border = Object.create(dart.library);
  var basic = Object.create(dart.library);
  var annotations = Object.create(dart.library);
  var $_get = dartx._get;
  var $toString = dartx.toString;
  var $firstWhere = dartx.firstWhere;
  var $_set = dartx._set;
  var $toInt = dartx.toInt;
  var $containsKey = dartx.containsKey;
  var $toDouble = dartx.toDouble;
  var $isEmpty = dartx.isEmpty;
  var $length = dartx.length;
  var $first = dartx.first;
  var $round = dartx.round;
  var $hashCode = dartx.hashCode;
  var $add = dartx.add;
  var $join = dartx.join;
  var $_equals = dartx._equals;
  var $isNotEmpty = dartx.isNotEmpty;
  var $last = dartx.last;
  var $clear = dartx.clear;
  var $split = dartx.split;
  var $sublist = dartx.sublist;
  var $clamp = dartx.clamp;
  var $indexOf = dartx.indexOf;
  var $reduce = dartx.reduce;
  var $runtimeType = dartx.runtimeType;
  var $isFinite = dartx.isFinite;
  var InheritedL = () => (InheritedL = dart.constFn(dart.legacy(widget$.Inherited)))();
  var JSArrayOfInheritedL = () => (JSArrayOfInheritedL = dart.constFn(_interceptors.JSArray$(InheritedL())))();
  var boolL = () => (boolL = dart.constFn(dart.legacy(core.bool)))();
  var VoidToboolL = () => (VoidToboolL = dart.constFn(dart.fnType(boolL(), [])))();
  var ThemeDataL = () => (ThemeDataL = dart.constFn(dart.legacy(theme$.ThemeData)))();
  var WidgetL = () => (WidgetL = dart.constFn(dart.legacy(widget$.Widget)))();
  var ContextL = () => (ContextL = dart.constFn(dart.legacy(widget$.Context)))();
  var ContextLToWidgetL = () => (ContextLToWidgetL = dart.constFn(dart.fnType(WidgetL(), [ContextL()])))();
  var DefaultTextStyleL = () => (DefaultTextStyleL = dart.constFn(dart.legacy(theme$.DefaultTextStyle)))();
  var ContextLToDefaultTextStyleL = () => (ContextLToDefaultTextStyleL = dart.constFn(dart.fnType(DefaultTextStyleL(), [ContextL()])))();
  var Type1FontsL = () => (Type1FontsL = dart.constFn(dart.legacy(font$.Type1Fonts)))();
  var PdfFontL = () => (PdfFontL = dart.constFn(dart.legacy(font.PdfFont)))();
  var PdfFontLToboolL = () => (PdfFontLToboolL = dart.constFn(dart.fnType(boolL(), [PdfFontL()])))();
  var VoidToNull = () => (VoidToNull = dart.constFn(dart.fnType(core.Null, [])))();
  var StringL = () => (StringL = dart.constFn(dart.legacy(core.String)))();
  var intL = () => (intL = dart.constFn(dart.legacy(core.int)))();
  var PdfImageL = () => (PdfImageL = dart.constFn(dart.legacy(image$.PdfImage)))();
  var IdentityMapOfintL$PdfImageL = () => (IdentityMapOfintL$PdfImageL = dart.constFn(_js_helper.IdentityMap$(intL(), PdfImageL())))();
  var JpegDecoderL = () => (JpegDecoderL = dart.constFn(dart.legacy(jpeg_decoder.JpegDecoder)))();
  var DecorationPositionL = () => (DecorationPositionL = dart.constFn(dart.legacy(decoration$.DecorationPosition)))();
  var TileModeL = () => (TileModeL = dart.constFn(dart.legacy(decoration$.TileMode)))();
  var doubleL = () => (doubleL = dart.constFn(dart.legacy(core.double)))();
  var BoxShapeL = () => (BoxShapeL = dart.constFn(dart.legacy(decoration$.BoxShape)))();
  var PaintPhaseL = () => (PaintPhaseL = dart.constFn(dart.legacy(decoration$.PaintPhase)))();
  var FontWeightL = () => (FontWeightL = dart.constFn(dart.legacy(text_style.FontWeight)))();
  var FontStyleL = () => (FontStyleL = dart.constFn(dart.legacy(text_style.FontStyle)))();
  var TextDecorationStyleL = () => (TextDecorationStyleL = dart.constFn(dart.legacy(text_style.TextDecorationStyle)))();
  var TextDecorationL = () => (TextDecorationL = dart.constFn(dart.legacy(text_style.TextDecoration)))();
  var JSArrayOfStringL = () => (JSArrayOfStringL = dart.constFn(_interceptors.JSArray$(StringL())))();
  var InheritedDirectionalityL = () => (InheritedDirectionalityL = dart.constFn(dart.legacy(text_style.InheritedDirectionality)))();
  var TextAlignL = () => (TextAlignL = dart.constFn(dart.legacy(text$.TextAlign)))();
  var TextDirectionL = () => (TextDirectionL = dart.constFn(dart.legacy(text$.TextDirection)))();
  var TextSpanL = () => (TextSpanL = dart.constFn(dart.legacy(text$.TextSpan)))();
  var InlineSpanL = () => (InlineSpanL = dart.constFn(dart.legacy(text$.InlineSpan)))();
  var TextStyleL = () => (TextStyleL = dart.constFn(dart.legacy(text_style.TextStyle)))();
  var InlineSpanLAndTextStyleLToboolL = () => (InlineSpanLAndTextStyleLToboolL = dart.constFn(dart.fnType(boolL(), [InlineSpanL(), TextStyleL()])))();
  var _SpanL = () => (_SpanL = dart.constFn(dart.legacy(text$._Span)))();
  var JSArrayOf_SpanL = () => (JSArrayOf_SpanL = dart.constFn(_interceptors.JSArray$(_SpanL())))();
  var _TextDecorationL = () => (_TextDecorationL = dart.constFn(dart.legacy(text$._TextDecoration)))();
  var JSArrayOf_TextDecorationL = () => (JSArrayOf_TextDecorationL = dart.constFn(_interceptors.JSArray$(_TextDecorationL())))();
  var WidgetSpanL = () => (WidgetSpanL = dart.constFn(dart.legacy(text$.WidgetSpan)))();
  var PageOrientationL = () => (PageOrientationL = dart.constFn(dart.legacy(page$.PageOrientation)))();
  var PageL = () => (PageL = dart.constFn(dart.legacy(page$.Page)))();
  var JSArrayOfPageL = () => (JSArrayOfPageL = dart.constFn(_interceptors.JSArray$(PageL())))();
  var Uint8ListL = () => (Uint8ListL = dart.constFn(dart.legacy(typed_data.Uint8List)))();
  var TypeL = () => (TypeL = dart.constFn(dart.legacy(core.Type)))();
  var LinkedMapOfTypeL$InheritedL = () => (LinkedMapOfTypeL$InheritedL = dart.constFn(_js_helper.LinkedMap$(TypeL(), InheritedL())))();
  var HashMapOfTypeL$InheritedL = () => (HashMapOfTypeL$InheritedL = dart.constFn(collection.HashMap$(TypeL(), InheritedL())))();
  var JSArrayOfdoubleL = () => (JSArrayOfdoubleL = dart.constFn(_interceptors.JSArray$(doubleL())))();
  var TAndTToT = () => (TAndTToT = dart.constFn(dart.gFnType(T => [T, [T, T]], T => [core.num])))();
  var TAndTToT$ = () => (TAndTToT$ = dart.constFn(dart.gFnType(T => [T, [T, T]], T => [core.num])))();
  var BorderStyleL = () => (BorderStyleL = dart.constFn(dart.legacy(box_border.BorderStyle)))();
  var BorderSideL = () => (BorderSideL = dart.constFn(dart.legacy(box_border.BorderSide)))();
  var BoxFitL = () => (BoxFitL = dart.constFn(dart.legacy(basic.BoxFit)))();
  var numL = () => (numL = dart.constFn(dart.legacy(core.num)))();
  const CT = Object.create(null);
  var L23 = "package:pdf/src/widgets/document.dart";
  var L1 = "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-2.0.0/lib/src/widgets/widget.dart";
  var L12 = "package:pdf/src/widgets/decoration.dart";
  var L24 = "package:pdf/src/widgets/border_radius.dart";
  var L28 = "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-2.0.0/lib/src/widgets/basic.dart";
  var L21 = "package:pdf/src/widgets/page.dart";
  var L16 = "package:pdf/src/widgets/text.dart";
  var L30 = "package:pdf/src/widgets/annotations.dart";
  var L5 = "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-2.0.0/lib/src/widgets/icon.dart";
  var L10 = "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-2.0.0/lib/src/widgets/image_provider.dart";
  var L11 = "package:pdf/src/widgets/image_provider.dart";
  var L2 = "package:pdf/src/widgets/widget.dart";
  var L29 = "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-2.0.0/lib/src/widgets/annotations.dart";
  var L3 = "package:pdf/src/widgets/container.dart";
  var L8 = "package:pdf/src/widgets/font.dart";
  var L22 = "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-2.0.0/lib/src/widgets/page.dart";
  var L19 = "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-2.0.0/lib/src/widgets/geometry.dart";
  var L0 = "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-2.0.0/lib/src/widgets/container.dart";
  var L17 = "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-2.0.0/lib/src/widgets/text.dart";
  var L13 = "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-2.0.0/lib/src/widgets/decoration.dart";
  var L7 = "package:pdf/src/widgets/theme.dart";
  var L25 = "package:pdf/src/widgets/box_border.dart";
  var L4 = "package:pdf/src/widgets/icon.dart";
  var L9 = "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-2.0.0/lib/src/widgets/font.dart";
  var L20 = "package:pdf/src/widgets/geometry.dart";
  var L26 = "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-2.0.0/lib/src/widgets/box_border.dart";
  var L18 = "package:pdf/src/widgets/page_theme.dart";
  var L6 = "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-2.0.0/lib/src/widgets/theme.dart";
  var L27 = "package:pdf/src/widgets/basic.dart";
  var L14 = "package:pdf/src/widgets/text_style.dart";
  var L15 = "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-2.0.0/lib/src/widgets/text_style.dart";
  dart.defineLazy(CT, {
    get C0() {
      return C0 = dart.const({
        __proto__: decoration$.DecorationPosition.prototype,
        [_name$]: "DecorationPosition.background",
        index: 0
      });
    },
    get C1() {
      return C1 = dart.const({
        __proto__: geometry.BoxConstraints.prototype,
        [BoxConstraints_maxHeight]: 1 / 0,
        [BoxConstraints_minHeight]: 0,
        [BoxConstraints_maxWidth]: 1 / 0,
        [BoxConstraints_minWidth]: 0
      });
    },
    get C2() {
      return C2 = dart.const({
        __proto__: geometry.BoxConstraints.prototype,
        [BoxConstraints_maxHeight]: 1 / 0,
        [BoxConstraints_minHeight]: 1 / 0,
        [BoxConstraints_maxWidth]: 1 / 0,
        [BoxConstraints_minWidth]: 1 / 0
      });
    },
    get C3() {
      return C3 = dart.const({
        __proto__: text$.TextDirection.prototype,
        [_name$0]: "TextDirection.rtl",
        index: 1
      });
    },
    get C4() {
      return C4 = dart.const({
        __proto__: text$.TextDirection.prototype,
        [_name$0]: "TextDirection.ltr",
        index: 0
      });
    },
    get C5() {
      return C5 = dart.const({
        __proto__: font$.Type1Fonts.prototype,
        [_name$1]: "Type1Fonts.courier",
        index: 0
      });
    },
    get C6() {
      return C6 = dart.const({
        __proto__: font$.Type1Fonts.prototype,
        [_name$1]: "Type1Fonts.courierBold",
        index: 1
      });
    },
    get C7() {
      return C7 = dart.const({
        __proto__: font$.Type1Fonts.prototype,
        [_name$1]: "Type1Fonts.courierBoldOblique",
        index: 2
      });
    },
    get C8() {
      return C8 = dart.const({
        __proto__: font$.Type1Fonts.prototype,
        [_name$1]: "Type1Fonts.courierOblique",
        index: 3
      });
    },
    get C9() {
      return C9 = dart.const({
        __proto__: font$.Type1Fonts.prototype,
        [_name$1]: "Type1Fonts.helvetica",
        index: 4
      });
    },
    get C10() {
      return C10 = dart.const({
        __proto__: font$.Type1Fonts.prototype,
        [_name$1]: "Type1Fonts.helveticaBold",
        index: 5
      });
    },
    get C11() {
      return C11 = dart.const({
        __proto__: font$.Type1Fonts.prototype,
        [_name$1]: "Type1Fonts.helveticaBoldOblique",
        index: 6
      });
    },
    get C12() {
      return C12 = dart.const({
        __proto__: font$.Type1Fonts.prototype,
        [_name$1]: "Type1Fonts.helveticaOblique",
        index: 7
      });
    },
    get C13() {
      return C13 = dart.const({
        __proto__: font$.Type1Fonts.prototype,
        [_name$1]: "Type1Fonts.times",
        index: 8
      });
    },
    get C14() {
      return C14 = dart.const({
        __proto__: font$.Type1Fonts.prototype,
        [_name$1]: "Type1Fonts.timesBold",
        index: 9
      });
    },
    get C15() {
      return C15 = dart.const({
        __proto__: font$.Type1Fonts.prototype,
        [_name$1]: "Type1Fonts.timesBoldItalic",
        index: 10
      });
    },
    get C16() {
      return C16 = dart.const({
        __proto__: font$.Type1Fonts.prototype,
        [_name$1]: "Type1Fonts.timesItalic",
        index: 11
      });
    },
    get C17() {
      return C17 = dart.const({
        __proto__: font$.Type1Fonts.prototype,
        [_name$1]: "Type1Fonts.symbol",
        index: 12
      });
    },
    get C18() {
      return C18 = dart.const({
        __proto__: font$.Type1Fonts.prototype,
        [_name$1]: "Type1Fonts.zapfDingbats",
        index: 13
      });
    },
    get C19() {
      return C19 = dart.constList([C5 || CT.C5, C6 || CT.C6, C7 || CT.C7, C8 || CT.C8, C9 || CT.C9, C10 || CT.C10, C11 || CT.C11, C12 || CT.C12, C13 || CT.C13, C14 || CT.C14, C15 || CT.C15, C16 || CT.C16, C17 || CT.C17, C18 || CT.C18], Type1FontsL());
    },
    get C20() {
      return C20 = dart.constMap(Type1FontsL(), StringL(), [C5 || CT.C5, "Courier", C6 || CT.C6, "Courier-Bold", C7 || CT.C7, "Courier-BoldOblique", C8 || CT.C8, "Courier-Oblique", C9 || CT.C9, "Helvetica", C10 || CT.C10, "Helvetica-Bold", C11 || CT.C11, "Helvetica-BoldOblique", C12 || CT.C12, "Helvetica-Oblique", C13 || CT.C13, "Times-Roman", C14 || CT.C14, "Times-Bold", C15 || CT.C15, "Times-BoldItalic", C16 || CT.C16, "Times-Italic", C17 || CT.C17, "Symbol", C18 || CT.C18, "ZapfDingbats"]);
    },
    get C21() {
      return C21 = dart.const({
        __proto__: decoration$.DecorationPosition.prototype,
        [_name$]: "DecorationPosition.foreground",
        index: 1
      });
    },
    get C22() {
      return C22 = dart.constList([C0 || CT.C0, C21 || CT.C21], DecorationPositionL());
    },
    get C23() {
      return C23 = dart.const({
        __proto__: basic.BoxFit.prototype,
        [_name$2]: "BoxFit.cover",
        index: 2
      });
    },
    get C24() {
      return C24 = dart.const({
        __proto__: geometry.Alignment.prototype,
        [Alignment_y]: 0,
        [Alignment_x]: 0
      });
    },
    get C25() {
      return C25 = dart.const({
        __proto__: decoration$.TileMode.prototype,
        [_name$]: "TileMode.clamp",
        index: 0
      });
    },
    get C26() {
      return C26 = dart.constList([C25 || CT.C25], TileModeL());
    },
    get C27() {
      return C27 = dart.const({
        __proto__: geometry.Alignment.prototype,
        [Alignment_y]: 0,
        [Alignment_x]: -1
      });
    },
    get C28() {
      return C28 = dart.const({
        __proto__: geometry.Alignment.prototype,
        [Alignment_y]: 0,
        [Alignment_x]: 1
      });
    },
    get C29() {
      return C29 = dart.const({
        __proto__: color.PdfColor.prototype,
        [PdfColor_blue]: 0,
        [PdfColor_green]: 0,
        [PdfColor_red]: 0,
        [PdfColor_alpha]: 1
      });
    },
    get C30() {
      return C30 = dart.const({
        __proto__: point$.PdfPoint.prototype,
        [PdfPoint_y]: 0,
        [PdfPoint_x]: 0
      });
    },
    get C31() {
      return C31 = dart.const({
        __proto__: decoration$.BoxShape.prototype,
        [_name$]: "BoxShape.circle",
        index: 0
      });
    },
    get C32() {
      return C32 = dart.const({
        __proto__: decoration$.BoxShape.prototype,
        [_name$]: "BoxShape.rectangle",
        index: 1
      });
    },
    get C33() {
      return C33 = dart.constList([C31 || CT.C31, C32 || CT.C32], BoxShapeL());
    },
    get C34() {
      return C34 = dart.const({
        __proto__: decoration$.PaintPhase.prototype,
        [_name$]: "PaintPhase.all",
        index: 0
      });
    },
    get C35() {
      return C35 = dart.const({
        __proto__: decoration$.PaintPhase.prototype,
        [_name$]: "PaintPhase.background",
        index: 1
      });
    },
    get C36() {
      return C36 = dart.const({
        __proto__: decoration$.PaintPhase.prototype,
        [_name$]: "PaintPhase.foreground",
        index: 2
      });
    },
    get C37() {
      return C37 = dart.constList([C34 || CT.C34, C35 || CT.C35, C36 || CT.C36], PaintPhaseL());
    },
    get C38() {
      return C38 = dart.const({
        __proto__: text_style.FontWeight.prototype,
        [_name$3]: "FontWeight.normal",
        index: 0
      });
    },
    get C39() {
      return C39 = dart.const({
        __proto__: text_style.FontWeight.prototype,
        [_name$3]: "FontWeight.bold",
        index: 1
      });
    },
    get C40() {
      return C40 = dart.constList([C38 || CT.C38, C39 || CT.C39], FontWeightL());
    },
    get C41() {
      return C41 = dart.const({
        __proto__: text_style.FontStyle.prototype,
        [_name$3]: "FontStyle.normal",
        index: 0
      });
    },
    get C42() {
      return C42 = dart.const({
        __proto__: text_style.FontStyle.prototype,
        [_name$3]: "FontStyle.italic",
        index: 1
      });
    },
    get C43() {
      return C43 = dart.constList([C41 || CT.C41, C42 || CT.C42], FontStyleL());
    },
    get C44() {
      return C44 = dart.const({
        __proto__: text_style.TextDecorationStyle.prototype,
        [_name$3]: "TextDecorationStyle.solid",
        index: 0
      });
    },
    get C45() {
      return C45 = dart.const({
        __proto__: text_style.TextDecorationStyle.prototype,
        [_name$3]: "TextDecorationStyle.double",
        index: 1
      });
    },
    get C46() {
      return C46 = dart.constList([C44 || CT.C44, C45 || CT.C45], TextDecorationStyleL());
    },
    get C47() {
      return C47 = dart.const({
        __proto__: text_style.TextDecoration.prototype,
        [_mask$]: 0
      });
    },
    get C48() {
      return C48 = dart.const({
        __proto__: text_style.TextDecoration.prototype,
        [_mask$]: 1
      });
    },
    get C49() {
      return C49 = dart.const({
        __proto__: text_style.TextDecoration.prototype,
        [_mask$]: 2
      });
    },
    get C50() {
      return C50 = dart.const({
        __proto__: text_style.TextDecoration.prototype,
        [_mask$]: 4
      });
    },
    get C51() {
      return C51 = dart.const({
        __proto__: text$.TextAlign.prototype,
        [_name$0]: "TextAlign.left",
        index: 0
      });
    },
    get C52() {
      return C52 = dart.const({
        __proto__: text$.TextAlign.prototype,
        [_name$0]: "TextAlign.right",
        index: 1
      });
    },
    get C53() {
      return C53 = dart.const({
        __proto__: text$.TextAlign.prototype,
        [_name$0]: "TextAlign.center",
        index: 2
      });
    },
    get C54() {
      return C54 = dart.const({
        __proto__: text$.TextAlign.prototype,
        [_name$0]: "TextAlign.justify",
        index: 3
      });
    },
    get C55() {
      return C55 = dart.constList([C51 || CT.C51, C52 || CT.C52, C53 || CT.C53, C54 || CT.C54], TextAlignL());
    },
    get C56() {
      return C56 = dart.constList([C4 || CT.C4, C3 || CT.C3], TextDirectionL());
    },
    get C57() {
      return C57 = dart.const({
        __proto__: geometry.EdgeInsets.prototype,
        [bottom$]: 0,
        [right$]: 0,
        [top$]: 0,
        [left$]: 0
      });
    },
    get C58() {
      return C58 = dart.const({
        __proto__: geometry.Alignment.prototype,
        [Alignment_y]: 1,
        [Alignment_x]: -1
      });
    },
    get C59() {
      return C59 = dart.const({
        __proto__: geometry.Alignment.prototype,
        [Alignment_y]: 1,
        [Alignment_x]: 0
      });
    },
    get C60() {
      return C60 = dart.const({
        __proto__: geometry.Alignment.prototype,
        [Alignment_y]: 1,
        [Alignment_x]: 1
      });
    },
    get C61() {
      return C61 = dart.const({
        __proto__: geometry.Alignment.prototype,
        [Alignment_y]: -1,
        [Alignment_x]: -1
      });
    },
    get C62() {
      return C62 = dart.const({
        __proto__: geometry.Alignment.prototype,
        [Alignment_y]: -1,
        [Alignment_x]: 0
      });
    },
    get C63() {
      return C63 = dart.const({
        __proto__: geometry.Alignment.prototype,
        [Alignment_y]: -1,
        [Alignment_x]: 1
      });
    },
    get C64() {
      return C64 = dart.const({
        __proto__: geometry.FittedSizes.prototype,
        [destination$]: C30 || CT.C30,
        [source$]: C30 || CT.C30
      });
    },
    get C65() {
      return C65 = dart.const({
        __proto__: basic.BoxFit.prototype,
        [_name$2]: "BoxFit.fill",
        index: 0
      });
    },
    get C66() {
      return C66 = dart.const({
        __proto__: basic.BoxFit.prototype,
        [_name$2]: "BoxFit.contain",
        index: 1
      });
    },
    get C67() {
      return C67 = dart.const({
        __proto__: basic.BoxFit.prototype,
        [_name$2]: "BoxFit.fitWidth",
        index: 3
      });
    },
    get C68() {
      return C68 = dart.const({
        __proto__: basic.BoxFit.prototype,
        [_name$2]: "BoxFit.fitHeight",
        index: 4
      });
    },
    get C69() {
      return C69 = dart.const({
        __proto__: basic.BoxFit.prototype,
        [_name$2]: "BoxFit.none",
        index: 5
      });
    },
    get C70() {
      return C70 = dart.const({
        __proto__: basic.BoxFit.prototype,
        [_name$2]: "BoxFit.scaleDown",
        index: 6
      });
    },
    get C71() {
      return C71 = dart.const({
        __proto__: page$.PageOrientation.prototype,
        [_name$4]: "PageOrientation.natural",
        index: 0
      });
    },
    get C72() {
      return C72 = dart.const({
        __proto__: page$.PageOrientation.prototype,
        [_name$4]: "PageOrientation.landscape",
        index: 1
      });
    },
    get C73() {
      return C73 = dart.const({
        __proto__: page$.PageOrientation.prototype,
        [_name$4]: "PageOrientation.portrait",
        index: 2
      });
    },
    get C74() {
      return C74 = dart.constList([C71 || CT.C71, C72 || CT.C72, C73 || CT.C73], PageOrientationL());
    },
    get C75() {
      return C75 = dart.const({
        __proto__: document.PdfPageMode.prototype,
        [_name]: "PdfPageMode.none",
        index: 0
      });
    },
    get C76() {
      return C76 = dart.fn(math.min, TAndTToT());
    },
    get C77() {
      return C77 = dart.fn(math.max, TAndTToT$());
    },
    get C78() {
      return C78 = dart.constList([], WidgetL());
    },
    get C79() {
      return C79 = dart.const({
        __proto__: border_radius.Radius.prototype,
        [y$0]: 0,
        [x$0]: 0
      });
    },
    get C80() {
      return C80 = dart.const({
        __proto__: border_radius.BorderRadius.prototype,
        [bottomRight$]: C79 || CT.C79,
        [bottomLeft$]: C79 || CT.C79,
        [topRight$]: C79 || CT.C79,
        [topLeft$]: C79 || CT.C79
      });
    },
    get C81() {
      return C81 = dart.const({
        __proto__: box_border.BorderStyle.prototype,
        [_name$5]: "BorderStyle.none",
        index: 0
      });
    },
    get C82() {
      return C82 = dart.const({
        __proto__: box_border.BorderStyle.prototype,
        [_name$5]: "BorderStyle.solid",
        index: 1
      });
    },
    get C83() {
      return C83 = dart.const({
        __proto__: box_border.BorderStyle.prototype,
        [_name$5]: "BorderStyle.dashed",
        index: 2
      });
    },
    get C84() {
      return C84 = dart.const({
        __proto__: box_border.BorderStyle.prototype,
        [_name$5]: "BorderStyle.dotted",
        index: 3
      });
    },
    get C85() {
      return C85 = dart.constList([C81 || CT.C81, C82 || CT.C82, C83 || CT.C83, C84 || CT.C84], BorderStyleL());
    },
    get C86() {
      return C86 = dart.constList([3, 3], intL());
    },
    get C87() {
      return C87 = dart.constList([1, 1], intL());
    },
    get C88() {
      return C88 = dart.const({
        __proto__: box_border.BorderSide.prototype,
        [style$1]: C81 || CT.C81,
        [width$]: 0,
        [color$4]: C29 || CT.C29
      });
    },
    get C89() {
      return C89 = dart.constList([C65 || CT.C65, C66 || CT.C66, C23 || CT.C23, C67 || CT.C67, C68 || CT.C68, C69 || CT.C69, C70 || CT.C70], BoxFitL());
    },
    get C90() {
      return C90 = dart.const({
        __proto__: outline.PdfOutlineStyle.prototype,
        [_name$6]: "PdfOutlineStyle.normal",
        index: 0
      });
    }
  }, false);
  var _name$ = dart.privateName(decoration$, "_name");
  var C0;
  var BoxConstraints_maxHeight = dart.privateName(geometry, "BoxConstraints.maxHeight");
  var BoxConstraints_minHeight = dart.privateName(geometry, "BoxConstraints.minHeight");
  var BoxConstraints_maxWidth = dart.privateName(geometry, "BoxConstraints.maxWidth");
  var BoxConstraints_minWidth = dart.privateName(geometry, "BoxConstraints.minWidth");
  var C1;
  var box = dart.privateName(widget$, "Widget.box");
  widget$.Widget = class Widget extends core.Object {
    get box() {
      return this[box];
    }
    set box(value) {
      this[box] = value;
    }
    static draw(widget, opts) {
      let t0, t0$;
      let page = opts && 'page' in opts ? opts.page : null;
      let canvas = opts && 'canvas' in opts ? opts.canvas : null;
      let constraints = opts && 'constraints' in opts ? opts.constraints : null;
      let offset = opts && 'offset' in opts ? opts.offset : null;
      let alignment = opts && 'alignment' in opts ? opts.alignment : null;
      let context = opts && 'context' in opts ? opts.context : null;
      if (!(offset != null)) dart.assertFailed(null, L1, 127, 12, "offset != null");
      context == null ? context = widget$.Context.new({document: (t0 = page, t0 == null ? null : t0.pdfDocument), page: page, canvas: canvas}).inheritFromAll(JSArrayOfInheritedL().of([theme$.ThemeData.base()])) : null;
      widget.layout(context, (t0$ = constraints, t0$ == null ? C1 || CT.C1 : t0$));
      if (!(widget.box != null)) dart.assertFailed(null, L1, 142, 12, "widget.box != null");
      if (alignment != null) {
        let d = alignment.withinRect(widget.box);
        offset = new point$.PdfPoint.new(dart.notNull(offset.x) - dart.notNull(d.x), dart.notNull(offset.y) - dart.notNull(d.y));
      }
      widget.box = rect$.PdfRect.fromPoints(offset, widget.box.size);
      widget.paint(context);
    }
    static measure(widget, opts) {
      let t0, t0$;
      let page = opts && 'page' in opts ? opts.page : null;
      let canvas = opts && 'canvas' in opts ? opts.canvas : null;
      let constraints = opts && 'constraints' in opts ? opts.constraints : null;
      let context = opts && 'context' in opts ? opts.context : null;
      context == null ? context = widget$.Context.new({document: (t0 = page, t0 == null ? null : t0.pdfDocument), page: page, canvas: canvas}).inheritFromAll(JSArrayOfInheritedL().of([theme$.ThemeData.base()])) : null;
      widget.layout(context, (t0$ = constraints, t0$ == null ? C1 || CT.C1 : t0$));
      if (!(widget.box != null)) dart.assertFailed(null, L1, 175, 12, "widget.box != null");
      return widget.box.size;
    }
    paint(context) {
      if (!dart.test(dart.fn(() => {
        if (dart.test(document$.Document.debug)) {
          this.debugPaint(context);
        }
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L1, 188, 12, "() {\n      if (Document.debug) {\n        debugPaint(context);\n      }\n      return true;\n    }()");
    }
    debugPaint(context) {
      let t0;
      t0 = context.canvas;
      (() => {
        t0.setStrokeColor(colors.PdfColors.purple);
        t0.setLineWidth(1.0);
        t0.drawBox(this.box);
        t0.strokePath();
        return t0;
      })();
    }
  };
  (widget$.Widget.new = function() {
    this[box] = null;
    ;
  }).prototype = widget$.Widget.prototype;
  dart.addTypeTests(widget$.Widget);
  dart.addTypeCaches(widget$.Widget);
  dart.setMethodSignature(widget$.Widget, () => ({
    __proto__: dart.getMethods(widget$.Widget.__proto__),
    paint: dart.fnType(dart.void, [dart.legacy(widget$.Context)]),
    debugPaint: dart.fnType(dart.void, [dart.legacy(widget$.Context)])
  }));
  dart.setLibraryUri(widget$.Widget, L2);
  dart.setFieldSignature(widget$.Widget, () => ({
    __proto__: dart.getFields(widget$.Widget.__proto__),
    box: dart.fieldType(dart.legacy(rect$.PdfRect))
  }));
  var child$ = dart.privateName(widget$, "SingleChildWidget.child");
  widget$.SingleChildWidget = class SingleChildWidget extends widget$.Widget {
    get child() {
      return this[child$];
    }
    set child(value) {
      super.child = value;
    }
    layout(context, constraints, opts) {
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      if (this.child != null) {
        this.child.layout(context, constraints, {parentUsesSize: parentUsesSize});
        if (!(this.child.box != null)) dart.assertFailed(null, L1, 254, 14, "child.box != null");
        this.box = this.child.box;
      } else {
        this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, constraints.smallest);
      }
    }
    paintChild(context) {
      let t0;
      if (this.child != null) {
        let mat = vector_math_64.Matrix4.identity();
        mat.translate(this.box.x, this.box.y);
        t0 = context.canvas;
        (() => {
          t0.saveContext();
          t0.setTransform(mat);
          return t0;
        })();
        this.child.paint(context);
        context.canvas.restoreContext();
      }
    }
  };
  (widget$.SingleChildWidget.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    this[child$] = child;
    widget$.SingleChildWidget.__proto__.new.call(this);
    ;
  }).prototype = widget$.SingleChildWidget.prototype;
  dart.addTypeTests(widget$.SingleChildWidget);
  dart.addTypeCaches(widget$.SingleChildWidget);
  dart.setMethodSignature(widget$.SingleChildWidget, () => ({
    __proto__: dart.getMethods(widget$.SingleChildWidget.__proto__),
    layout: dart.fnType(dart.void, [dart.legacy(widget$.Context), dart.legacy(geometry.BoxConstraints)], {parentUsesSize: dart.legacy(core.bool)}, {}),
    paintChild: dart.fnType(dart.void, [dart.legacy(widget$.Context)])
  }));
  dart.setLibraryUri(widget$.SingleChildWidget, L2);
  dart.setFieldSignature(widget$.SingleChildWidget, () => ({
    __proto__: dart.getFields(widget$.SingleChildWidget.__proto__),
    child: dart.finalFieldType(dart.legacy(widget$.Widget))
  }));
  var decoration$0 = dart.privateName(container, "DecoratedBox.decoration");
  var position$ = dart.privateName(container, "DecoratedBox.position");
  container.DecoratedBox = class DecoratedBox extends widget$.SingleChildWidget {
    get decoration() {
      return this[decoration$0];
    }
    set decoration(value) {
      super.decoration = value;
    }
    get position() {
      return this[position$];
    }
    set position(value) {
      super.position = value;
    }
    paint(context) {
      super.paint(context);
      if (this.position == decoration$.DecorationPosition.background) {
        this.decoration.paint(context, this.box);
      }
      this.paintChild(context);
      if (this.position == decoration$.DecorationPosition.foreground) {
        this.decoration.paint(context, this.box);
      }
    }
  };
  (container.DecoratedBox.new = function(opts) {
    let decoration = opts && 'decoration' in opts ? opts.decoration : null;
    let position = opts && 'position' in opts ? opts.position : C0 || CT.C0;
    let child = opts && 'child' in opts ? opts.child : null;
    this[decoration$0] = decoration;
    this[position$] = position;
    if (!(decoration != null)) dart.assertFailed(null, L0, 31, 16, "decoration != null");
    if (!(position != null)) dart.assertFailed(null, L0, 32, 16, "position != null");
    container.DecoratedBox.__proto__.new.call(this, {child: child});
    ;
  }).prototype = container.DecoratedBox.prototype;
  dart.addTypeTests(container.DecoratedBox);
  dart.addTypeCaches(container.DecoratedBox);
  dart.setLibraryUri(container.DecoratedBox, L3);
  dart.setFieldSignature(container.DecoratedBox, () => ({
    __proto__: dart.getFields(container.DecoratedBox.__proto__),
    decoration: dart.finalFieldType(dart.legacy(decoration$.BoxDecoration)),
    position: dart.finalFieldType(dart.legacy(decoration$.DecorationPosition))
  }));
  var C2;
  var _child = dart.privateName(widget$, "_child");
  widget$.StatelessWidget = class StatelessWidget extends widget$.Widget {
    layout(context, constraints, opts) {
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      this[_child] == null ? this[_child] = this.build(context) : null;
      if (this[_child] != null) {
        this[_child].layout(context, constraints, {parentUsesSize: parentUsesSize});
        if (!(this[_child].box != null)) dart.assertFailed(null, L1, 218, 14, "_child.box != null");
        this.box = this[_child].box;
      } else {
        this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, constraints.smallest);
      }
    }
    paint(context) {
      let t0;
      super.paint(context);
      if (this[_child] != null) {
        let mat = vector_math_64.Matrix4.identity();
        mat.translate(this.box.x, this.box.y);
        t0 = context.canvas;
        (() => {
          t0.saveContext();
          t0.setTransform(mat);
          return t0;
        })();
        this[_child].paint(context);
        context.canvas.restoreContext();
      }
    }
  };
  (widget$.StatelessWidget.new = function() {
    this[_child] = null;
    widget$.StatelessWidget.__proto__.new.call(this);
    ;
  }).prototype = widget$.StatelessWidget.prototype;
  dart.addTypeTests(widget$.StatelessWidget);
  dart.addTypeCaches(widget$.StatelessWidget);
  dart.setMethodSignature(widget$.StatelessWidget, () => ({
    __proto__: dart.getMethods(widget$.StatelessWidget.__proto__),
    layout: dart.fnType(dart.void, [dart.legacy(widget$.Context), dart.legacy(geometry.BoxConstraints)], {parentUsesSize: dart.legacy(core.bool)}, {})
  }));
  dart.setLibraryUri(widget$.StatelessWidget, L2);
  dart.setFieldSignature(widget$.StatelessWidget, () => ({
    __proto__: dart.getFields(widget$.StatelessWidget.__proto__),
    [_child]: dart.fieldType(dart.legacy(widget$.Widget))
  }));
  var child$0 = dart.privateName(container, "Container.child");
  var alignment$ = dart.privateName(container, "Container.alignment");
  var padding$ = dart.privateName(container, "Container.padding");
  var decoration$1 = dart.privateName(container, "Container.decoration");
  var foregroundDecoration$ = dart.privateName(container, "Container.foregroundDecoration");
  var constraints$ = dart.privateName(container, "Container.constraints");
  var margin$ = dart.privateName(container, "Container.margin");
  var transform$ = dart.privateName(container, "Container.transform");
  container.Container = class Container extends widget$.StatelessWidget {
    get child() {
      return this[child$0];
    }
    set child(value) {
      super.child = value;
    }
    get alignment() {
      return this[alignment$];
    }
    set alignment(value) {
      super.alignment = value;
    }
    get padding() {
      return this[padding$];
    }
    set padding(value) {
      super.padding = value;
    }
    get decoration() {
      return this[decoration$1];
    }
    set decoration(value) {
      super.decoration = value;
    }
    get foregroundDecoration() {
      return this[foregroundDecoration$];
    }
    set foregroundDecoration(value) {
      super.foregroundDecoration = value;
    }
    get constraints() {
      return this[constraints$];
    }
    set constraints(value) {
      super.constraints = value;
    }
    get margin() {
      return this[margin$];
    }
    set margin(value) {
      super.margin = value;
    }
    get transform() {
      return this[transform$];
    }
    set transform(value) {
      super.transform = value;
    }
    build(context) {
      let current = this.child;
      if (this.child == null && (this.constraints == null || !dart.test(this.constraints.isTight))) {
        current = new basic.LimitedBox.new({maxWidth: 0.0, maxHeight: 0.0, child: new basic.ConstrainedBox.new({constraints: C2 || CT.C2})});
      }
      if (this.alignment != null) {
        current = new basic.Align.new({alignment: this.alignment, child: current});
      }
      if (this.padding != null) {
        current = new basic.Padding.new({padding: this.padding, child: current});
      }
      if (this.decoration != null) {
        current = new container.DecoratedBox.new({decoration: this.decoration, child: current});
      }
      if (this.foregroundDecoration != null) {
        current = new container.DecoratedBox.new({decoration: this.foregroundDecoration, position: decoration$.DecorationPosition.foreground, child: current});
      }
      if (this.constraints != null) {
        current = new basic.ConstrainedBox.new({constraints: this.constraints, child: current});
      }
      if (this.margin != null) {
        current = new basic.Padding.new({padding: this.margin, child: current});
      }
      if (this.transform != null) {
        current = new basic.Transform.new({transform: this.transform, child: current});
      }
      return current;
    }
  };
  (container.Container.new = function(opts) {
    let t0, t0$, t0$0;
    let alignment = opts && 'alignment' in opts ? opts.alignment : null;
    let padding = opts && 'padding' in opts ? opts.padding : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let decoration = opts && 'decoration' in opts ? opts.decoration : null;
    let foregroundDecoration = opts && 'foregroundDecoration' in opts ? opts.foregroundDecoration : null;
    let width = opts && 'width' in opts ? opts.width : null;
    let height = opts && 'height' in opts ? opts.height : null;
    let constraints = opts && 'constraints' in opts ? opts.constraints : null;
    let margin = opts && 'margin' in opts ? opts.margin : null;
    let transform = opts && 'transform' in opts ? opts.transform : null;
    let child = opts && 'child' in opts ? opts.child : null;
    this[alignment$] = alignment;
    this[padding$] = padding;
    this[foregroundDecoration$] = foregroundDecoration;
    this[margin$] = margin;
    this[transform$] = transform;
    this[child$0] = child;
    if (!(color == null || decoration == null)) dart.assertFailed("Cannot provide both a color and a decoration\n" + "The color argument is just a shorthand for \"decoration: new BoxDecoration(color: color)\".", L0, 68, 13, "color == null || decoration == null");
    this[decoration$1] = (t0 = decoration, t0 == null ? color != null ? new decoration$.BoxDecoration.new({color: color}) : null : t0);
    this[constraints$] = width != null || height != null ? (t0$0 = (t0$ = constraints, t0$ == null ? null : t0$.tighten({width: width, height: height})), t0$0 == null ? new geometry.BoxConstraints.tightFor({width: width, height: height}) : t0$0) : constraints;
    container.Container.__proto__.new.call(this);
    ;
  }).prototype = container.Container.prototype;
  dart.addTypeTests(container.Container);
  dart.addTypeCaches(container.Container);
  dart.setMethodSignature(container.Container, () => ({
    __proto__: dart.getMethods(container.Container.__proto__),
    build: dart.fnType(dart.legacy(widget$.Widget), [dart.legacy(widget$.Context)])
  }));
  dart.setLibraryUri(container.Container, L3);
  dart.setFieldSignature(container.Container, () => ({
    __proto__: dart.getFields(container.Container.__proto__),
    child: dart.finalFieldType(dart.legacy(widget$.Widget)),
    alignment: dart.finalFieldType(dart.legacy(geometry.Alignment)),
    padding: dart.finalFieldType(dart.legacy(geometry.EdgeInsets)),
    decoration: dart.finalFieldType(dart.legacy(decoration$.BoxDecoration)),
    foregroundDecoration: dart.finalFieldType(dart.legacy(decoration$.BoxDecoration)),
    constraints: dart.finalFieldType(dart.legacy(geometry.BoxConstraints)),
    margin: dart.finalFieldType(dart.legacy(geometry.EdgeInsets)),
    transform: dart.finalFieldType(dart.legacy(vector_math_64.Matrix4))
  }));
  var codePoint$ = dart.privateName(icon$, "IconData.codePoint");
  var matchTextDirection$ = dart.privateName(icon$, "IconData.matchTextDirection");
  icon$.IconData = class IconData extends core.Object {
    get codePoint() {
      return this[codePoint$];
    }
    set codePoint(value) {
      super.codePoint = value;
    }
    get matchTextDirection() {
      return this[matchTextDirection$];
    }
    set matchTextDirection(value) {
      super.matchTextDirection = value;
    }
  };
  (icon$.IconData.new = function(codePoint, opts) {
    let matchTextDirection = opts && 'matchTextDirection' in opts ? opts.matchTextDirection : false;
    this[codePoint$] = codePoint;
    this[matchTextDirection$] = matchTextDirection;
    ;
  }).prototype = icon$.IconData.prototype;
  dart.addTypeTests(icon$.IconData);
  dart.addTypeCaches(icon$.IconData);
  dart.setLibraryUri(icon$.IconData, L4);
  dart.setFieldSignature(icon$.IconData, () => ({
    __proto__: dart.getFields(icon$.IconData.__proto__),
    codePoint: dart.finalFieldType(dart.legacy(core.int)),
    matchTextDirection: dart.finalFieldType(dart.legacy(core.bool))
  }));
  var color$ = dart.privateName(icon$, "IconThemeData.color");
  var opacity$ = dart.privateName(icon$, "IconThemeData.opacity");
  var size$ = dart.privateName(icon$, "IconThemeData.size");
  var font$0 = dart.privateName(icon$, "IconThemeData.font");
  icon$.IconThemeData = class IconThemeData extends core.Object {
    get color() {
      return this[color$];
    }
    set color(value) {
      super.color = value;
    }
    get opacity() {
      return this[opacity$];
    }
    set opacity(value) {
      super.opacity = value;
    }
    get size() {
      return this[size$];
    }
    set size(value) {
      super.size = value;
    }
    get font() {
      return this[font$0];
    }
    set font(value) {
      super.font = value;
    }
    copyWith(opts) {
      let t0, t0$, t0$0, t0$1;
      let color = opts && 'color' in opts ? opts.color : null;
      let opacity = opts && 'opacity' in opts ? opts.opacity : null;
      let size = opts && 'size' in opts ? opts.size : null;
      let font = opts && 'font' in opts ? opts.font : null;
      return new icon$.IconThemeData.new({color: (t0 = color, t0 == null ? this.color : t0), opacity: (t0$ = opacity, t0$ == null ? this.opacity : t0$), size: (t0$0 = size, t0$0 == null ? this.size : t0$0), font: (t0$1 = font, t0$1 == null ? this.font : t0$1)});
    }
  };
  (icon$.IconThemeData.new = function(opts) {
    let color = opts && 'color' in opts ? opts.color : null;
    let opacity = opts && 'opacity' in opts ? opts.opacity : null;
    let size = opts && 'size' in opts ? opts.size : null;
    let font = opts && 'font' in opts ? opts.font : null;
    this[color$] = color;
    this[opacity$] = opacity;
    this[size$] = size;
    this[font$0] = font;
    ;
  }).prototype = icon$.IconThemeData.prototype;
  (icon$.IconThemeData.fallback = function(font) {
    this[font$0] = font;
    this[color$] = colors.PdfColors.black;
    this[opacity$] = 1.0;
    this[size$] = 24.0;
    ;
  }).prototype = icon$.IconThemeData.prototype;
  dart.addTypeTests(icon$.IconThemeData);
  dart.addTypeCaches(icon$.IconThemeData);
  dart.setMethodSignature(icon$.IconThemeData, () => ({
    __proto__: dart.getMethods(icon$.IconThemeData.__proto__),
    copyWith: dart.fnType(dart.legacy(icon$.IconThemeData), [], {color: dart.legacy(color.PdfColor), font: dart.legacy(font$.Font), opacity: dart.legacy(core.double), size: dart.legacy(core.double)}, {})
  }));
  dart.setLibraryUri(icon$.IconThemeData, L4);
  dart.setFieldSignature(icon$.IconThemeData, () => ({
    __proto__: dart.getFields(icon$.IconThemeData.__proto__),
    color: dart.finalFieldType(dart.legacy(color.PdfColor)),
    opacity: dart.finalFieldType(dart.legacy(core.double)),
    size: dart.finalFieldType(dart.legacy(core.double)),
    font: dart.finalFieldType(dart.legacy(font$.Font))
  }));
  var _name$0 = dart.privateName(text$, "_name");
  var C3;
  var C4;
  var icon$0 = dart.privateName(icon$, "Icon.icon");
  var size$0 = dart.privateName(icon$, "Icon.size");
  var color$0 = dart.privateName(icon$, "Icon.color");
  var textDirection$ = dart.privateName(icon$, "Icon.textDirection");
  var font$1 = dart.privateName(icon$, "Icon.font");
  icon$.Icon = class Icon extends widget$.StatelessWidget {
    get icon() {
      return this[icon$0];
    }
    set icon(value) {
      super.icon = value;
    }
    get size() {
      return this[size$0];
    }
    set size(value) {
      super.size = value;
    }
    get color() {
      return this[color$0];
    }
    set color(value) {
      super.color = value;
    }
    get textDirection() {
      return this[textDirection$];
    }
    set textDirection(value) {
      super.textDirection = value;
    }
    get font() {
      return this[font$1];
    }
    set font(value) {
      super.font = value;
    }
    build(context) {
      let t0, t0$, t0$0, t0$1, t0$2;
      let textDirection = (t0 = this.textDirection, t0 == null ? text_style.Directionality.of(context) : t0);
      let iconTheme = theme$.Theme.of(context).iconTheme;
      let iconSize = (t0$ = this.size, t0$ == null ? iconTheme.size : t0$);
      let iconColor = (t0$0 = this.color, t0$0 == null ? iconTheme.color : t0$0);
      let iconOpacity = iconColor.alpha;
      let iconFont = (t0$1 = this.font, t0$1 == null ? iconTheme.font : t0$1);
      let iconWidget = new text$.RichText.new({textDirection: textDirection, text: new text$.TextSpan.new({text: core.String.fromCharCode(this.icon.codePoint), style: text_style.TextStyle.defaultStyle().copyWith({color: iconColor, fontSize: iconSize, fontNormal: iconFont})})});
      if (dart.test(this.icon.matchTextDirection)) {
        switch (textDirection) {
          case C3 || CT.C3:
          {
            iconWidget = new basic.Transform.new({transform: (t0$2 = vector_math_64.Matrix4.identity(), (() => {
                t0$2.scale(-1.0, 1.0, 1.0);
                return t0$2;
              })()), alignment: geometry.Alignment.center, child: iconWidget});
            break;
          }
          case C4 || CT.C4:
          {
            break;
          }
        }
      }
      if (dart.notNull(iconOpacity) < 1.0) {
        iconWidget = new basic.Opacity.new({opacity: iconOpacity, child: iconWidget});
      }
      return iconWidget;
    }
  };
  (icon$.Icon.new = function(icon, opts) {
    let size = opts && 'size' in opts ? opts.size : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    let font = opts && 'font' in opts ? opts.font : null;
    this[icon$0] = icon;
    this[size$0] = size;
    this[color$0] = color;
    this[textDirection$] = textDirection;
    this[font$1] = font;
    if (!(icon != null)) dart.assertFailed(null, L5, 93, 16, "icon != null");
    icon$.Icon.__proto__.new.call(this);
    ;
  }).prototype = icon$.Icon.prototype;
  dart.addTypeTests(icon$.Icon);
  dart.addTypeCaches(icon$.Icon);
  dart.setMethodSignature(icon$.Icon, () => ({
    __proto__: dart.getMethods(icon$.Icon.__proto__),
    build: dart.fnType(dart.legacy(widget$.Widget), [dart.legacy(widget$.Context)])
  }));
  dart.setLibraryUri(icon$.Icon, L4);
  dart.setFieldSignature(icon$.Icon, () => ({
    __proto__: dart.getFields(icon$.Icon.__proto__),
    icon: dart.finalFieldType(dart.legacy(icon$.IconData)),
    size: dart.finalFieldType(dart.legacy(core.double)),
    color: dart.finalFieldType(dart.legacy(color.PdfColor)),
    textDirection: dart.finalFieldType(dart.legacy(text$.TextDirection)),
    font: dart.finalFieldType(dart.legacy(font$.Font))
  }));
  widget$.Inherited = class Inherited extends core.Object {};
  (widget$.Inherited.new = function() {
    ;
  }).prototype = widget$.Inherited.prototype;
  dart.addTypeTests(widget$.Inherited);
  dart.addTypeCaches(widget$.Inherited);
  dart.setLibraryUri(widget$.Inherited, L2);
  var defaultTextStyle$ = dart.privateName(theme$, "ThemeData.defaultTextStyle");
  var paragraphStyle$ = dart.privateName(theme$, "ThemeData.paragraphStyle");
  var header0$ = dart.privateName(theme$, "ThemeData.header0");
  var header1$ = dart.privateName(theme$, "ThemeData.header1");
  var header2$ = dart.privateName(theme$, "ThemeData.header2");
  var header3$ = dart.privateName(theme$, "ThemeData.header3");
  var header4$ = dart.privateName(theme$, "ThemeData.header4");
  var header5$ = dart.privateName(theme$, "ThemeData.header5");
  var bulletStyle$ = dart.privateName(theme$, "ThemeData.bulletStyle");
  var tableHeader$ = dart.privateName(theme$, "ThemeData.tableHeader");
  var tableCell$ = dart.privateName(theme$, "ThemeData.tableCell");
  var textAlign$ = dart.privateName(theme$, "ThemeData.textAlign");
  var softWrap$ = dart.privateName(theme$, "ThemeData.softWrap");
  var maxLines$ = dart.privateName(theme$, "ThemeData.maxLines");
  var iconTheme$ = dart.privateName(theme$, "ThemeData.iconTheme");
  theme$.ThemeData = class ThemeData extends widget$.Inherited {
    get defaultTextStyle() {
      return this[defaultTextStyle$];
    }
    set defaultTextStyle(value) {
      super.defaultTextStyle = value;
    }
    get paragraphStyle() {
      return this[paragraphStyle$];
    }
    set paragraphStyle(value) {
      super.paragraphStyle = value;
    }
    get header0() {
      return this[header0$];
    }
    set header0(value) {
      super.header0 = value;
    }
    get header1() {
      return this[header1$];
    }
    set header1(value) {
      super.header1 = value;
    }
    get header2() {
      return this[header2$];
    }
    set header2(value) {
      super.header2 = value;
    }
    get header3() {
      return this[header3$];
    }
    set header3(value) {
      super.header3 = value;
    }
    get header4() {
      return this[header4$];
    }
    set header4(value) {
      super.header4 = value;
    }
    get header5() {
      return this[header5$];
    }
    set header5(value) {
      super.header5 = value;
    }
    get bulletStyle() {
      return this[bulletStyle$];
    }
    set bulletStyle(value) {
      super.bulletStyle = value;
    }
    get tableHeader() {
      return this[tableHeader$];
    }
    set tableHeader(value) {
      super.tableHeader = value;
    }
    get tableCell() {
      return this[tableCell$];
    }
    set tableCell(value) {
      super.tableCell = value;
    }
    get textAlign() {
      return this[textAlign$];
    }
    set textAlign(value) {
      super.textAlign = value;
    }
    get softWrap() {
      return this[softWrap$];
    }
    set softWrap(value) {
      super.softWrap = value;
    }
    get maxLines() {
      return this[maxLines$];
    }
    set maxLines(value) {
      super.maxLines = value;
    }
    get iconTheme() {
      return this[iconTheme$];
    }
    set iconTheme(value) {
      super.iconTheme = value;
    }
    static new(opts) {
      let defaultTextStyle = opts && 'defaultTextStyle' in opts ? opts.defaultTextStyle : null;
      let paragraphStyle = opts && 'paragraphStyle' in opts ? opts.paragraphStyle : null;
      let header0 = opts && 'header0' in opts ? opts.header0 : null;
      let header1 = opts && 'header1' in opts ? opts.header1 : null;
      let header2 = opts && 'header2' in opts ? opts.header2 : null;
      let header3 = opts && 'header3' in opts ? opts.header3 : null;
      let header4 = opts && 'header4' in opts ? opts.header4 : null;
      let header5 = opts && 'header5' in opts ? opts.header5 : null;
      let bulletStyle = opts && 'bulletStyle' in opts ? opts.bulletStyle : null;
      let tableHeader = opts && 'tableHeader' in opts ? opts.tableHeader : null;
      let tableCell = opts && 'tableCell' in opts ? opts.tableCell : null;
      let softWrap = opts && 'softWrap' in opts ? opts.softWrap : null;
      let textAlign = opts && 'textAlign' in opts ? opts.textAlign : null;
      let maxLines = opts && 'maxLines' in opts ? opts.maxLines : null;
      let iconTheme = opts && 'iconTheme' in opts ? opts.iconTheme : null;
      let base = theme$.ThemeData.base();
      return base.copyWith({defaultTextStyle: defaultTextStyle, paragraphStyle: paragraphStyle, bulletStyle: bulletStyle, header0: header0, header1: header1, header2: header2, header3: header3, header4: header4, header5: header5, tableHeader: tableHeader, tableCell: tableCell, softWrap: softWrap, textAlign: textAlign, maxLines: maxLines, iconTheme: iconTheme});
    }
    static withFont(opts) {
      let base = opts && 'base' in opts ? opts.base : null;
      let bold = opts && 'bold' in opts ? opts.bold : null;
      let italic = opts && 'italic' in opts ? opts.italic : null;
      let boldItalic = opts && 'boldItalic' in opts ? opts.boldItalic : null;
      let icons = opts && 'icons' in opts ? opts.icons : null;
      let defaultStyle = text_style.TextStyle.defaultStyle().copyWith({font: base, fontNormal: base, fontBold: bold, fontItalic: italic, fontBoldItalic: boldItalic});
      let fontSize = defaultStyle.fontSize;
      return new theme$.ThemeData.__({defaultTextStyle: defaultStyle, paragraphStyle: defaultStyle.copyWith({lineSpacing: 5.0}), bulletStyle: defaultStyle.copyWith({lineSpacing: 5.0}), header0: defaultStyle.copyWith({fontSize: dart.notNull(fontSize) * 2.0}), header1: defaultStyle.copyWith({fontSize: dart.notNull(fontSize) * 1.5}), header2: defaultStyle.copyWith({fontSize: dart.notNull(fontSize) * 1.4}), header3: defaultStyle.copyWith({fontSize: dart.notNull(fontSize) * 1.3}), header4: defaultStyle.copyWith({fontSize: dart.notNull(fontSize) * 1.2}), header5: defaultStyle.copyWith({fontSize: dart.notNull(fontSize) * 1.1}), tableHeader: defaultStyle.copyWith({fontSize: dart.notNull(fontSize) * 0.8, fontWeight: text_style.FontWeight.bold}), tableCell: defaultStyle.copyWith({fontSize: dart.notNull(fontSize) * 0.8}), softWrap: true, textAlign: text$.TextAlign.left, iconTheme: new icon$.IconThemeData.fallback(icons)});
    }
    static base() {
      return theme$.ThemeData.withFont();
    }
    copyWith(opts) {
      let t0, t0$, t0$0, t0$1;
      let defaultTextStyle = opts && 'defaultTextStyle' in opts ? opts.defaultTextStyle : null;
      let paragraphStyle = opts && 'paragraphStyle' in opts ? opts.paragraphStyle : null;
      let header0 = opts && 'header0' in opts ? opts.header0 : null;
      let header1 = opts && 'header1' in opts ? opts.header1 : null;
      let header2 = opts && 'header2' in opts ? opts.header2 : null;
      let header3 = opts && 'header3' in opts ? opts.header3 : null;
      let header4 = opts && 'header4' in opts ? opts.header4 : null;
      let header5 = opts && 'header5' in opts ? opts.header5 : null;
      let bulletStyle = opts && 'bulletStyle' in opts ? opts.bulletStyle : null;
      let tableHeader = opts && 'tableHeader' in opts ? opts.tableHeader : null;
      let tableCell = opts && 'tableCell' in opts ? opts.tableCell : null;
      let softWrap = opts && 'softWrap' in opts ? opts.softWrap : null;
      let textAlign = opts && 'textAlign' in opts ? opts.textAlign : null;
      let maxLines = opts && 'maxLines' in opts ? opts.maxLines : null;
      let iconTheme = opts && 'iconTheme' in opts ? opts.iconTheme : null;
      return new theme$.ThemeData.__({defaultTextStyle: this.defaultTextStyle.merge(defaultTextStyle), paragraphStyle: this.paragraphStyle.merge(paragraphStyle), bulletStyle: this.bulletStyle.merge(bulletStyle), header0: this.header0.merge(header0), header1: this.header1.merge(header1), header2: this.header2.merge(header2), header3: this.header3.merge(header3), header4: this.header4.merge(header4), header5: this.header5.merge(header5), tableHeader: this.tableHeader.merge(tableHeader), tableCell: this.tableCell.merge(tableCell), softWrap: (t0 = softWrap, t0 == null ? this.softWrap : t0), textAlign: (t0$ = textAlign, t0$ == null ? this.textAlign : t0$), maxLines: (t0$0 = maxLines, t0$0 == null ? this.maxLines : t0$0), iconTheme: (t0$1 = iconTheme, t0$1 == null ? this.iconTheme : t0$1)});
    }
  };
  (theme$.ThemeData.__ = function(opts) {
    let defaultTextStyle = opts && 'defaultTextStyle' in opts ? opts.defaultTextStyle : null;
    let paragraphStyle = opts && 'paragraphStyle' in opts ? opts.paragraphStyle : null;
    let header0 = opts && 'header0' in opts ? opts.header0 : null;
    let header1 = opts && 'header1' in opts ? opts.header1 : null;
    let header2 = opts && 'header2' in opts ? opts.header2 : null;
    let header3 = opts && 'header3' in opts ? opts.header3 : null;
    let header4 = opts && 'header4' in opts ? opts.header4 : null;
    let header5 = opts && 'header5' in opts ? opts.header5 : null;
    let bulletStyle = opts && 'bulletStyle' in opts ? opts.bulletStyle : null;
    let tableHeader = opts && 'tableHeader' in opts ? opts.tableHeader : null;
    let tableCell = opts && 'tableCell' in opts ? opts.tableCell : null;
    let softWrap = opts && 'softWrap' in opts ? opts.softWrap : null;
    let textAlign = opts && 'textAlign' in opts ? opts.textAlign : null;
    let iconTheme = opts && 'iconTheme' in opts ? opts.iconTheme : null;
    let maxLines = opts && 'maxLines' in opts ? opts.maxLines : null;
    this[defaultTextStyle$] = defaultTextStyle;
    this[paragraphStyle$] = paragraphStyle;
    this[header0$] = header0;
    this[header1$] = header1;
    this[header2$] = header2;
    this[header3$] = header3;
    this[header4$] = header4;
    this[header5$] = header5;
    this[bulletStyle$] = bulletStyle;
    this[tableHeader$] = tableHeader;
    this[tableCell$] = tableCell;
    this[softWrap$] = softWrap;
    this[textAlign$] = textAlign;
    this[iconTheme$] = iconTheme;
    this[maxLines$] = maxLines;
    if (!dart.equals(defaultTextStyle.inherit, false)) dart.assertFailed(null, L6, 81, 16, "defaultTextStyle.inherit == false");
    if (!dart.equals(paragraphStyle.inherit, false)) dart.assertFailed(null, L6, 82, 16, "paragraphStyle.inherit == false");
    if (!dart.equals(header0.inherit, false)) dart.assertFailed(null, L6, 83, 16, "header0.inherit == false");
    if (!dart.equals(header1.inherit, false)) dart.assertFailed(null, L6, 84, 16, "header1.inherit == false");
    if (!dart.equals(header2.inherit, false)) dart.assertFailed(null, L6, 85, 16, "header2.inherit == false");
    if (!dart.equals(header3.inherit, false)) dart.assertFailed(null, L6, 86, 16, "header3.inherit == false");
    if (!dart.equals(header4.inherit, false)) dart.assertFailed(null, L6, 87, 16, "header4.inherit == false");
    if (!dart.equals(header5.inherit, false)) dart.assertFailed(null, L6, 88, 16, "header5.inherit == false");
    if (!dart.equals(bulletStyle.inherit, false)) dart.assertFailed(null, L6, 89, 16, "bulletStyle.inherit == false");
    if (!dart.equals(tableHeader.inherit, false)) dart.assertFailed(null, L6, 90, 16, "tableHeader.inherit == false");
    if (!dart.equals(tableCell.inherit, false)) dart.assertFailed(null, L6, 91, 16, "tableCell.inherit == false");
    if (!(softWrap != null)) dart.assertFailed(null, L6, 92, 16, "softWrap != null");
    if (!(maxLines == null || dart.notNull(maxLines) > 0)) dart.assertFailed(null, L6, 93, 16, "maxLines == null || maxLines > 0");
    if (!(iconTheme != null)) dart.assertFailed(null, L6, 94, 16, "iconTheme != null");
    theme$.ThemeData.__proto__.new.call(this);
    ;
  }).prototype = theme$.ThemeData.prototype;
  dart.addTypeTests(theme$.ThemeData);
  dart.addTypeCaches(theme$.ThemeData);
  dart.setMethodSignature(theme$.ThemeData, () => ({
    __proto__: dart.getMethods(theme$.ThemeData.__proto__),
    copyWith: dart.fnType(dart.legacy(theme$.ThemeData), [], {bulletStyle: dart.legacy(text_style.TextStyle), defaultTextStyle: dart.legacy(text_style.TextStyle), header0: dart.legacy(text_style.TextStyle), header1: dart.legacy(text_style.TextStyle), header2: dart.legacy(text_style.TextStyle), header3: dart.legacy(text_style.TextStyle), header4: dart.legacy(text_style.TextStyle), header5: dart.legacy(text_style.TextStyle), iconTheme: dart.legacy(icon$.IconThemeData), maxLines: dart.legacy(core.int), paragraphStyle: dart.legacy(text_style.TextStyle), softWrap: dart.legacy(core.bool), tableCell: dart.legacy(text_style.TextStyle), tableHeader: dart.legacy(text_style.TextStyle), textAlign: dart.legacy(text$.TextAlign)}, {})
  }));
  dart.setLibraryUri(theme$.ThemeData, L7);
  dart.setFieldSignature(theme$.ThemeData, () => ({
    __proto__: dart.getFields(theme$.ThemeData.__proto__),
    defaultTextStyle: dart.finalFieldType(dart.legacy(text_style.TextStyle)),
    paragraphStyle: dart.finalFieldType(dart.legacy(text_style.TextStyle)),
    header0: dart.finalFieldType(dart.legacy(text_style.TextStyle)),
    header1: dart.finalFieldType(dart.legacy(text_style.TextStyle)),
    header2: dart.finalFieldType(dart.legacy(text_style.TextStyle)),
    header3: dart.finalFieldType(dart.legacy(text_style.TextStyle)),
    header4: dart.finalFieldType(dart.legacy(text_style.TextStyle)),
    header5: dart.finalFieldType(dart.legacy(text_style.TextStyle)),
    bulletStyle: dart.finalFieldType(dart.legacy(text_style.TextStyle)),
    tableHeader: dart.finalFieldType(dart.legacy(text_style.TextStyle)),
    tableCell: dart.finalFieldType(dart.legacy(text_style.TextStyle)),
    textAlign: dart.finalFieldType(dart.legacy(text$.TextAlign)),
    softWrap: dart.finalFieldType(dart.legacy(core.bool)),
    maxLines: dart.finalFieldType(dart.legacy(core.int)),
    iconTheme: dart.finalFieldType(dart.legacy(icon$.IconThemeData))
  }));
  var data$ = dart.privateName(theme$, "Theme.data");
  var child$1 = dart.privateName(theme$, "Theme.child");
  theme$.Theme = class Theme extends widget$.StatelessWidget {
    get data() {
      return this[data$];
    }
    set data(value) {
      super.data = value;
    }
    get child() {
      return this[child$1];
    }
    set child(value) {
      super.child = value;
    }
    static of(context) {
      return ThemeDataL().as(context.inherited[$_get](dart.wrapType(ThemeDataL())));
    }
    build(context) {
      return new widget$.InheritedWidget.new({inherited: this.data, build: dart.fn(context => this.child, ContextLToWidgetL())});
    }
  };
  (theme$.Theme.new = function(opts) {
    let data = opts && 'data' in opts ? opts.data : null;
    let child = opts && 'child' in opts ? opts.child : null;
    this[data$] = data;
    this[child$1] = child;
    if (!(data != null)) dart.assertFailed(null, L6, 196, 16, "data != null");
    if (!(child != null)) dart.assertFailed(null, L6, 197, 16, "child != null");
    theme$.Theme.__proto__.new.call(this);
    ;
  }).prototype = theme$.Theme.prototype;
  dart.addTypeTests(theme$.Theme);
  dart.addTypeCaches(theme$.Theme);
  dart.setMethodSignature(theme$.Theme, () => ({
    __proto__: dart.getMethods(theme$.Theme.__proto__),
    build: dart.fnType(dart.legacy(widget$.Widget), [dart.legacy(widget$.Context)])
  }));
  dart.setLibraryUri(theme$.Theme, L7);
  dart.setFieldSignature(theme$.Theme, () => ({
    __proto__: dart.getFields(theme$.Theme.__proto__),
    data: dart.finalFieldType(dart.legacy(theme$.ThemeData)),
    child: dart.finalFieldType(dart.legacy(widget$.Widget))
  }));
  var style$ = dart.privateName(theme$, "DefaultTextStyle.style");
  var child$2 = dart.privateName(theme$, "DefaultTextStyle.child");
  var textAlign$0 = dart.privateName(theme$, "DefaultTextStyle.textAlign");
  var softWrap$0 = dart.privateName(theme$, "DefaultTextStyle.softWrap");
  var maxLines$0 = dart.privateName(theme$, "DefaultTextStyle.maxLines");
  theme$.DefaultTextStyle = class DefaultTextStyle extends widget$.StatelessWidget {
    get style() {
      return this[style$];
    }
    set style(value) {
      super.style = value;
    }
    get child() {
      return this[child$2];
    }
    set child(value) {
      super.child = value;
    }
    get textAlign() {
      return this[textAlign$0];
    }
    set textAlign(value) {
      super.textAlign = value;
    }
    get softWrap() {
      return this[softWrap$0];
    }
    set softWrap(value) {
      super.softWrap = value;
    }
    get maxLines() {
      return this[maxLines$0];
    }
    set maxLines(value) {
      super.maxLines = value;
    }
    static merge(opts) {
      let style = opts && 'style' in opts ? opts.style : null;
      let textAlign = opts && 'textAlign' in opts ? opts.textAlign : null;
      let softWrap = opts && 'softWrap' in opts ? opts.softWrap : null;
      let maxLines = opts && 'maxLines' in opts ? opts.maxLines : null;
      let child = opts && 'child' in opts ? opts.child : null;
      if (!(child != null)) dart.assertFailed(null, L6, 235, 12, "child != null");
      return new basic.Builder.new({builder: dart.fn(context => {
          let t0, t0$, t0$0;
          let parent = theme$.Theme.of(context);
          return new theme$.DefaultTextStyle.new({style: parent.defaultTextStyle.merge(style), textAlign: (t0 = textAlign, t0 == null ? parent.textAlign : t0), softWrap: (t0$ = softWrap, t0$ == null ? parent.softWrap : t0$), maxLines: (t0$0 = maxLines, t0$0 == null ? parent.maxLines : t0$0), child: child});
        }, ContextLToDefaultTextStyleL())});
    }
    build(context) {
      let theme = theme$.Theme.of(context).copyWith({defaultTextStyle: this.style, textAlign: this.textAlign, softWrap: this.softWrap, maxLines: this.maxLines});
      return new widget$.InheritedWidget.new({inherited: theme, build: dart.fn(context => this.child, ContextLToWidgetL())});
    }
  };
  (theme$.DefaultTextStyle.new = function(opts) {
    let style = opts && 'style' in opts ? opts.style : null;
    let child = opts && 'child' in opts ? opts.child : null;
    let textAlign = opts && 'textAlign' in opts ? opts.textAlign : null;
    let softWrap = opts && 'softWrap' in opts ? opts.softWrap : true;
    let maxLines = opts && 'maxLines' in opts ? opts.maxLines : null;
    this[style$] = style;
    this[child$2] = child;
    this[textAlign$0] = textAlign;
    this[softWrap$0] = softWrap;
    this[maxLines$0] = maxLines;
    if (!(style != null)) dart.assertFailed(null, L6, 223, 16, "style != null");
    if (!(child != null)) dart.assertFailed(null, L6, 224, 16, "child != null");
    if (!(softWrap != null)) dart.assertFailed(null, L6, 225, 16, "softWrap != null");
    if (!(maxLines == null || dart.notNull(maxLines) > 0)) dart.assertFailed(null, L6, 226, 16, "maxLines == null || maxLines > 0");
    theme$.DefaultTextStyle.__proto__.new.call(this);
    ;
  }).prototype = theme$.DefaultTextStyle.prototype;
  dart.addTypeTests(theme$.DefaultTextStyle);
  dart.addTypeCaches(theme$.DefaultTextStyle);
  theme$.DefaultTextStyle[dart.implements] = () => [widget$.Inherited];
  dart.setMethodSignature(theme$.DefaultTextStyle, () => ({
    __proto__: dart.getMethods(theme$.DefaultTextStyle.__proto__),
    build: dart.fnType(dart.legacy(widget$.Widget), [dart.legacy(widget$.Context)])
  }));
  dart.setLibraryUri(theme$.DefaultTextStyle, L7);
  dart.setFieldSignature(theme$.DefaultTextStyle, () => ({
    __proto__: dart.getFields(theme$.DefaultTextStyle.__proto__),
    style: dart.finalFieldType(dart.legacy(text_style.TextStyle)),
    child: dart.finalFieldType(dart.legacy(widget$.Widget)),
    textAlign: dart.finalFieldType(dart.legacy(text$.TextAlign)),
    softWrap: dart.finalFieldType(dart.legacy(core.bool)),
    maxLines: dart.finalFieldType(dart.legacy(core.int))
  }));
  var _name$1 = dart.privateName(font$, "_name");
  var C5;
  var C6;
  var C7;
  var C8;
  var C9;
  var C10;
  var C11;
  var C12;
  var C13;
  var C14;
  var C15;
  var C16;
  var C17;
  var C18;
  var C19;
  font$.Type1Fonts = class Type1Fonts extends core.Object {
    toString() {
      return this[_name$1];
    }
  };
  (font$.Type1Fonts.new = function(index, _name) {
    this.index = index;
    this[_name$1] = _name;
    ;
  }).prototype = font$.Type1Fonts.prototype;
  dart.addTypeTests(font$.Type1Fonts);
  dart.addTypeCaches(font$.Type1Fonts);
  dart.setMethodSignature(font$.Type1Fonts, () => ({
    __proto__: dart.getMethods(font$.Type1Fonts.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(font$.Type1Fonts, L8);
  dart.setFieldSignature(font$.Type1Fonts, () => ({
    __proto__: dart.getFields(font$.Type1Fonts.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$1]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(font$.Type1Fonts, ['toString']);
  font$.Type1Fonts.courier = C5 || CT.C5;
  font$.Type1Fonts.courierBold = C6 || CT.C6;
  font$.Type1Fonts.courierBoldOblique = C7 || CT.C7;
  font$.Type1Fonts.courierOblique = C8 || CT.C8;
  font$.Type1Fonts.helvetica = C9 || CT.C9;
  font$.Type1Fonts.helveticaBold = C10 || CT.C10;
  font$.Type1Fonts.helveticaBoldOblique = C11 || CT.C11;
  font$.Type1Fonts.helveticaOblique = C12 || CT.C12;
  font$.Type1Fonts.times = C13 || CT.C13;
  font$.Type1Fonts.timesBold = C14 || CT.C14;
  font$.Type1Fonts.timesBoldItalic = C15 || CT.C15;
  font$.Type1Fonts.timesItalic = C16 || CT.C16;
  font$.Type1Fonts.symbol = C17 || CT.C17;
  font$.Type1Fonts.zapfDingbats = C18 || CT.C18;
  font$.Type1Fonts.values = C19 || CT.C19;
  var _pdfFont = dart.privateName(font$, "_pdfFont");
  var font$2 = dart.privateName(font$, "Font.font");
  var C20;
  font$.Font = class Font extends core.Object {
    get font() {
      return this[font$2];
    }
    set font(value) {
      super.font = value;
    }
    static courier() {
      return new font$.Font.type1(font$.Type1Fonts.courier);
    }
    static courierBold() {
      return new font$.Font.type1(font$.Type1Fonts.courierBold);
    }
    static courierBoldOblique() {
      return new font$.Font.type1(font$.Type1Fonts.courierBoldOblique);
    }
    static courierOblique() {
      return new font$.Font.type1(font$.Type1Fonts.courierOblique);
    }
    static helvetica() {
      return new font$.Font.type1(font$.Type1Fonts.helvetica);
    }
    static helveticaBold() {
      return new font$.Font.type1(font$.Type1Fonts.helveticaBold);
    }
    static helveticaBoldOblique() {
      return new font$.Font.type1(font$.Type1Fonts.helveticaBoldOblique);
    }
    static helveticaOblique() {
      return new font$.Font.type1(font$.Type1Fonts.helveticaOblique);
    }
    static times() {
      return new font$.Font.type1(font$.Type1Fonts.times);
    }
    static timesBold() {
      return new font$.Font.type1(font$.Type1Fonts.timesBold);
    }
    static timesBoldItalic() {
      return new font$.Font.type1(font$.Type1Fonts.timesBoldItalic);
    }
    static timesItalic() {
      return new font$.Font.type1(font$.Type1Fonts.timesItalic);
    }
    static symbol() {
      return new font$.Font.type1(font$.Type1Fonts.symbol);
    }
    static zapfDingbats() {
      return new font$.Font.type1(font$.Type1Fonts.zapfDingbats);
    }
    static ttf(data) {
      return new font$.TtfFont.new(data);
    }
    get fontName() {
      return font$.Font._type1Map[$_get](this.font);
    }
    buildFont(pdfDocument) {
      let existing = pdfDocument.fonts[$firstWhere](dart.fn(font => font.subtype === "/Type1" && font.fontName == this.fontName, PdfFontLToboolL()), {orElse: dart.fn(() => null, VoidToNull())});
      if (existing != null) {
        return existing;
      }
      switch (this.font) {
        case C5 || CT.C5:
        {
          return font.PdfFont.courier(pdfDocument);
        }
        case C6 || CT.C6:
        {
          return font.PdfFont.courierBold(pdfDocument);
        }
        case C7 || CT.C7:
        {
          return font.PdfFont.courierBoldOblique(pdfDocument);
        }
        case C8 || CT.C8:
        {
          return font.PdfFont.courierOblique(pdfDocument);
        }
        case C9 || CT.C9:
        {
          return font.PdfFont.helvetica(pdfDocument);
        }
        case C10 || CT.C10:
        {
          return font.PdfFont.helveticaBold(pdfDocument);
        }
        case C11 || CT.C11:
        {
          return font.PdfFont.helveticaBoldOblique(pdfDocument);
        }
        case C12 || CT.C12:
        {
          return font.PdfFont.helveticaOblique(pdfDocument);
        }
        case C13 || CT.C13:
        {
          return font.PdfFont.times(pdfDocument);
        }
        case C14 || CT.C14:
        {
          return font.PdfFont.timesBold(pdfDocument);
        }
        case C15 || CT.C15:
        {
          return font.PdfFont.timesBoldItalic(pdfDocument);
        }
        case C16 || CT.C16:
        {
          return font.PdfFont.timesItalic(pdfDocument);
        }
        case C17 || CT.C17:
        {
          return font.PdfFont.symbol(pdfDocument);
        }
        case C18 || CT.C18:
        {
          return font.PdfFont.zapfDingbats(pdfDocument);
        }
      }
      return font.PdfFont.helvetica(pdfDocument);
    }
    getFont(context) {
      if (this[_pdfFont] == null) {
        let pdfDocument = context.document;
        this[_pdfFont] = this.buildFont(pdfDocument);
      }
      if (!dart.equals(this[_pdfFont].pdfDocument, context.document)) dart.assertFailed("Do not reuse a Font object across multiple documents", L9, 139, 12, "_pdfFont.pdfDocument == context.document");
      return this[_pdfFont];
    }
    toString() {
      return "<Type1 Font \"" + dart.str(this.fontName) + "\">";
    }
  };
  (font$.Font.new = function() {
    this[_pdfFont] = null;
    this[font$2] = null;
    ;
  }).prototype = font$.Font.prototype;
  (font$.Font.type1 = function(font) {
    this[_pdfFont] = null;
    this[font$2] = font;
    if (!(font != null)) dart.assertFailed(null, L9, 46, 34, "font != null");
    ;
  }).prototype = font$.Font.prototype;
  dart.addTypeTests(font$.Font);
  dart.addTypeCaches(font$.Font);
  dart.setMethodSignature(font$.Font, () => ({
    __proto__: dart.getMethods(font$.Font.__proto__),
    buildFont: dart.fnType(dart.legacy(font.PdfFont), [dart.legacy(document.PdfDocument)]),
    getFont: dart.fnType(dart.legacy(font.PdfFont), [dart.legacy(widget$.Context)]),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setGetterSignature(font$.Font, () => ({
    __proto__: dart.getGetters(font$.Font.__proto__),
    fontName: dart.legacy(core.String)
  }));
  dart.setLibraryUri(font$.Font, L8);
  dart.setFieldSignature(font$.Font, () => ({
    __proto__: dart.getFields(font$.Font.__proto__),
    font: dart.finalFieldType(dart.legacy(font$.Type1Fonts)),
    [_pdfFont]: dart.fieldType(dart.legacy(font.PdfFont))
  }));
  dart.defineExtensionMethods(font$.Font, ['toString']);
  dart.defineLazy(font$.Font, {
    /*font$.Font._type1Map*/get _type1Map() {
      return C20 || CT.C20;
    }
  }, true);
  var data$0 = dart.privateName(font$, "TtfFont.data");
  var protect$ = dart.privateName(font$, "TtfFont.protect");
  font$.TtfFont = class TtfFont extends font$.Font {
    get data() {
      return this[data$0];
    }
    set data(value) {
      super.data = value;
    }
    get protect() {
      return this[protect$];
    }
    set protect(value) {
      super.protect = value;
    }
    buildFont(pdfDocument) {
      return new ttffont.PdfTtfFont.new(pdfDocument, this.data, {protect: this.protect});
    }
    get fontName() {
      if (this[_pdfFont] != null) {
        return this[_pdfFont].fontName;
      }
      let font = new ttf_parser.TtfParser.new(this.data);
      return font.fontName;
    }
    toString() {
      let font = new ttf_parser.TtfParser.new(this.data);
      return "<TrueType Font \"" + dart.str(font.fontName) + "\">";
    }
  };
  (font$.TtfFont.new = function(data, opts) {
    let protect = opts && 'protect' in opts ? opts.protect : false;
    this[data$0] = data;
    this[protect$] = protect;
    font$.TtfFont.__proto__.new.call(this);
    ;
  }).prototype = font$.TtfFont.prototype;
  dart.addTypeTests(font$.TtfFont);
  dart.addTypeCaches(font$.TtfFont);
  dart.setLibraryUri(font$.TtfFont, L8);
  dart.setFieldSignature(font$.TtfFont, () => ({
    __proto__: dart.getFields(font$.TtfFont.__proto__),
    data: dart.finalFieldType(dart.legacy(typed_data.ByteData)),
    protect: dart.finalFieldType(dart.legacy(core.bool))
  }));
  dart.defineExtensionMethods(font$.TtfFont, ['toString']);
  var _cache = dart.privateName(image_provider, "_cache");
  var _width$ = dart.privateName(image_provider, "_width");
  var _height$ = dart.privateName(image_provider, "_height");
  var dpi$ = dart.privateName(image_provider, "ImageProvider.dpi");
  var orientation$ = dart.privateName(image_provider, "ImageProvider.orientation");
  image_provider.ImageProvider = class ImageProvider extends core.Object {
    get dpi() {
      return this[dpi$];
    }
    set dpi(value) {
      super.dpi = value;
    }
    get orientation() {
      return this[orientation$];
    }
    set orientation(value) {
      super.orientation = value;
    }
    get width() {
      return dart.notNull(this.orientation.index) >= 4 ? this[_height$] : this[_width$];
    }
    get height() {
      return dart.notNull(this.orientation.index) < 4 ? this[_height$] : this[_width$];
    }
    resolve(context, size, opts) {
      let t0, t1, t0$, t1$, t0$0;
      let dpi = opts && 'dpi' in opts ? opts.dpi : null;
      if (!(size != null)) dart.assertFailed(null, L10, 56, 12, "size != null");
      let effectiveDpi = (t0 = dpi, t0 == null ? this.dpi : t0);
      if (effectiveDpi == null || this[_cache][$_get](0) != null) {
        t0$ = this[_cache];
        t1 = 0;
        t0$[$_get](t1) == null ? t0$[$_set](t1, this.buildImage(context)) : null;
        if (!dart.equals(this[_cache][$_get](0).pdfDocument, context.document)) dart.assertFailed("Do not reuse an ImageProvider object across multiple documents", L10, 62, 14, "_cache[0].pdfDocument == context.document");
        return this[_cache][$_get](0);
      }
      let width = (dart.notNull(size.x) / 72 * dart.notNull(effectiveDpi))[$toInt]();
      let height = (dart.notNull(size.y) / 72 * dart.notNull(effectiveDpi))[$toInt]();
      if (!dart.test(this[_cache][$containsKey](width))) {
        t0$0 = this[_cache];
        t1$ = width;
        t0$0[$_get](t1$) == null ? t0$0[$_set](t1$, this.buildImage(context, {width: width, height: height})) : null;
      }
      if (!dart.equals(this[_cache][$_get](width).pdfDocument, context.document)) dart.assertFailed("Do not reuse an ImageProvider object across multiple documents", L10, 74, 12, "_cache[width].pdfDocument == context.document");
      return this[_cache][$_get](width);
    }
  };
  (image_provider.ImageProvider.new = function(_width, _height, orientation, dpi) {
    this[_cache] = new (IdentityMapOfintL$PdfImageL()).new();
    this[_width$] = _width;
    this[_height$] = _height;
    this[orientation$] = orientation;
    this[dpi$] = dpi;
    ;
  }).prototype = image_provider.ImageProvider.prototype;
  dart.addTypeTests(image_provider.ImageProvider);
  dart.addTypeCaches(image_provider.ImageProvider);
  dart.setMethodSignature(image_provider.ImageProvider, () => ({
    __proto__: dart.getMethods(image_provider.ImageProvider.__proto__),
    resolve: dart.fnType(dart.legacy(image$.PdfImage), [dart.legacy(widget$.Context), dart.legacy(point$.PdfPoint)], {dpi: dart.legacy(core.double)}, {})
  }));
  dart.setGetterSignature(image_provider.ImageProvider, () => ({
    __proto__: dart.getGetters(image_provider.ImageProvider.__proto__),
    width: dart.legacy(core.int),
    height: dart.legacy(core.int)
  }));
  dart.setLibraryUri(image_provider.ImageProvider, L11);
  dart.setFieldSignature(image_provider.ImageProvider, () => ({
    __proto__: dart.getFields(image_provider.ImageProvider.__proto__),
    dpi: dart.finalFieldType(dart.legacy(core.double)),
    [_width$]: dart.finalFieldType(dart.legacy(core.int)),
    [_height$]: dart.finalFieldType(dart.legacy(core.int)),
    orientation: dart.finalFieldType(dart.legacy(image$.PdfImageOrientation)),
    [_cache]: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.int), dart.legacy(image$.PdfImage))))
  }));
  var _image$ = dart.privateName(image_provider, "_image");
  image_provider.ImageProxy = class ImageProxy extends image_provider.ImageProvider {
    buildImage(context, opts) {
      let width = opts && 'width' in opts ? opts.width : null;
      let height = opts && 'height' in opts ? opts.height : null;
      return this[_image$];
    }
  };
  (image_provider.ImageProxy.new = function(_image, opts) {
    let dpi = opts && 'dpi' in opts ? opts.dpi : null;
    this[_image$] = _image;
    image_provider.ImageProxy.__proto__.new.call(this, _image.width, _image.height, _image.orientation, dpi);
    ;
  }).prototype = image_provider.ImageProxy.prototype;
  dart.addTypeTests(image_provider.ImageProxy);
  dart.addTypeCaches(image_provider.ImageProxy);
  dart.setMethodSignature(image_provider.ImageProxy, () => ({
    __proto__: dart.getMethods(image_provider.ImageProxy.__proto__),
    buildImage: dart.fnType(dart.legacy(image$.PdfImage), [dart.legacy(widget$.Context)], {height: dart.legacy(core.int), width: dart.legacy(core.int)}, {})
  }));
  dart.setLibraryUri(image_provider.ImageProxy, L11);
  dart.setFieldSignature(image_provider.ImageProxy, () => ({
    __proto__: dart.getFields(image_provider.ImageProxy.__proto__),
    [_image$]: dart.finalFieldType(dart.legacy(image$.PdfImage))
  }));
  var bytes$ = dart.privateName(image_provider, "MemoryImage.bytes");
  image_provider.MemoryImage = class MemoryImage extends image_provider.ImageProvider {
    get bytes() {
      return this[bytes$];
    }
    set bytes(value) {
      super.bytes = value;
    }
    static new(bytes, opts) {
      let t0, t0$;
      let orientation = opts && 'orientation' in opts ? opts.orientation : null;
      let dpi = opts && 'dpi' in opts ? opts.dpi : null;
      let decoder = formats.findDecoderForData(bytes);
      if (JpegDecoderL().is(decoder)) {
        let info = exif.PdfJpegInfo.new(bytes);
        return new image_provider.MemoryImage.__(bytes, info.width, info.height, (t0 = orientation, t0 == null ? info.orientation : t0), dpi);
      }
      let info = decoder.startDecode(bytes);
      return new image_provider.MemoryImage.__(bytes, info.width, info.height, (t0$ = orientation, t0$ == null ? image$.PdfImageOrientation.topLeft : t0$), dpi);
    }
    buildImage(context, opts) {
      let width = opts && 'width' in opts ? opts.width : null;
      let height = opts && 'height' in opts ? opts.height : null;
      if (width == null) {
        return image$.PdfImage.file(context.document, {bytes: this.bytes});
      }
      let image = formats.decodeImage(this.bytes);
      let resized = copy_resize.copyResize(image, {width: width});
      return image$.PdfImage.fromImage(context.document, {image: resized});
    }
  };
  (image_provider.MemoryImage.__ = function(bytes, width, height, orientation, dpi) {
    this[bytes$] = bytes;
    image_provider.MemoryImage.__proto__.new.call(this, width, height, orientation, dpi);
    ;
  }).prototype = image_provider.MemoryImage.prototype;
  dart.addTypeTests(image_provider.MemoryImage);
  dart.addTypeCaches(image_provider.MemoryImage);
  dart.setMethodSignature(image_provider.MemoryImage, () => ({
    __proto__: dart.getMethods(image_provider.MemoryImage.__proto__),
    buildImage: dart.fnType(dart.legacy(image$.PdfImage), [dart.legacy(widget$.Context)], {height: dart.legacy(core.int), width: dart.legacy(core.int)}, {})
  }));
  dart.setLibraryUri(image_provider.MemoryImage, L11);
  dart.setFieldSignature(image_provider.MemoryImage, () => ({
    __proto__: dart.getFields(image_provider.MemoryImage.__proto__),
    bytes: dart.finalFieldType(dart.legacy(typed_data.Uint8List))
  }));
  image_provider.ImageImage = class ImageImage extends image_provider.ImageProvider {
    buildImage(context, opts) {
      let width = opts && 'width' in opts ? opts.width : null;
      let height = opts && 'height' in opts ? opts.height : null;
      if (width == null) {
        return image$.PdfImage.fromImage(context.document, {image: this[_image$]});
      }
      let resized = copy_resize.copyResize(this[_image$], {width: width});
      return image$.PdfImage.fromImage(context.document, {image: resized});
    }
  };
  (image_provider.ImageImage.new = function(_image, opts) {
    let t0;
    let dpi = opts && 'dpi' in opts ? opts.dpi : null;
    let orientation = opts && 'orientation' in opts ? opts.orientation : null;
    this[_image$] = _image;
    image_provider.ImageImage.__proto__.new.call(this, _image.width, _image.height, (t0 = orientation, t0 == null ? image$.PdfImageOrientation.topLeft : t0), dpi);
    ;
  }).prototype = image_provider.ImageImage.prototype;
  dart.addTypeTests(image_provider.ImageImage);
  dart.addTypeCaches(image_provider.ImageImage);
  dart.setMethodSignature(image_provider.ImageImage, () => ({
    __proto__: dart.getMethods(image_provider.ImageImage.__proto__),
    buildImage: dart.fnType(dart.legacy(image$.PdfImage), [dart.legacy(widget$.Context)], {height: dart.legacy(core.int), width: dart.legacy(core.int)}, {})
  }));
  dart.setLibraryUri(image_provider.ImageImage, L11);
  dart.setFieldSignature(image_provider.ImageImage, () => ({
    __proto__: dart.getFields(image_provider.ImageImage.__proto__),
    [_image$]: dart.finalFieldType(dart.legacy(image.Image))
  }));
  image_provider.RawImage = class RawImage extends image_provider.ImageImage {};
  (image_provider.RawImage.new = function(opts) {
    let bytes = opts && 'bytes' in opts ? opts.bytes : null;
    let width = opts && 'width' in opts ? opts.width : null;
    let height = opts && 'height' in opts ? opts.height : null;
    let orientation = opts && 'orientation' in opts ? opts.orientation : null;
    let dpi = opts && 'dpi' in opts ? opts.dpi : null;
    image_provider.RawImage.__proto__.new.call(this, new image.Image.fromBytes(width, height, bytes), {orientation: orientation, dpi: dpi});
    ;
  }).prototype = image_provider.RawImage.prototype;
  dart.addTypeTests(image_provider.RawImage);
  dart.addTypeCaches(image_provider.RawImage);
  dart.setLibraryUri(image_provider.RawImage, L11);
  var C21;
  var C22;
  decoration$.DecorationPosition = class DecorationPosition extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (decoration$.DecorationPosition.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = decoration$.DecorationPosition.prototype;
  dart.addTypeTests(decoration$.DecorationPosition);
  dart.addTypeCaches(decoration$.DecorationPosition);
  dart.setMethodSignature(decoration$.DecorationPosition, () => ({
    __proto__: dart.getMethods(decoration$.DecorationPosition.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(decoration$.DecorationPosition, L12);
  dart.setFieldSignature(decoration$.DecorationPosition, () => ({
    __proto__: dart.getFields(decoration$.DecorationPosition.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(decoration$.DecorationPosition, ['toString']);
  decoration$.DecorationPosition.background = C0 || CT.C0;
  decoration$.DecorationPosition.foreground = C21 || CT.C21;
  decoration$.DecorationPosition.values = C22 || CT.C22;
  var _name$2 = dart.privateName(basic, "_name");
  var C23;
  var Alignment_y = dart.privateName(geometry, "Alignment.y");
  var Alignment_x = dart.privateName(geometry, "Alignment.x");
  var C24;
  var image$0 = dart.privateName(decoration$, "DecorationImage.image");
  var fit$ = dart.privateName(decoration$, "DecorationImage.fit");
  var alignment$0 = dart.privateName(decoration$, "DecorationImage.alignment");
  var dpi$0 = dart.privateName(decoration$, "DecorationImage.dpi");
  decoration$.DecorationImage = class DecorationImage extends core.Object {
    get image() {
      return this[image$0];
    }
    set image(value) {
      super.image = value;
    }
    get fit() {
      return this[fit$];
    }
    set fit(value) {
      super.fit = value;
    }
    get alignment() {
      return this[alignment$0];
    }
    set alignment(value) {
      super.alignment = value;
    }
    get dpi() {
      return this[dpi$0];
    }
    set dpi(value) {
      super.dpi = value;
    }
    paint(context, box) {
      let t0, t0$;
      let _image = this.image.resolve(context, box.size, {dpi: this.dpi});
      let imageSize = new point$.PdfPoint.new(_image.width[$toDouble](), _image.height[$toDouble]());
      let sizes = geometry.applyBoxFit(this.fit, imageSize, box.size);
      let scaleX = dart.notNull(sizes.destination.x) / dart.notNull(sizes.source.x);
      let scaleY = dart.notNull(sizes.destination.y) / dart.notNull(sizes.source.y);
      let sourceRect = this.alignment.inscribe(sizes.source, rect$.PdfRect.fromPoints(point$.PdfPoint.zero, imageSize));
      let destinationRect = this.alignment.inscribe(sizes.destination, box);
      let mat = (t0 = vector_math_64.Matrix4.translationValues(destinationRect.x, destinationRect.y, 0.0), (() => {
        t0.scale(scaleX, scaleY, 1.0);
        t0.translate(-dart.notNull(sourceRect.x), -dart.notNull(sourceRect.y));
        return t0;
      })());
      t0$ = context.canvas;
      (() => {
        t0$.saveContext();
        t0$.drawBox(box);
        t0$.clipPath();
        t0$.setTransform(mat);
        t0$.drawImage(_image, 0.0, 0.0, imageSize.x, imageSize.y);
        t0$.restoreContext();
        return t0$;
      })();
    }
  };
  (decoration$.DecorationImage.new = function(opts) {
    let image = opts && 'image' in opts ? opts.image : null;
    let fit = opts && 'fit' in opts ? opts.fit : C23 || CT.C23;
    let alignment = opts && 'alignment' in opts ? opts.alignment : C24 || CT.C24;
    let dpi = opts && 'dpi' in opts ? opts.dpi : null;
    this[image$0] = image;
    this[fit$] = fit;
    this[alignment$0] = alignment;
    this[dpi$0] = dpi;
    if (!(image != null)) dart.assertFailed(null, L13, 40, 16, "image != null");
    if (!(fit != null)) dart.assertFailed(null, L13, 41, 16, "fit != null");
    if (!(alignment != null)) dart.assertFailed(null, L13, 42, 16, "alignment != null");
    ;
  }).prototype = decoration$.DecorationImage.prototype;
  dart.addTypeTests(decoration$.DecorationImage);
  dart.addTypeCaches(decoration$.DecorationImage);
  dart.setMethodSignature(decoration$.DecorationImage, () => ({
    __proto__: dart.getMethods(decoration$.DecorationImage.__proto__),
    paint: dart.fnType(dart.void, [dart.legacy(widget$.Context), dart.legacy(rect$.PdfRect)])
  }));
  dart.setLibraryUri(decoration$.DecorationImage, L12);
  dart.setFieldSignature(decoration$.DecorationImage, () => ({
    __proto__: dart.getFields(decoration$.DecorationImage.__proto__),
    image: dart.finalFieldType(dart.legacy(image_provider.ImageProvider)),
    fit: dart.finalFieldType(dart.legacy(basic.BoxFit)),
    alignment: dart.finalFieldType(dart.legacy(geometry.Alignment)),
    dpi: dart.finalFieldType(dart.legacy(core.double))
  }));
  var C25;
  var C26;
  decoration$.TileMode = class TileMode extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (decoration$.TileMode.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = decoration$.TileMode.prototype;
  dart.addTypeTests(decoration$.TileMode);
  dart.addTypeCaches(decoration$.TileMode);
  dart.setMethodSignature(decoration$.TileMode, () => ({
    __proto__: dart.getMethods(decoration$.TileMode.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(decoration$.TileMode, L12);
  dart.setFieldSignature(decoration$.TileMode, () => ({
    __proto__: dart.getFields(decoration$.TileMode.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(decoration$.TileMode, ['toString']);
  decoration$.TileMode.clamp = C25 || CT.C25;
  decoration$.TileMode.values = C26 || CT.C26;
  var colors$ = dart.privateName(decoration$, "Gradient.colors");
  var stops$ = dart.privateName(decoration$, "Gradient.stops");
  decoration$.Gradient = class Gradient extends core.Object {
    get colors() {
      return this[colors$];
    }
    set colors(value) {
      super.colors = value;
    }
    get stops() {
      return this[stops$];
    }
    set stops(value) {
      super.stops = value;
    }
  };
  (decoration$.Gradient.new = function(opts) {
    let colors = opts && 'colors' in opts ? opts.colors : null;
    let stops = opts && 'stops' in opts ? opts.stops : null;
    this[colors$] = colors;
    this[stops$] = stops;
    if (!(colors != null)) dart.assertFailed(null, L13, 94, 15, "colors != null");
    ;
  }).prototype = decoration$.Gradient.prototype;
  dart.addTypeTests(decoration$.Gradient);
  dart.addTypeCaches(decoration$.Gradient);
  dart.setLibraryUri(decoration$.Gradient, L12);
  dart.setFieldSignature(decoration$.Gradient, () => ({
    __proto__: dart.getFields(decoration$.Gradient.__proto__),
    colors: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(color.PdfColor)))),
    stops: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.double))))
  }));
  var C27;
  var C28;
  var begin$ = dart.privateName(decoration$, "LinearGradient.begin");
  var end$ = dart.privateName(decoration$, "LinearGradient.end");
  var tileMode$ = dart.privateName(decoration$, "LinearGradient.tileMode");
  decoration$.LinearGradient = class LinearGradient extends decoration$.Gradient {
    get begin() {
      return this[begin$];
    }
    set begin(value) {
      super.begin = value;
    }
    get end() {
      return this[end$];
    }
    set end(value) {
      super.end = value;
    }
    get tileMode() {
      return this[tileMode$];
    }
    set tileMode(value) {
      super.tileMode = value;
    }
    paint(context, box) {
      let t0, t0$;
      if (dart.test(this.colors[$isEmpty])) {
        return;
      }
      if (this.colors[$length] === 1) {
        t0 = context.canvas;
        (() => {
          t0.setFillColor(this.colors[$first]);
          t0.fillPath();
          return t0;
        })();
      }
      if (!(this.stops == null || this.stops[$length] == this.colors[$length])) dart.assertFailed(null, L13, 139, 12, "stops == null || stops.length == colors.length");
      t0$ = context.canvas;
      (() => {
        t0$.saveContext();
        t0$.clipPath();
        t0$.applyShader(new shading.PdfShading.new(context.document, {shadingType: shading.PdfShadingType.axial, boundingBox: box, function: $function.PdfBaseFunction.colorsAndStops(context.document, this.colors, this.stops), start: this.begin.withinRect(box), end: this.end.withinRect(box), extendStart: true, extendEnd: true}));
        t0$.restoreContext();
        return t0$;
      })();
    }
  };
  (decoration$.LinearGradient.new = function(opts) {
    let begin = opts && 'begin' in opts ? opts.begin : C27 || CT.C27;
    let end = opts && 'end' in opts ? opts.end : C28 || CT.C28;
    let colors = opts && 'colors' in opts ? opts.colors : null;
    let stops = opts && 'stops' in opts ? opts.stops : null;
    let tileMode = opts && 'tileMode' in opts ? opts.tileMode : C25 || CT.C25;
    this[begin$] = begin;
    this[end$] = end;
    this[tileMode$] = tileMode;
    if (!(begin != null)) dart.assertFailed(null, L13, 113, 16, "begin != null");
    if (!(end != null)) dart.assertFailed(null, L13, 114, 16, "end != null");
    if (!(tileMode != null)) dart.assertFailed(null, L13, 115, 16, "tileMode != null");
    decoration$.LinearGradient.__proto__.new.call(this, {colors: colors, stops: stops});
    ;
  }).prototype = decoration$.LinearGradient.prototype;
  dart.addTypeTests(decoration$.LinearGradient);
  dart.addTypeCaches(decoration$.LinearGradient);
  dart.setMethodSignature(decoration$.LinearGradient, () => ({
    __proto__: dart.getMethods(decoration$.LinearGradient.__proto__),
    paint: dart.fnType(dart.void, [dart.legacy(widget$.Context), dart.legacy(rect$.PdfRect)])
  }));
  dart.setLibraryUri(decoration$.LinearGradient, L12);
  dart.setFieldSignature(decoration$.LinearGradient, () => ({
    __proto__: dart.getFields(decoration$.LinearGradient.__proto__),
    begin: dart.finalFieldType(dart.legacy(geometry.Alignment)),
    end: dart.finalFieldType(dart.legacy(geometry.Alignment)),
    tileMode: dart.finalFieldType(dart.legacy(decoration$.TileMode))
  }));
  var center$ = dart.privateName(decoration$, "RadialGradient.center");
  var radius$ = dart.privateName(decoration$, "RadialGradient.radius");
  var tileMode$0 = dart.privateName(decoration$, "RadialGradient.tileMode");
  var focal$ = dart.privateName(decoration$, "RadialGradient.focal");
  var focalRadius$ = dart.privateName(decoration$, "RadialGradient.focalRadius");
  decoration$.RadialGradient = class RadialGradient extends decoration$.Gradient {
    get center() {
      return this[center$];
    }
    set center(value) {
      super.center = value;
    }
    get radius() {
      return this[radius$];
    }
    set radius(value) {
      super.radius = value;
    }
    get tileMode() {
      return this[tileMode$0];
    }
    set tileMode(value) {
      super.tileMode = value;
    }
    get focal() {
      return this[focal$];
    }
    set focal(value) {
      super.focal = value;
    }
    get focalRadius() {
      return this[focalRadius$];
    }
    set focalRadius(value) {
      super.focalRadius = value;
    }
    paint(context, box) {
      let t0, t0$, t0$0;
      if (dart.test(this.colors[$isEmpty])) {
        return;
      }
      if (this.colors[$length] === 1) {
        t0 = context.canvas;
        (() => {
          t0.setFillColor(this.colors[$first]);
          t0.fillPath();
          return t0;
        })();
      }
      if (!(this.stops == null || this.stops[$length] == this.colors[$length])) dart.assertFailed(null, L13, 212, 12, "stops == null || stops.length == colors.length");
      let _focal = (t0$ = this.focal, t0$ == null ? this.center : t0$);
      let _radius = math.min(doubleL(), box.width, box.height);
      t0$0 = context.canvas;
      (() => {
        t0$0.saveContext();
        t0$0.clipPath();
        t0$0.applyShader(new shading.PdfShading.new(context.document, {shadingType: shading.PdfShadingType.radial, boundingBox: box, function: $function.PdfBaseFunction.colorsAndStops(context.document, this.colors, this.stops), start: _focal.withinRect(box), end: this.center.withinRect(box), radius0: dart.notNull(this.focalRadius) * _radius, radius1: dart.notNull(this.radius) * _radius, extendStart: true, extendEnd: true}));
        t0$0.restoreContext();
        return t0$0;
      })();
    }
  };
  (decoration$.RadialGradient.new = function(opts) {
    let center = opts && 'center' in opts ? opts.center : C24 || CT.C24;
    let radius = opts && 'radius' in opts ? opts.radius : 0.5;
    let colors = opts && 'colors' in opts ? opts.colors : null;
    let stops = opts && 'stops' in opts ? opts.stops : null;
    let tileMode = opts && 'tileMode' in opts ? opts.tileMode : C25 || CT.C25;
    let focal = opts && 'focal' in opts ? opts.focal : null;
    let focalRadius = opts && 'focalRadius' in opts ? opts.focalRadius : 0;
    this[center$] = center;
    this[radius$] = radius;
    this[tileMode$0] = tileMode;
    this[focal$] = focal;
    this[focalRadius$] = focalRadius;
    if (!(center != null)) dart.assertFailed(null, L13, 178, 16, "center != null");
    if (!(radius != null)) dart.assertFailed(null, L13, 179, 16, "radius != null");
    if (!(tileMode != null)) dart.assertFailed(null, L13, 180, 16, "tileMode != null");
    if (!(focalRadius != null)) dart.assertFailed(null, L13, 181, 16, "focalRadius != null");
    decoration$.RadialGradient.__proto__.new.call(this, {colors: colors, stops: stops});
    ;
  }).prototype = decoration$.RadialGradient.prototype;
  dart.addTypeTests(decoration$.RadialGradient);
  dart.addTypeCaches(decoration$.RadialGradient);
  dart.setMethodSignature(decoration$.RadialGradient, () => ({
    __proto__: dart.getMethods(decoration$.RadialGradient.__proto__),
    paint: dart.fnType(dart.void, [dart.legacy(widget$.Context), dart.legacy(rect$.PdfRect)])
  }));
  dart.setLibraryUri(decoration$.RadialGradient, L12);
  dart.setFieldSignature(decoration$.RadialGradient, () => ({
    __proto__: dart.getFields(decoration$.RadialGradient.__proto__),
    center: dart.finalFieldType(dart.legacy(geometry.Alignment)),
    radius: dart.finalFieldType(dart.legacy(core.double)),
    tileMode: dart.finalFieldType(dart.legacy(decoration$.TileMode)),
    focal: dart.finalFieldType(dart.legacy(geometry.Alignment)),
    focalRadius: dart.finalFieldType(dart.legacy(core.double))
  }));
  var PdfColor_blue = dart.privateName(color, "PdfColor.blue");
  var PdfColor_green = dart.privateName(color, "PdfColor.green");
  var PdfColor_red = dart.privateName(color, "PdfColor.red");
  var PdfColor_alpha = dart.privateName(color, "PdfColor.alpha");
  var C29;
  var PdfPoint_y = dart.privateName(point$, "PdfPoint.y");
  var PdfPoint_x = dart.privateName(point$, "PdfPoint.x");
  var C30;
  var _rect = dart.privateName(decoration$, "_rect");
  var _ellipse = dart.privateName(decoration$, "_ellipse");
  var color$1 = dart.privateName(decoration$, "BoxShadow.color");
  var offset$ = dart.privateName(decoration$, "BoxShadow.offset");
  var blurRadius$ = dart.privateName(decoration$, "BoxShadow.blurRadius");
  var spreadRadius$ = dart.privateName(decoration$, "BoxShadow.spreadRadius");
  decoration$.BoxShadow = class BoxShadow extends core.Object {
    get color() {
      return this[color$1];
    }
    set color(value) {
      super.color = value;
    }
    get offset() {
      return this[offset$];
    }
    set offset(value) {
      super.offset = value;
    }
    get blurRadius() {
      return this[blurRadius$];
    }
    set blurRadius(value) {
      super.blurRadius = value;
    }
    get spreadRadius() {
      return this[spreadRadius$];
    }
    set spreadRadius(value) {
      super.spreadRadius = value;
    }
    [_rect](width, height) {
      let shadow = new image.Image.new((dart.notNull(width) + dart.notNull(this.spreadRadius) * 2)[$round](), (dart.notNull(height) + dart.notNull(this.spreadRadius) * 2)[$round]());
      fill_rect.fillRect(shadow, this.spreadRadius[$round](), this.spreadRadius[$round](), (dart.notNull(this.spreadRadius) + dart.notNull(width))[$round](), (dart.notNull(this.spreadRadius) + dart.notNull(height))[$round](), this.color.toInt());
      gaussian_blur.gaussianBlur(shadow, this.blurRadius[$round]());
      return shadow;
    }
    [_ellipse](width, height) {
      let shadow = new image.Image.new((dart.notNull(width) + dart.notNull(this.spreadRadius) * 2)[$round](), (dart.notNull(height) + dart.notNull(this.spreadRadius) * 2)[$round]());
      draw_circle.fillCircle(shadow, (dart.notNull(this.spreadRadius) + dart.notNull(width) / 2)[$round](), (dart.notNull(this.spreadRadius) + dart.notNull(height) / 2)[$round](), (dart.notNull(width) / 2)[$round](), this.color.toInt());
      gaussian_blur.gaussianBlur(shadow, this.blurRadius[$round]());
      return shadow;
    }
  };
  (decoration$.BoxShadow.new = function(opts) {
    let color = opts && 'color' in opts ? opts.color : C29 || CT.C29;
    let offset = opts && 'offset' in opts ? opts.offset : C30 || CT.C30;
    let blurRadius = opts && 'blurRadius' in opts ? opts.blurRadius : 0;
    let spreadRadius = opts && 'spreadRadius' in opts ? opts.spreadRadius : 0;
    this[color$1] = color;
    this[offset$] = offset;
    this[blurRadius$] = blurRadius;
    this[spreadRadius$] = spreadRadius;
    ;
  }).prototype = decoration$.BoxShadow.prototype;
  dart.addTypeTests(decoration$.BoxShadow);
  dart.addTypeCaches(decoration$.BoxShadow);
  dart.setMethodSignature(decoration$.BoxShadow, () => ({
    __proto__: dart.getMethods(decoration$.BoxShadow.__proto__),
    [_rect]: dart.fnType(dart.legacy(image.Image), [dart.legacy(core.double), dart.legacy(core.double)]),
    [_ellipse]: dart.fnType(dart.legacy(image.Image), [dart.legacy(core.double), dart.legacy(core.double)])
  }));
  dart.setLibraryUri(decoration$.BoxShadow, L12);
  dart.setFieldSignature(decoration$.BoxShadow, () => ({
    __proto__: dart.getFields(decoration$.BoxShadow.__proto__),
    color: dart.finalFieldType(dart.legacy(color.PdfColor)),
    offset: dart.finalFieldType(dart.legacy(point$.PdfPoint)),
    blurRadius: dart.finalFieldType(dart.legacy(core.double)),
    spreadRadius: dart.finalFieldType(dart.legacy(core.double))
  }));
  var C31;
  var C32;
  var C33;
  decoration$.BoxShape = class BoxShape extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (decoration$.BoxShape.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = decoration$.BoxShape.prototype;
  dart.addTypeTests(decoration$.BoxShape);
  dart.addTypeCaches(decoration$.BoxShape);
  dart.setMethodSignature(decoration$.BoxShape, () => ({
    __proto__: dart.getMethods(decoration$.BoxShape.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(decoration$.BoxShape, L12);
  dart.setFieldSignature(decoration$.BoxShape, () => ({
    __proto__: dart.getFields(decoration$.BoxShape.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(decoration$.BoxShape, ['toString']);
  decoration$.BoxShape.circle = C31 || CT.C31;
  decoration$.BoxShape.rectangle = C32 || CT.C32;
  decoration$.BoxShape.values = C33 || CT.C33;
  var C34;
  var C35;
  var C36;
  var C37;
  decoration$.PaintPhase = class PaintPhase extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (decoration$.PaintPhase.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = decoration$.PaintPhase.prototype;
  dart.addTypeTests(decoration$.PaintPhase);
  dart.addTypeCaches(decoration$.PaintPhase);
  dart.setMethodSignature(decoration$.PaintPhase, () => ({
    __proto__: dart.getMethods(decoration$.PaintPhase.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(decoration$.PaintPhase, L12);
  dart.setFieldSignature(decoration$.PaintPhase, () => ({
    __proto__: dart.getFields(decoration$.PaintPhase.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(decoration$.PaintPhase, ['toString']);
  decoration$.PaintPhase.all = C34 || CT.C34;
  decoration$.PaintPhase.background = C35 || CT.C35;
  decoration$.PaintPhase.foreground = C36 || CT.C36;
  decoration$.PaintPhase.values = C37 || CT.C37;
  var color$2 = dart.privateName(decoration$, "BoxDecoration.color");
  var border$ = dart.privateName(decoration$, "BoxDecoration.border");
  var borderRadius$ = dart.privateName(decoration$, "BoxDecoration.borderRadius");
  var shape$ = dart.privateName(decoration$, "BoxDecoration.shape");
  var image$1 = dart.privateName(decoration$, "BoxDecoration.image");
  var gradient$ = dart.privateName(decoration$, "BoxDecoration.gradient");
  var boxShadow$ = dart.privateName(decoration$, "BoxDecoration.boxShadow");
  decoration$.BoxDecoration = class BoxDecoration extends core.Object {
    get color() {
      return this[color$2];
    }
    set color(value) {
      super.color = value;
    }
    get border() {
      return this[border$];
    }
    set border(value) {
      super.border = value;
    }
    get borderRadius() {
      return this[borderRadius$];
    }
    set borderRadius(value) {
      super.borderRadius = value;
    }
    get shape() {
      return this[shape$];
    }
    set shape(value) {
      super.shape = value;
    }
    get image() {
      return this[image$1];
    }
    set image(value) {
      super.image = value;
    }
    get gradient() {
      return this[gradient$];
    }
    set gradient(value) {
      super.gradient = value;
    }
    get boxShadow() {
      return this[boxShadow$];
    }
    set boxShadow(value) {
      super.boxShadow = value;
    }
    paint(context, box, phase = C34 || CT.C34) {
      let t0, t0$;
      if (!(box.x != null)) dart.assertFailed(null, L13, 326, 12, "box.x != null");
      if (!(box.y != null)) dart.assertFailed(null, L13, 327, 12, "box.y != null");
      if (!(box.width != null)) dart.assertFailed(null, L13, 328, 12, "box.width != null");
      if (!(box.height != null)) dart.assertFailed(null, L13, 329, 12, "box.height != null");
      if (phase == decoration$.PaintPhase.all || phase == decoration$.PaintPhase.background) {
        if (this.color != null) {
          switch (this.shape) {
            case C32 || CT.C32:
            {
              if (this.borderRadius == null) {
                if (this.boxShadow != null) {
                  for (let s of this.boxShadow) {
                    let i = s[_rect](box.width, box.height);
                    let m = image$.PdfImage.fromImage(context.document, {image: i});
                    context.canvas.drawImage(m, dart.notNull(box.x) + dart.notNull(s.offset.x) - dart.notNull(s.spreadRadius), dart.notNull(box.y) - dart.notNull(s.offset.y) - dart.notNull(s.spreadRadius));
                  }
                }
                context.canvas.drawBox(box);
              } else {
                if (this.boxShadow != null) {
                  for (let s of this.boxShadow) {
                    let i = s[_rect](box.width, box.height);
                    let m = image$.PdfImage.fromImage(context.document, {image: i});
                    context.canvas.drawImage(m, dart.notNull(box.x) + dart.notNull(s.offset.x) - dart.notNull(s.spreadRadius), dart.notNull(box.y) - dart.notNull(s.offset.y) - dart.notNull(s.spreadRadius));
                  }
                }
                this.borderRadius.paint(context, box);
              }
              break;
            }
            case C31 || CT.C31:
            {
              if (this.boxShadow != null && box.width == box.height) {
                for (let s of this.boxShadow) {
                  let i = s[_ellipse](box.width, box.height);
                  let m = image$.PdfImage.fromImage(context.document, {image: i});
                  context.canvas.drawImage(m, dart.notNull(box.x) + dart.notNull(s.offset.x) - dart.notNull(s.spreadRadius), dart.notNull(box.y) - dart.notNull(s.offset.y) - dart.notNull(s.spreadRadius));
                }
              }
              context.canvas.drawEllipse(dart.notNull(box.x) + dart.notNull(box.width) / 2.0, dart.notNull(box.y) + dart.notNull(box.height) / 2.0, dart.notNull(box.width) / 2.0, dart.notNull(box.height) / 2.0);
              break;
            }
          }
          t0 = context.canvas;
          (() => {
            t0.setFillColor(this.color);
            t0.fillPath();
            return t0;
          })();
        }
        if (this.gradient != null) {
          switch (this.shape) {
            case C32 || CT.C32:
            {
              if (this.borderRadius == null) {
                context.canvas.drawBox(box);
              } else {
                this.borderRadius.paint(context, box);
              }
              break;
            }
            case C31 || CT.C31:
            {
              context.canvas.drawEllipse(dart.notNull(box.x) + dart.notNull(box.width) / 2.0, dart.notNull(box.y) + dart.notNull(box.height) / 2.0, dart.notNull(box.width) / 2.0, dart.notNull(box.height) / 2.0);
              break;
            }
          }
          this.gradient.paint(context, box);
        }
        if (this.image != null) {
          context.canvas.saveContext();
          switch (this.shape) {
            case C31 || CT.C31:
            {
              t0$ = context.canvas;
              (() => {
                t0$.drawEllipse(dart.notNull(box.x) + dart.notNull(box.width) / 2.0, dart.notNull(box.y) + dart.notNull(box.height) / 2.0, dart.notNull(box.width) / 2.0, dart.notNull(box.height) / 2.0);
                t0$.clipPath();
                return t0$;
              })();
              break;
            }
            case C32 || CT.C32:
            {
              if (this.borderRadius != null) {
                this.borderRadius.paint(context, box);
                context.canvas.clipPath();
              }
              break;
            }
          }
          this.image.paint(context, box);
          context.canvas.restoreContext();
        }
      }
      if (phase == decoration$.PaintPhase.all || phase == decoration$.PaintPhase.foreground) {
        if (this.border != null) {
          this.border.paint(context, box, {shape: this.shape, borderRadius: this.borderRadius});
        }
      }
    }
  };
  (decoration$.BoxDecoration.new = function(opts) {
    let color = opts && 'color' in opts ? opts.color : null;
    let border = opts && 'border' in opts ? opts.border : null;
    let borderRadius = opts && 'borderRadius' in opts ? opts.borderRadius : null;
    let boxShadow = opts && 'boxShadow' in opts ? opts.boxShadow : null;
    let gradient = opts && 'gradient' in opts ? opts.gradient : null;
    let image = opts && 'image' in opts ? opts.image : null;
    let shape = opts && 'shape' in opts ? opts.shape : C32 || CT.C32;
    this[color$2] = color;
    this[border$] = border;
    this[borderRadius$] = borderRadius;
    this[boxShadow$] = boxShadow;
    this[gradient$] = gradient;
    this[image$1] = image;
    this[shape$] = shape;
    if (!(shape != null)) dart.assertFailed(null, L13, 310, 15, "shape != null");
    ;
  }).prototype = decoration$.BoxDecoration.prototype;
  dart.addTypeTests(decoration$.BoxDecoration);
  dart.addTypeCaches(decoration$.BoxDecoration);
  dart.setMethodSignature(decoration$.BoxDecoration, () => ({
    __proto__: dart.getMethods(decoration$.BoxDecoration.__proto__),
    paint: dart.fnType(dart.void, [dart.legacy(widget$.Context), dart.legacy(rect$.PdfRect)], [dart.legacy(decoration$.PaintPhase)])
  }));
  dart.setLibraryUri(decoration$.BoxDecoration, L12);
  dart.setFieldSignature(decoration$.BoxDecoration, () => ({
    __proto__: dart.getFields(decoration$.BoxDecoration.__proto__),
    color: dart.finalFieldType(dart.legacy(color.PdfColor)),
    border: dart.finalFieldType(dart.legacy(box_border.BoxBorder)),
    borderRadius: dart.finalFieldType(dart.legacy(border_radius.BorderRadius)),
    shape: dart.finalFieldType(dart.legacy(decoration$.BoxShape)),
    image: dart.finalFieldType(dart.legacy(decoration$.DecorationImage)),
    gradient: dart.finalFieldType(dart.legacy(decoration$.Gradient)),
    boxShadow: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(decoration$.BoxShadow))))
  }));
  var _name$3 = dart.privateName(text_style, "_name");
  var C38;
  var C39;
  var C40;
  text_style.FontWeight = class FontWeight extends core.Object {
    toString() {
      return this[_name$3];
    }
  };
  (text_style.FontWeight.new = function(index, _name) {
    this.index = index;
    this[_name$3] = _name;
    ;
  }).prototype = text_style.FontWeight.prototype;
  dart.addTypeTests(text_style.FontWeight);
  dart.addTypeCaches(text_style.FontWeight);
  dart.setMethodSignature(text_style.FontWeight, () => ({
    __proto__: dart.getMethods(text_style.FontWeight.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(text_style.FontWeight, L14);
  dart.setFieldSignature(text_style.FontWeight, () => ({
    __proto__: dart.getFields(text_style.FontWeight.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$3]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(text_style.FontWeight, ['toString']);
  text_style.FontWeight.normal = C38 || CT.C38;
  text_style.FontWeight.bold = C39 || CT.C39;
  text_style.FontWeight.values = C40 || CT.C40;
  var C41;
  var C42;
  var C43;
  text_style.FontStyle = class FontStyle extends core.Object {
    toString() {
      return this[_name$3];
    }
  };
  (text_style.FontStyle.new = function(index, _name) {
    this.index = index;
    this[_name$3] = _name;
    ;
  }).prototype = text_style.FontStyle.prototype;
  dart.addTypeTests(text_style.FontStyle);
  dart.addTypeCaches(text_style.FontStyle);
  dart.setMethodSignature(text_style.FontStyle, () => ({
    __proto__: dart.getMethods(text_style.FontStyle.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(text_style.FontStyle, L14);
  dart.setFieldSignature(text_style.FontStyle, () => ({
    __proto__: dart.getFields(text_style.FontStyle.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$3]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(text_style.FontStyle, ['toString']);
  text_style.FontStyle.normal = C41 || CT.C41;
  text_style.FontStyle.italic = C42 || CT.C42;
  text_style.FontStyle.values = C43 || CT.C43;
  var C44;
  var C45;
  var C46;
  text_style.TextDecorationStyle = class TextDecorationStyle extends core.Object {
    toString() {
      return this[_name$3];
    }
  };
  (text_style.TextDecorationStyle.new = function(index, _name) {
    this.index = index;
    this[_name$3] = _name;
    ;
  }).prototype = text_style.TextDecorationStyle.prototype;
  dart.addTypeTests(text_style.TextDecorationStyle);
  dart.addTypeCaches(text_style.TextDecorationStyle);
  dart.setMethodSignature(text_style.TextDecorationStyle, () => ({
    __proto__: dart.getMethods(text_style.TextDecorationStyle.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(text_style.TextDecorationStyle, L14);
  dart.setFieldSignature(text_style.TextDecorationStyle, () => ({
    __proto__: dart.getFields(text_style.TextDecorationStyle.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$3]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(text_style.TextDecorationStyle, ['toString']);
  text_style.TextDecorationStyle.solid = C44 || CT.C44;
  text_style.TextDecorationStyle.double = C45 || CT.C45;
  text_style.TextDecorationStyle.values = C46 || CT.C46;
  var _mask = dart.privateName(text_style, "_mask");
  var _mask$ = dart.privateName(text_style, "TextDecoration._mask");
  var C47;
  var C48;
  var C49;
  var C50;
  text_style.TextDecoration = class TextDecoration extends core.Object {
    get [_mask]() {
      return this[_mask$];
    }
    set [_mask](value) {
      super[_mask] = value;
    }
    static combine(decorations) {
      let mask = 0;
      for (let decoration of decorations) {
        mask = (mask | dart.notNull(decoration[_mask])) >>> 0;
      }
      return new text_style.TextDecoration.__(mask);
    }
    contains(other) {
      return (dart.notNull(this[_mask]) | dart.notNull(other[_mask])) >>> 0 === this[_mask];
    }
    _equals(other) {
      if (other == null) return false;
      if (!TextDecorationL().is(other)) {
        return false;
      }
      let typedOther = TextDecorationL().as(other);
      return this[_mask] == typedOther[_mask];
    }
    get hashCode() {
      return dart.hashCode(this[_mask]);
    }
    toString() {
      if (this[_mask] === 0) {
        return "TextDecoration.none";
      }
      let values = JSArrayOfStringL().of([]);
      if ((dart.notNull(this[_mask]) & dart.notNull(text_style.TextDecoration.underline[_mask])) !== 0) {
        values[$add]("underline");
      }
      if ((dart.notNull(this[_mask]) & dart.notNull(text_style.TextDecoration.overline[_mask])) !== 0) {
        values[$add]("overline");
      }
      if ((dart.notNull(this[_mask]) & dart.notNull(text_style.TextDecoration.lineThrough[_mask])) !== 0) {
        values[$add]("lineThrough");
      }
      if (values[$length] === 1) {
        return "TextDecoration." + dart.str(values[$_get](0));
      }
      return "TextDecoration.combine([" + dart.str(values[$join](", ")) + "])";
    }
  };
  (text_style.TextDecoration.__ = function(_mask) {
    this[_mask$] = _mask;
    ;
  }).prototype = text_style.TextDecoration.prototype;
  dart.addTypeTests(text_style.TextDecoration);
  dart.addTypeCaches(text_style.TextDecoration);
  dart.setMethodSignature(text_style.TextDecoration, () => ({
    __proto__: dart.getMethods(text_style.TextDecoration.__proto__),
    contains: dart.fnType(dart.legacy(core.bool), [dart.legacy(text_style.TextDecoration)]),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setGetterSignature(text_style.TextDecoration, () => ({
    __proto__: dart.getGetters(text_style.TextDecoration.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(text_style.TextDecoration, L14);
  dart.setFieldSignature(text_style.TextDecoration, () => ({
    __proto__: dart.getFields(text_style.TextDecoration.__proto__),
    [_mask]: dart.finalFieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(text_style.TextDecoration, ['_equals', 'toString']);
  dart.defineExtensionAccessors(text_style.TextDecoration, ['hashCode']);
  dart.defineLazy(text_style.TextDecoration, {
    /*text_style.TextDecoration.none*/get none() {
      return C47 || CT.C47;
    },
    /*text_style.TextDecoration.underline*/get underline() {
      return C48 || CT.C48;
    },
    /*text_style.TextDecoration.overline*/get overline() {
      return C49 || CT.C49;
    },
    /*text_style.TextDecoration.lineThrough*/get lineThrough() {
      return C50 || CT.C50;
    }
  }, true);
  var inherit$ = dart.privateName(text_style, "TextStyle.inherit");
  var color$3 = dart.privateName(text_style, "TextStyle.color");
  var fontNormal$ = dart.privateName(text_style, "TextStyle.fontNormal");
  var fontBold$ = dart.privateName(text_style, "TextStyle.fontBold");
  var fontItalic$ = dart.privateName(text_style, "TextStyle.fontItalic");
  var fontBoldItalic$ = dart.privateName(text_style, "TextStyle.fontBoldItalic");
  var fontSize$ = dart.privateName(text_style, "TextStyle.fontSize");
  var fontWeight$ = dart.privateName(text_style, "TextStyle.fontWeight");
  var fontStyle$ = dart.privateName(text_style, "TextStyle.fontStyle");
  var letterSpacing$ = dart.privateName(text_style, "TextStyle.letterSpacing");
  var lineSpacing$ = dart.privateName(text_style, "TextStyle.lineSpacing");
  var wordSpacing$ = dart.privateName(text_style, "TextStyle.wordSpacing");
  var height$ = dart.privateName(text_style, "TextStyle.height");
  var background$ = dart.privateName(text_style, "TextStyle.background");
  var decoration$2 = dart.privateName(text_style, "TextStyle.decoration");
  var decorationColor$ = dart.privateName(text_style, "TextStyle.decorationColor");
  var decorationStyle$ = dart.privateName(text_style, "TextStyle.decorationStyle");
  var decorationThickness$ = dart.privateName(text_style, "TextStyle.decorationThickness");
  var renderingMode$ = dart.privateName(text_style, "TextStyle.renderingMode");
  text_style.TextStyle = class TextStyle extends core.Object {
    get inherit() {
      return this[inherit$];
    }
    set inherit(value) {
      super.inherit = value;
    }
    get color() {
      return this[color$3];
    }
    set color(value) {
      super.color = value;
    }
    get fontNormal() {
      return this[fontNormal$];
    }
    set fontNormal(value) {
      super.fontNormal = value;
    }
    get fontBold() {
      return this[fontBold$];
    }
    set fontBold(value) {
      super.fontBold = value;
    }
    get fontItalic() {
      return this[fontItalic$];
    }
    set fontItalic(value) {
      super.fontItalic = value;
    }
    get fontBoldItalic() {
      return this[fontBoldItalic$];
    }
    set fontBoldItalic(value) {
      super.fontBoldItalic = value;
    }
    get fontSize() {
      return this[fontSize$];
    }
    set fontSize(value) {
      super.fontSize = value;
    }
    get fontWeight() {
      return this[fontWeight$];
    }
    set fontWeight(value) {
      super.fontWeight = value;
    }
    get fontStyle() {
      return this[fontStyle$];
    }
    set fontStyle(value) {
      super.fontStyle = value;
    }
    get letterSpacing() {
      return this[letterSpacing$];
    }
    set letterSpacing(value) {
      super.letterSpacing = value;
    }
    get lineSpacing() {
      return this[lineSpacing$];
    }
    set lineSpacing(value) {
      super.lineSpacing = value;
    }
    get wordSpacing() {
      return this[wordSpacing$];
    }
    set wordSpacing(value) {
      super.wordSpacing = value;
    }
    get height() {
      return this[height$];
    }
    set height(value) {
      super.height = value;
    }
    get background() {
      return this[background$];
    }
    set background(value) {
      super.background = value;
    }
    get decoration() {
      return this[decoration$2];
    }
    set decoration(value) {
      super.decoration = value;
    }
    get decorationColor() {
      return this[decorationColor$];
    }
    set decorationColor(value) {
      super.decorationColor = value;
    }
    get decorationStyle() {
      return this[decorationStyle$];
    }
    set decorationStyle(value) {
      super.decorationStyle = value;
    }
    get decorationThickness() {
      return this[decorationThickness$];
    }
    set decorationThickness(value) {
      super.decorationThickness = value;
    }
    get renderingMode() {
      return this[renderingMode$];
    }
    set renderingMode(value) {
      super.renderingMode = value;
    }
    static defaultStyle() {
      return new text_style.TextStyle.new({inherit: false, color: colors.PdfColors.black, fontNormal: font$.Font.helvetica(), fontBold: font$.Font.helveticaBold(), fontItalic: font$.Font.helveticaOblique(), fontBoldItalic: font$.Font.helveticaBoldOblique(), fontSize: 12, fontWeight: text_style.FontWeight.normal, fontStyle: text_style.FontStyle.normal, letterSpacing: 0.0, wordSpacing: 1.0, lineSpacing: 0.0, height: 1.0, decoration: text_style.TextDecoration.none, decorationColor: null, decorationStyle: text_style.TextDecorationStyle.solid, decorationThickness: 1.0, renderingMode: graphics.PdfTextRenderingMode.fill});
    }
    copyWith(opts) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5, t0$6, t0$7, t0$8, t0$9, t0$10, t0$11, t0$12, t0$13, t0$14, t0$15, t0$16;
      let color = opts && 'color' in opts ? opts.color : null;
      let font = opts && 'font' in opts ? opts.font : null;
      let fontNormal = opts && 'fontNormal' in opts ? opts.fontNormal : null;
      let fontBold = opts && 'fontBold' in opts ? opts.fontBold : null;
      let fontItalic = opts && 'fontItalic' in opts ? opts.fontItalic : null;
      let fontBoldItalic = opts && 'fontBoldItalic' in opts ? opts.fontBoldItalic : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let lineSpacing = opts && 'lineSpacing' in opts ? opts.lineSpacing : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let renderingMode = opts && 'renderingMode' in opts ? opts.renderingMode : null;
      return new text_style.TextStyle.new({inherit: this.inherit, color: (t0 = color, t0 == null ? this.color : t0), font: (t0$ = font, t0$ == null ? this.font : t0$), fontNormal: (t0$0 = fontNormal, t0$0 == null ? this.fontNormal : t0$0), fontBold: (t0$1 = fontBold, t0$1 == null ? this.fontBold : t0$1), fontItalic: (t0$2 = fontItalic, t0$2 == null ? this.fontItalic : t0$2), fontBoldItalic: (t0$3 = fontBoldItalic, t0$3 == null ? this.fontBoldItalic : t0$3), fontSize: (t0$4 = fontSize, t0$4 == null ? this.fontSize : t0$4), fontWeight: (t0$5 = fontWeight, t0$5 == null ? this.fontWeight : t0$5), fontStyle: (t0$6 = fontStyle, t0$6 == null ? this.fontStyle : t0$6), letterSpacing: (t0$7 = letterSpacing, t0$7 == null ? this.letterSpacing : t0$7), wordSpacing: (t0$8 = wordSpacing, t0$8 == null ? this.wordSpacing : t0$8), lineSpacing: (t0$9 = lineSpacing, t0$9 == null ? this.lineSpacing : t0$9), height: (t0$10 = height, t0$10 == null ? this.height : t0$10), background: (t0$11 = background, t0$11 == null ? this.background : t0$11), decoration: (t0$12 = decoration, t0$12 == null ? this.decoration : t0$12), decorationColor: (t0$13 = decorationColor, t0$13 == null ? this.decorationColor : t0$13), decorationStyle: (t0$14 = decorationStyle, t0$14 == null ? this.decorationStyle : t0$14), decorationThickness: (t0$15 = decorationThickness, t0$15 == null ? this.decorationThickness : t0$15), renderingMode: (t0$16 = renderingMode, t0$16 == null ? this.renderingMode : t0$16)});
    }
    apply(opts) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3;
      let color = opts && 'color' in opts ? opts.color : null;
      let font = opts && 'font' in opts ? opts.font : null;
      let fontNormal = opts && 'fontNormal' in opts ? opts.fontNormal : null;
      let fontBold = opts && 'fontBold' in opts ? opts.fontBold : null;
      let fontItalic = opts && 'fontItalic' in opts ? opts.fontItalic : null;
      let fontBoldItalic = opts && 'fontBoldItalic' in opts ? opts.fontBoldItalic : null;
      let fontSizeFactor = opts && 'fontSizeFactor' in opts ? opts.fontSizeFactor : 1;
      let fontSizeDelta = opts && 'fontSizeDelta' in opts ? opts.fontSizeDelta : 0;
      let letterSpacingFactor = opts && 'letterSpacingFactor' in opts ? opts.letterSpacingFactor : 1;
      let letterSpacingDelta = opts && 'letterSpacingDelta' in opts ? opts.letterSpacingDelta : 0;
      let wordSpacingFactor = opts && 'wordSpacingFactor' in opts ? opts.wordSpacingFactor : 1;
      let wordSpacingDelta = opts && 'wordSpacingDelta' in opts ? opts.wordSpacingDelta : 0;
      let heightFactor = opts && 'heightFactor' in opts ? opts.heightFactor : 1;
      let heightDelta = opts && 'heightDelta' in opts ? opts.heightDelta : 0;
      let decoration = opts && 'decoration' in opts ? opts.decoration : C47 || CT.C47;
      if (!(fontSizeFactor != null)) dart.assertFailed(null, L15, 286, 12, "fontSizeFactor != null");
      if (!(fontSizeDelta != null)) dart.assertFailed(null, L15, 287, 12, "fontSizeDelta != null");
      if (!(this.fontSize != null || fontSizeFactor === 1.0 && fontSizeDelta === 0.0)) dart.assertFailed(null, L15, 288, 12, "fontSize != null || (fontSizeFactor == 1.0 && fontSizeDelta == 0.0)");
      if (!(letterSpacingFactor != null)) dart.assertFailed(null, L15, 289, 12, "letterSpacingFactor != null");
      if (!(letterSpacingDelta != null)) dart.assertFailed(null, L15, 290, 12, "letterSpacingDelta != null");
      if (!(this.letterSpacing != null || letterSpacingFactor === 1.0 && letterSpacingDelta === 0.0)) dart.assertFailed(null, L15, 291, 12, "letterSpacing != null ||\n        (letterSpacingFactor == 1.0 && letterSpacingDelta == 0.0)");
      if (!(wordSpacingFactor != null)) dart.assertFailed(null, L15, 293, 12, "wordSpacingFactor != null");
      if (!(wordSpacingDelta != null)) dart.assertFailed(null, L15, 294, 12, "wordSpacingDelta != null");
      if (!(this.wordSpacing != null || wordSpacingFactor === 1.0 && wordSpacingDelta === 0.0)) dart.assertFailed(null, L15, 295, 12, "wordSpacing != null ||\n        (wordSpacingFactor == 1.0 && wordSpacingDelta == 0.0)");
      if (!(heightFactor != null)) dart.assertFailed(null, L15, 297, 12, "heightFactor != null");
      if (!(heightDelta != null)) dart.assertFailed(null, L15, 298, 12, "heightDelta != null");
      if (!(heightFactor != null || heightFactor === 1.0 && heightDelta === 0.0)) dart.assertFailed(null, L15, 299, 12, "heightFactor != null || (heightFactor == 1.0 && heightDelta == 0.0)");
      if (!(decoration != null)) dart.assertFailed(null, L15, 300, 12, "decoration != null");
      return new text_style.TextStyle.new({inherit: this.inherit, color: (t0 = color, t0 == null ? this.color : t0), font: (t0$ = font, t0$ == null ? this.font : t0$), fontNormal: (t0$0 = fontNormal, t0$0 == null ? this.fontNormal : t0$0), fontBold: (t0$1 = fontBold, t0$1 == null ? this.fontBold : t0$1), fontItalic: (t0$2 = fontItalic, t0$2 == null ? this.fontItalic : t0$2), fontBoldItalic: (t0$3 = fontBoldItalic, t0$3 == null ? this.fontBoldItalic : t0$3), fontSize: this.fontSize == null ? null : dart.notNull(this.fontSize) * dart.notNull(fontSizeFactor) + dart.notNull(fontSizeDelta), fontWeight: this.fontWeight, fontStyle: this.fontStyle, letterSpacing: this.letterSpacing == null ? null : dart.notNull(this.letterSpacing) * dart.notNull(letterSpacingFactor) + dart.notNull(letterSpacingDelta), wordSpacing: this.wordSpacing == null ? null : dart.notNull(this.wordSpacing) * dart.notNull(wordSpacingFactor) + dart.notNull(wordSpacingDelta), height: this.height == null ? null : dart.notNull(this.height) * dart.notNull(heightFactor) + dart.notNull(heightDelta), background: this.background, decoration: decoration});
    }
    merge(other) {
      if (other == null) {
        return this;
      }
      if (!dart.test(other.inherit)) {
        return other;
      }
      return this.copyWith({color: other.color, font: other.font, fontNormal: other.fontNormal, fontBold: other.fontBold, fontItalic: other.fontItalic, fontBoldItalic: other.fontBoldItalic, fontSize: other.fontSize, fontWeight: other.fontWeight, fontStyle: other.fontStyle, letterSpacing: other.letterSpacing, wordSpacing: other.wordSpacing, lineSpacing: other.lineSpacing, height: other.height, background: other.background, decoration: other.decoration, decorationColor: other.decorationColor, decorationStyle: other.decorationStyle, decorationThickness: other.decorationThickness, renderingMode: other.renderingMode});
    }
    get font() {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5, t0$6, t0$7, t0$8, t0$9;
      if (this.fontWeight != text_style.FontWeight.bold) {
        if (this.fontStyle != text_style.FontStyle.italic) {
          t0$0 = (t0$ = (t0 = this.fontNormal, t0 == null ? this.fontBold : t0), t0$ == null ? this.fontItalic : t0$);
          return t0$0 == null ? this.fontBoldItalic : t0$0;
        } else {
          t0$3 = (t0$2 = (t0$1 = this.fontItalic, t0$1 == null ? this.fontNormal : t0$1), t0$2 == null ? this.fontBold : t0$2);
          return t0$3 == null ? this.fontBoldItalic : t0$3;
        }
      } else {
        if (this.fontStyle != text_style.FontStyle.italic) {
          t0$6 = (t0$5 = (t0$4 = this.fontBold, t0$4 == null ? this.fontNormal : t0$4), t0$5 == null ? this.fontItalic : t0$5);
          return t0$6 == null ? this.fontBoldItalic : t0$6;
        } else {
          t0$9 = (t0$8 = (t0$7 = this.fontBoldItalic, t0$7 == null ? this.fontBold : t0$7), t0$8 == null ? this.fontItalic : t0$8);
          return t0$9 == null ? this.fontNormal : t0$9;
        }
      }
    }
    toString() {
      return "TextStyle(color:" + dart.str(this.color) + " font:" + dart.str(this.font) + " size:" + dart.str(this.fontSize) + " weight:" + dart.str(this.fontWeight) + " style:" + dart.str(this.fontStyle) + " letterSpacing:" + dart.str(this.letterSpacing) + " wordSpacing:" + dart.str(this.wordSpacing) + " lineSpacing:" + dart.str(this.lineSpacing) + " height:" + dart.str(this.height) + " background:" + dart.str(this.background) + " decoration:" + dart.str(this.decoration) + " decorationColor:" + dart.str(this.decorationColor) + " decorationStyle:" + dart.str(this.decorationStyle) + " decorationThickness:" + dart.str(this.decorationThickness) + ", renderingMode:" + dart.str(this.renderingMode) + ")";
    }
  };
  (text_style.TextStyle.new = function(opts) {
    let t0, t0$, t0$0, t0$1;
    let inherit = opts && 'inherit' in opts ? opts.inherit : true;
    let color = opts && 'color' in opts ? opts.color : null;
    let font = opts && 'font' in opts ? opts.font : null;
    let fontNormal = opts && 'fontNormal' in opts ? opts.fontNormal : null;
    let fontBold = opts && 'fontBold' in opts ? opts.fontBold : null;
    let fontItalic = opts && 'fontItalic' in opts ? opts.fontItalic : null;
    let fontBoldItalic = opts && 'fontBoldItalic' in opts ? opts.fontBoldItalic : null;
    let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
    let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
    let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
    let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
    let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
    let lineSpacing = opts && 'lineSpacing' in opts ? opts.lineSpacing : null;
    let height = opts && 'height' in opts ? opts.height : null;
    let background = opts && 'background' in opts ? opts.background : null;
    let decoration = opts && 'decoration' in opts ? opts.decoration : null;
    let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
    let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
    let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
    let renderingMode = opts && 'renderingMode' in opts ? opts.renderingMode : null;
    this[inherit$] = inherit;
    this[color$3] = color;
    this[fontSize$] = fontSize;
    this[fontWeight$] = fontWeight;
    this[fontStyle$] = fontStyle;
    this[letterSpacing$] = letterSpacing;
    this[wordSpacing$] = wordSpacing;
    this[lineSpacing$] = lineSpacing;
    this[height$] = height;
    this[background$] = background;
    this[decoration$2] = decoration;
    this[decorationColor$] = decorationColor;
    this[decorationStyle$] = decorationStyle;
    this[decorationThickness$] = decorationThickness;
    this[renderingMode$] = renderingMode;
    if (!(dart.test(inherit) || color != null)) dart.assertFailed(null, L15, 120, 16, "inherit || color != null");
    if (!(dart.test(inherit) || fontNormal != null)) dart.assertFailed(null, L15, 121, 16, "inherit || fontNormal != null");
    if (!(dart.test(inherit) || fontBold != null)) dart.assertFailed(null, L15, 122, 16, "inherit || fontBold != null");
    if (!(dart.test(inherit) || fontItalic != null)) dart.assertFailed(null, L15, 123, 16, "inherit || fontItalic != null");
    if (!(dart.test(inherit) || fontBoldItalic != null)) dart.assertFailed(null, L15, 124, 16, "inherit || fontBoldItalic != null");
    if (!(dart.test(inherit) || fontSize != null)) dart.assertFailed(null, L15, 125, 16, "inherit || fontSize != null");
    if (!(dart.test(inherit) || fontWeight != null)) dart.assertFailed(null, L15, 126, 16, "inherit || fontWeight != null");
    if (!(dart.test(inherit) || fontStyle != null)) dart.assertFailed(null, L15, 127, 16, "inherit || fontStyle != null");
    if (!(dart.test(inherit) || letterSpacing != null)) dart.assertFailed(null, L15, 128, 16, "inherit || letterSpacing != null");
    if (!(dart.test(inherit) || wordSpacing != null)) dart.assertFailed(null, L15, 129, 16, "inherit || wordSpacing != null");
    if (!(dart.test(inherit) || lineSpacing != null)) dart.assertFailed(null, L15, 130, 16, "inherit || lineSpacing != null");
    if (!(dart.test(inherit) || height != null)) dart.assertFailed(null, L15, 131, 16, "inherit || height != null");
    if (!(dart.test(inherit) || decoration != null)) dart.assertFailed(null, L15, 132, 16, "inherit || decoration != null");
    if (!(dart.test(inherit) || decorationStyle != null)) dart.assertFailed(null, L15, 133, 16, "inherit || decorationStyle != null");
    if (!(dart.test(inherit) || decorationThickness != null)) dart.assertFailed(null, L15, 134, 16, "inherit || decorationThickness != null");
    if (!(dart.test(inherit) || renderingMode != null)) dart.assertFailed(null, L15, 135, 16, "inherit || renderingMode != null");
    this[fontNormal$] = (t0 = fontNormal, t0 == null ? fontStyle != text_style.FontStyle.italic && fontWeight != text_style.FontWeight.bold ? font : null : t0);
    this[fontBold$] = (t0$ = fontBold, t0$ == null ? fontStyle != text_style.FontStyle.italic && fontWeight == text_style.FontWeight.bold ? font : null : t0$);
    this[fontItalic$] = (t0$0 = fontItalic, t0$0 == null ? fontStyle == text_style.FontStyle.italic && fontWeight != text_style.FontWeight.bold ? font : null : t0$0);
    this[fontBoldItalic$] = (t0$1 = fontBoldItalic, t0$1 == null ? fontStyle == text_style.FontStyle.italic && fontWeight == text_style.FontWeight.bold ? font : null : t0$1);
    ;
  }).prototype = text_style.TextStyle.prototype;
  dart.addTypeTests(text_style.TextStyle);
  dart.addTypeCaches(text_style.TextStyle);
  dart.setMethodSignature(text_style.TextStyle, () => ({
    __proto__: dart.getMethods(text_style.TextStyle.__proto__),
    copyWith: dart.fnType(dart.legacy(text_style.TextStyle), [], {background: dart.legacy(decoration$.BoxDecoration), color: dart.legacy(color.PdfColor), decoration: dart.legacy(text_style.TextDecoration), decorationColor: dart.legacy(color.PdfColor), decorationStyle: dart.legacy(text_style.TextDecorationStyle), decorationThickness: dart.legacy(core.double), font: dart.legacy(font$.Font), fontBold: dart.legacy(font$.Font), fontBoldItalic: dart.legacy(font$.Font), fontItalic: dart.legacy(font$.Font), fontNormal: dart.legacy(font$.Font), fontSize: dart.legacy(core.double), fontStyle: dart.legacy(text_style.FontStyle), fontWeight: dart.legacy(text_style.FontWeight), height: dart.legacy(core.double), letterSpacing: dart.legacy(core.double), lineSpacing: dart.legacy(core.double), renderingMode: dart.legacy(graphics.PdfTextRenderingMode), wordSpacing: dart.legacy(core.double)}, {}),
    apply: dart.fnType(dart.legacy(text_style.TextStyle), [], {color: dart.legacy(color.PdfColor), decoration: dart.legacy(text_style.TextDecoration), font: dart.legacy(font$.Font), fontBold: dart.legacy(font$.Font), fontBoldItalic: dart.legacy(font$.Font), fontItalic: dart.legacy(font$.Font), fontNormal: dart.legacy(font$.Font), fontSizeDelta: dart.legacy(core.double), fontSizeFactor: dart.legacy(core.double), heightDelta: dart.legacy(core.double), heightFactor: dart.legacy(core.double), letterSpacingDelta: dart.legacy(core.double), letterSpacingFactor: dart.legacy(core.double), wordSpacingDelta: dart.legacy(core.double), wordSpacingFactor: dart.legacy(core.double)}, {}),
    merge: dart.fnType(dart.legacy(text_style.TextStyle), [dart.legacy(text_style.TextStyle)]),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setGetterSignature(text_style.TextStyle, () => ({
    __proto__: dart.getGetters(text_style.TextStyle.__proto__),
    font: dart.legacy(font$.Font)
  }));
  dart.setLibraryUri(text_style.TextStyle, L14);
  dart.setFieldSignature(text_style.TextStyle, () => ({
    __proto__: dart.getFields(text_style.TextStyle.__proto__),
    inherit: dart.finalFieldType(dart.legacy(core.bool)),
    color: dart.finalFieldType(dart.legacy(color.PdfColor)),
    fontNormal: dart.finalFieldType(dart.legacy(font$.Font)),
    fontBold: dart.finalFieldType(dart.legacy(font$.Font)),
    fontItalic: dart.finalFieldType(dart.legacy(font$.Font)),
    fontBoldItalic: dart.finalFieldType(dart.legacy(font$.Font)),
    fontSize: dart.finalFieldType(dart.legacy(core.double)),
    fontWeight: dart.finalFieldType(dart.legacy(text_style.FontWeight)),
    fontStyle: dart.finalFieldType(dart.legacy(text_style.FontStyle)),
    letterSpacing: dart.finalFieldType(dart.legacy(core.double)),
    lineSpacing: dart.finalFieldType(dart.legacy(core.double)),
    wordSpacing: dart.finalFieldType(dart.legacy(core.double)),
    height: dart.finalFieldType(dart.legacy(core.double)),
    background: dart.finalFieldType(dart.legacy(decoration$.BoxDecoration)),
    decoration: dart.finalFieldType(dart.legacy(text_style.TextDecoration)),
    decorationColor: dart.finalFieldType(dart.legacy(color.PdfColor)),
    decorationStyle: dart.finalFieldType(dart.legacy(text_style.TextDecorationStyle)),
    decorationThickness: dart.finalFieldType(dart.legacy(core.double)),
    renderingMode: dart.finalFieldType(dart.legacy(graphics.PdfTextRenderingMode))
  }));
  dart.defineExtensionMethods(text_style.TextStyle, ['toString']);
  dart.defineLazy(text_style.TextStyle, {
    /*text_style.TextStyle._defaultFontSize*/get _defaultFontSize() {
      return 12;
    }
  }, true);
  var textDirection$0 = dart.privateName(text_style, "InheritedDirectionality.textDirection");
  text_style.InheritedDirectionality = class InheritedDirectionality extends widget$.Inherited {
    get textDirection() {
      return this[textDirection$0];
    }
    set textDirection(value) {
      super.textDirection = value;
    }
  };
  (text_style.InheritedDirectionality.new = function(textDirection) {
    this[textDirection$0] = textDirection;
    text_style.InheritedDirectionality.__proto__.new.call(this);
    ;
  }).prototype = text_style.InheritedDirectionality.prototype;
  dart.addTypeTests(text_style.InheritedDirectionality);
  dart.addTypeCaches(text_style.InheritedDirectionality);
  dart.setLibraryUri(text_style.InheritedDirectionality, L14);
  dart.setFieldSignature(text_style.InheritedDirectionality, () => ({
    __proto__: dart.getFields(text_style.InheritedDirectionality.__proto__),
    textDirection: dart.finalFieldType(dart.legacy(text$.TextDirection))
  }));
  var child$3 = dart.privateName(text_style, "Directionality.child");
  var textDirection$1 = dart.privateName(text_style, "Directionality.textDirection");
  text_style.Directionality = class Directionality extends widget$.StatelessWidget {
    get child() {
      return this[child$3];
    }
    set child(value) {
      super.child = value;
    }
    get textDirection() {
      return this[textDirection$1];
    }
    set textDirection(value) {
      super.textDirection = value;
    }
    static of(context) {
      let t0, t0$;
      let inherited = InheritedDirectionalityL().as(context.inherited[$_get](dart.wrapType(InheritedDirectionalityL())));
      t0$ = (t0 = inherited, t0 == null ? null : t0.textDirection);
      return t0$ == null ? text$.TextDirection.ltr : t0$;
    }
    build(context) {
      return new widget$.InheritedWidget.new({build: dart.fn(context => this.child, ContextLToWidgetL()), inherited: new text_style.InheritedDirectionality.new(this.textDirection)});
    }
  };
  (text_style.Directionality.new = function(opts) {
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    let child = opts && 'child' in opts ? opts.child : null;
    this[textDirection$1] = textDirection;
    this[child$3] = child;
    if (!(textDirection != null)) dart.assertFailed(null, L15, 400, 16, "textDirection != null");
    if (!(child != null)) dart.assertFailed(null, L15, 401, 16, "child != null");
    text_style.Directionality.__proto__.new.call(this);
    ;
  }).prototype = text_style.Directionality.prototype;
  dart.addTypeTests(text_style.Directionality);
  dart.addTypeCaches(text_style.Directionality);
  dart.setMethodSignature(text_style.Directionality, () => ({
    __proto__: dart.getMethods(text_style.Directionality.__proto__),
    build: dart.fnType(dart.legacy(widget$.Widget), [dart.legacy(widget$.Context)])
  }));
  dart.setLibraryUri(text_style.Directionality, L14);
  dart.setFieldSignature(text_style.Directionality, () => ({
    __proto__: dart.getFields(text_style.Directionality.__proto__),
    child: dart.finalFieldType(dart.legacy(widget$.Widget)),
    textDirection: dart.finalFieldType(dart.legacy(text$.TextDirection))
  }));
  var C51;
  var C52;
  var C53;
  var C54;
  var C55;
  text$.TextAlign = class TextAlign extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (text$.TextAlign.new = function(index, _name) {
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = text$.TextAlign.prototype;
  dart.addTypeTests(text$.TextAlign);
  dart.addTypeCaches(text$.TextAlign);
  dart.setMethodSignature(text$.TextAlign, () => ({
    __proto__: dart.getMethods(text$.TextAlign.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(text$.TextAlign, L16);
  dart.setFieldSignature(text$.TextAlign, () => ({
    __proto__: dart.getFields(text$.TextAlign.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$0]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(text$.TextAlign, ['toString']);
  text$.TextAlign.left = C51 || CT.C51;
  text$.TextAlign.right = C52 || CT.C52;
  text$.TextAlign.center = C53 || CT.C53;
  text$.TextAlign.justify = C54 || CT.C54;
  text$.TextAlign.values = C55 || CT.C55;
  var C56;
  text$.TextDirection = class TextDirection extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (text$.TextDirection.new = function(index, _name) {
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = text$.TextDirection.prototype;
  dart.addTypeTests(text$.TextDirection);
  dart.addTypeCaches(text$.TextDirection);
  dart.setMethodSignature(text$.TextDirection, () => ({
    __proto__: dart.getMethods(text$.TextDirection.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(text$.TextDirection, L16);
  dart.setFieldSignature(text$.TextDirection, () => ({
    __proto__: dart.getFields(text$.TextDirection.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$0]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(text$.TextDirection, ['toString']);
  text$.TextDirection.ltr = C4 || CT.C4;
  text$.TextDirection.rtl = C3 || CT.C3;
  text$.TextDirection.values = C56 || CT.C56;
  var offset = dart.privateName(text$, "_Span.offset");
  var left = dart.privateName(text$, "_Span.left");
  var top = dart.privateName(text$, "_Span.top");
  var width = dart.privateName(text$, "_Span.width");
  var height = dart.privateName(text$, "_Span.height");
  text$._Span = class _Span extends core.Object {
    get offset() {
      return this[offset];
    }
    set offset(value) {
      this[offset] = value;
    }
    get left() {
      return this[left];
    }
    set left(value) {
      this[left] = value;
    }
    get top() {
      return this[top];
    }
    set top(value) {
      this[top] = value;
    }
    get width() {
      return this[width];
    }
    set width(value) {
      this[width] = value;
    }
    get height() {
      return this[height];
    }
    set height(value) {
      this[height] = value;
    }
    toString() {
      return "Span \"offset:" + dart.str(this.offset);
    }
    debugPaint(context, textScaleFactor, globalBox) {
    }
  };
  (text$._Span.new = function(style) {
    this[offset] = point$.PdfPoint.zero;
    this[left] = null;
    this[top] = null;
    this[width] = null;
    this[height] = null;
    this.style = style;
    ;
  }).prototype = text$._Span.prototype;
  dart.addTypeTests(text$._Span);
  dart.addTypeCaches(text$._Span);
  dart.setMethodSignature(text$._Span, () => ({
    __proto__: dart.getMethods(text$._Span.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    debugPaint: dart.fnType(dart.void, [dart.legacy(widget$.Context), dart.legacy(core.double), dart.legacy(rect$.PdfRect)])
  }));
  dart.setLibraryUri(text$._Span, L16);
  dart.setFieldSignature(text$._Span, () => ({
    __proto__: dart.getFields(text$._Span.__proto__),
    style: dart.finalFieldType(dart.legacy(text_style.TextStyle)),
    offset: dart.fieldType(dart.legacy(point$.PdfPoint)),
    left: dart.fieldType(dart.legacy(core.double)),
    top: dart.fieldType(dart.legacy(core.double)),
    width: dart.fieldType(dart.legacy(core.double)),
    height: dart.fieldType(dart.legacy(core.double))
  }));
  dart.defineExtensionMethods(text$._Span, ['toString']);
  var _box = dart.privateName(text$, "_box");
  var _getBox = dart.privateName(text$, "_getBox");
  text$._TextDecoration = class _TextDecoration extends core.Object {
    [_getBox](spans) {
      if (this[_box] != null) {
        return this[_box];
      }
      let x1 = dart.notNull(spans[$_get](this.startSpan).offset.x) + dart.notNull(spans[$_get](this.startSpan).left);
      let x2 = dart.notNull(spans[$_get](this.endSpan).offset.x) + dart.notNull(spans[$_get](this.endSpan).left) + dart.notNull(spans[$_get](this.endSpan).width);
      let y1 = dart.notNull(spans[$_get](this.startSpan).offset.y) + dart.notNull(spans[$_get](this.startSpan).top);
      let y2 = y1 + dart.notNull(spans[$_get](this.startSpan).height);
      for (let n = dart.notNull(this.startSpan) + 1; n <= dart.notNull(this.endSpan); n = n + 1) {
        let ny1 = dart.notNull(spans[$_get](n).offset.y) + dart.notNull(spans[$_get](n).top);
        let ny2 = ny1 + dart.notNull(spans[$_get](n).height);
        y1 = math.min(doubleL(), y1, ny1);
        y2 = math.max(doubleL(), y2, ny2);
      }
      this[_box] = rect$.PdfRect.fromLTRB(x1, y1, x2, y2);
      return this[_box];
    }
    copyWith(opts) {
      let t0;
      let endSpan = opts && 'endSpan' in opts ? opts.endSpan : null;
      return new text$._TextDecoration.new(this.style, this.annotation, this.startSpan, (t0 = endSpan, t0 == null ? this.endSpan : t0));
    }
    backgroundPaint(context, textScaleFactor, globalBox, spans) {
      let box = this[_getBox](spans);
      if (this.annotation != null) {
        let spanBox = new rect$.PdfRect.new(dart.notNull(globalBox.x) + dart.notNull(box.left), dart.notNull(globalBox.top) + dart.notNull(box.bottom), box.width, box.height);
        this.annotation.build(context, spanBox);
      }
      if (this.style.background != null) {
        let boundingBox = new rect$.PdfRect.new(dart.notNull(globalBox.x) + dart.notNull(box.left), dart.notNull(globalBox.top) + dart.notNull(box.bottom), box.width, box.height);
        this.style.background.paint(context, boundingBox);
        context.canvas.setFillColor(this.style.color);
      }
    }
    foregroundPaint(context, textScaleFactor, globalBox, spans) {
      let t1, t0;
      if (this.style.decoration == null) {
        return;
      }
      let box = this[_getBox](spans);
      let font = this.style.font.getFont(context);
      let space = -0.15 * dart.notNull(this.style.fontSize) * dart.notNull(textScaleFactor) * dart.notNull(this.style.decorationThickness);
      t0 = context.canvas;
      (() => {
        t0.setStrokeColor((t1 = this.style.decorationColor, t1 == null ? this.style.color : t1));
        t0.setLineWidth(dart.notNull(this.style.decorationThickness) * dart.notNull(this.style.fontSize) * dart.notNull(textScaleFactor) * 0.05);
        return t0;
      })();
      if (dart.test(this.style.decoration.contains(text_style.TextDecoration.underline))) {
        let base = -dart.notNull(font.descent) * dart.notNull(this.style.fontSize) * dart.notNull(textScaleFactor) / 2;
        context.canvas.drawLine(dart.notNull(globalBox.x) + dart.notNull(box.left), dart.notNull(globalBox.top) + dart.notNull(box.bottom) + base, dart.notNull(globalBox.x) + dart.notNull(box.right), dart.notNull(globalBox.top) + dart.notNull(box.bottom) + base);
        if (this.style.decorationStyle == text_style.TextDecorationStyle.double) {
          context.canvas.drawLine(dart.notNull(globalBox.x) + dart.notNull(box.left), dart.notNull(globalBox.top) + dart.notNull(box.bottom) + base + space, dart.notNull(globalBox.x) + dart.notNull(box.right), dart.notNull(globalBox.top) + dart.notNull(box.bottom) + base + space);
        }
        context.canvas.strokePath();
      }
      if (dart.test(this.style.decoration.contains(text_style.TextDecoration.overline))) {
        let base = dart.notNull(this.style.fontSize) * dart.notNull(textScaleFactor);
        context.canvas.drawLine(dart.notNull(globalBox.x) + dart.notNull(box.left), dart.notNull(globalBox.top) + dart.notNull(box.bottom) + base, dart.notNull(globalBox.x) + dart.notNull(box.right), dart.notNull(globalBox.top) + dart.notNull(box.bottom) + base);
        if (this.style.decorationStyle == text_style.TextDecorationStyle.double) {
          context.canvas.drawLine(dart.notNull(globalBox.x) + dart.notNull(box.left), dart.notNull(globalBox.top) + dart.notNull(box.bottom) + base - space, dart.notNull(globalBox.x) + dart.notNull(box.right), dart.notNull(globalBox.top) + dart.notNull(box.bottom) + base - space);
        }
        context.canvas.strokePath();
      }
      if (dart.test(this.style.decoration.contains(text_style.TextDecoration.lineThrough))) {
        let base = (1 - dart.notNull(font.descent)) * dart.notNull(this.style.fontSize) * dart.notNull(textScaleFactor) / 2;
        context.canvas.drawLine(dart.notNull(globalBox.x) + dart.notNull(box.left), dart.notNull(globalBox.top) + dart.notNull(box.bottom) + base, dart.notNull(globalBox.x) + dart.notNull(box.right), dart.notNull(globalBox.top) + dart.notNull(box.bottom) + base);
        if (this.style.decorationStyle == text_style.TextDecorationStyle.double) {
          context.canvas.drawLine(dart.notNull(globalBox.x) + dart.notNull(box.left), dart.notNull(globalBox.top) + dart.notNull(box.bottom) + base + space, dart.notNull(globalBox.x) + dart.notNull(box.right), dart.notNull(globalBox.top) + dart.notNull(box.bottom) + base + space);
        }
        context.canvas.strokePath();
      }
    }
    debugPaint(context, textScaleFactor, globalBox, spans) {
      let t0;
      let box = this[_getBox](spans);
      t0 = context.canvas;
      (() => {
        t0.setLineWidth(0.5);
        t0.drawRect(dart.notNull(globalBox.x) + dart.notNull(box.x), dart.notNull(globalBox.top) + dart.notNull(box.y), box.width, box.height);
        t0.setStrokeColor(colors.PdfColors.yellow);
        t0.strokePath();
        return t0;
      })();
    }
  };
  (text$._TextDecoration.new = function(style, annotation, startSpan, endSpan) {
    this[_box] = null;
    this.style = style;
    this.annotation = annotation;
    this.startSpan = startSpan;
    this.endSpan = endSpan;
    if (!(dart.notNull(startSpan) <= dart.notNull(endSpan))) dart.assertFailed(null, L17, 66, 16, "startSpan <= endSpan");
    if (!(style != null)) dart.assertFailed(null, L17, 67, 16, "style != null");
    ;
  }).prototype = text$._TextDecoration.prototype;
  dart.addTypeTests(text$._TextDecoration);
  dart.addTypeCaches(text$._TextDecoration);
  dart.setMethodSignature(text$._TextDecoration, () => ({
    __proto__: dart.getMethods(text$._TextDecoration.__proto__),
    [_getBox]: dart.fnType(dart.legacy(rect$.PdfRect), [dart.legacy(core.List$(dart.legacy(text$._Span)))]),
    copyWith: dart.fnType(dart.legacy(text$._TextDecoration), [], {endSpan: dart.legacy(core.int)}, {}),
    backgroundPaint: dart.fnType(dart.void, [dart.legacy(widget$.Context), dart.legacy(core.double), dart.legacy(rect$.PdfRect), dart.legacy(core.List$(dart.legacy(text$._Span)))]),
    foregroundPaint: dart.fnType(dart.void, [dart.legacy(widget$.Context), dart.legacy(core.double), dart.legacy(rect$.PdfRect), dart.legacy(core.List$(dart.legacy(text$._Span)))]),
    debugPaint: dart.fnType(dart.void, [dart.legacy(widget$.Context), dart.legacy(core.double), dart.legacy(rect$.PdfRect), dart.legacy(core.List$(dart.legacy(text$._Span)))])
  }));
  dart.setLibraryUri(text$._TextDecoration, L16);
  dart.setFieldSignature(text$._TextDecoration, () => ({
    __proto__: dart.getFields(text$._TextDecoration.__proto__),
    style: dart.finalFieldType(dart.legacy(text_style.TextStyle)),
    annotation: dart.finalFieldType(dart.legacy(annotations.AnnotationBuilder)),
    startSpan: dart.finalFieldType(dart.legacy(core.int)),
    endSpan: dart.finalFieldType(dart.legacy(core.int)),
    [_box]: dart.fieldType(dart.legacy(rect$.PdfRect))
  }));
  dart.defineLazy(text$._TextDecoration, {
    /*text$._TextDecoration._space*/get _space() {
      return -0.15;
    }
  }, true);
  text$._Word = class _Word extends text$._Span {
    get left() {
      return this.metrics.left;
    }
    set left(value) {
      super.left = value;
    }
    get top() {
      return this.metrics.descent;
    }
    set top(value) {
      super.top = value;
    }
    get width() {
      return this.metrics.width;
    }
    set width(value) {
      super.width = value;
    }
    get height() {
      return this.metrics.maxHeight;
    }
    set height(value) {
      super.height = value;
    }
    toString() {
      return "Word \"" + dart.str(this.text) + "\" offset:" + dart.str(this.offset) + " metrics:" + dart.str(this.metrics) + " style:" + dart.str(this.style);
    }
    paint(context, style, textScaleFactor, point) {
      context.canvas.drawString(style.font.getFont(context), dart.notNull(style.fontSize) * dart.notNull(textScaleFactor), this.text, dart.notNull(point.x) + dart.notNull(this.offset.x), dart.notNull(point.y) + dart.notNull(this.offset.y), {mode: style.renderingMode, charSpace: style.letterSpacing});
    }
    debugPaint(context, textScaleFactor, globalBox) {
      let t0;
      t0 = context.canvas;
      (() => {
        t0.setLineWidth(0.5);
        t0.drawRect(dart.notNull(globalBox.x) + dart.notNull(this.offset.x) + dart.notNull(this.metrics.left), dart.notNull(globalBox.top) + dart.notNull(this.offset.y) + dart.notNull(this.metrics.top), this.metrics.width, this.metrics.height);
        t0.setStrokeColor(colors.PdfColors.orange);
        t0.strokePath();
        t0.drawLine(dart.notNull(globalBox.x) + dart.notNull(this.offset.x) - 5, dart.notNull(globalBox.top) + dart.notNull(this.offset.y), dart.notNull(globalBox.x) + dart.notNull(this.offset.x) + dart.notNull(this.metrics.right) + 5, dart.notNull(globalBox.top) + dart.notNull(this.offset.y));
        t0.setStrokeColor(colors.PdfColors.deepPurple);
        t0.strokePath();
        return t0;
      })();
    }
  };
  (text$._Word.new = function(text, style, metrics) {
    this.text = text;
    this.metrics = metrics;
    text$._Word.__proto__.new.call(this, style);
    ;
  }).prototype = text$._Word.prototype;
  dart.addTypeTests(text$._Word);
  dart.addTypeCaches(text$._Word);
  dart.setMethodSignature(text$._Word, () => ({
    __proto__: dart.getMethods(text$._Word.__proto__),
    paint: dart.fnType(dart.void, [dart.legacy(widget$.Context), dart.legacy(text_style.TextStyle), dart.legacy(core.double), dart.legacy(point$.PdfPoint)])
  }));
  dart.setGetterSignature(text$._Word, () => ({
    __proto__: dart.getGetters(text$._Word.__proto__),
    left: dart.legacy(core.double),
    top: dart.legacy(core.double),
    width: dart.legacy(core.double),
    height: dart.legacy(core.double)
  }));
  dart.setLibraryUri(text$._Word, L16);
  dart.setFieldSignature(text$._Word, () => ({
    __proto__: dart.getFields(text$._Word.__proto__),
    text: dart.finalFieldType(dart.legacy(core.String)),
    metrics: dart.finalFieldType(dart.legacy(font_metrics.PdfFontMetrics))
  }));
  dart.defineExtensionMethods(text$._Word, ['toString']);
  text$._WidgetSpan = class _WidgetSpan extends text$._Span {
    get left() {
      return 0.0;
    }
    set left(value) {
      super.left = value;
    }
    get top() {
      return 0.0;
    }
    set top(value) {
      super.top = value;
    }
    get width() {
      return this.widget.box.width;
    }
    set width(value) {
      super.width = value;
    }
    get height() {
      return this.widget.box.height;
    }
    set height(value) {
      super.height = value;
    }
    get offset() {
      return this.widget.box.offset;
    }
    set offset(value) {
      this.widget.box = rect$.PdfRect.fromPoints(value, this.widget.box.size);
    }
    toString() {
      return "Widget \"" + dart.str(this.widget) + "\" offset:" + dart.str(this.offset);
    }
    paint(context, style, textScaleFactor, point) {
      this.widget.box = rect$.PdfRect.fromPoints(new point$.PdfPoint.new(dart.notNull(point.x) + dart.notNull(this.widget.box.offset.x), dart.notNull(point.y) + dart.notNull(this.widget.box.offset.y)), this.widget.box.size);
      this.widget.paint(context);
    }
    debugPaint(context, textScaleFactor, globalBox) {
      let t0;
      t0 = context.canvas;
      (() => {
        t0.setLineWidth(0.5);
        t0.drawRect(dart.notNull(globalBox.x) + dart.notNull(this.offset.x), dart.notNull(globalBox.top) + dart.notNull(this.offset.y), this.width, this.height);
        t0.setStrokeColor(colors.PdfColors.orange);
        t0.strokePath();
        return t0;
      })();
    }
  };
  (text$._WidgetSpan.new = function(widget, style) {
    this.widget = widget;
    if (!(widget != null)) dart.assertFailed(null, L17, 304, 16, "widget != null");
    if (!(style != null)) dart.assertFailed(null, L17, 305, 16, "style != null");
    text$._WidgetSpan.__proto__.new.call(this, style);
    ;
  }).prototype = text$._WidgetSpan.prototype;
  dart.addTypeTests(text$._WidgetSpan);
  dart.addTypeCaches(text$._WidgetSpan);
  dart.setMethodSignature(text$._WidgetSpan, () => ({
    __proto__: dart.getMethods(text$._WidgetSpan.__proto__),
    paint: dart.fnType(dart.void, [dart.legacy(widget$.Context), dart.legacy(text_style.TextStyle), dart.legacy(core.double), dart.legacy(point$.PdfPoint)])
  }));
  dart.setGetterSignature(text$._WidgetSpan, () => ({
    __proto__: dart.getGetters(text$._WidgetSpan.__proto__),
    left: dart.legacy(core.double),
    top: dart.legacy(core.double),
    width: dart.legacy(core.double),
    height: dart.legacy(core.double),
    offset: dart.legacy(point$.PdfPoint)
  }));
  dart.setSetterSignature(text$._WidgetSpan, () => ({
    __proto__: dart.getSetters(text$._WidgetSpan.__proto__),
    offset: dart.legacy(point$.PdfPoint)
  }));
  dart.setLibraryUri(text$._WidgetSpan, L16);
  dart.setFieldSignature(text$._WidgetSpan, () => ({
    __proto__: dart.getFields(text$._WidgetSpan.__proto__),
    widget: dart.finalFieldType(dart.legacy(widget$.Widget))
  }));
  dart.defineExtensionMethods(text$._WidgetSpan, ['toString']);
  var style$0 = dart.privateName(text$, "InlineSpan.style");
  var baseline$ = dart.privateName(text$, "InlineSpan.baseline");
  var annotation$ = dart.privateName(text$, "InlineSpan.annotation");
  text$.InlineSpan = class InlineSpan extends core.Object {
    get style() {
      return this[style$0];
    }
    set style(value) {
      super.style = value;
    }
    get baseline() {
      return this[baseline$];
    }
    set baseline(value) {
      super.baseline = value;
    }
    get annotation() {
      return this[annotation$];
    }
    set annotation(value) {
      super.annotation = value;
    }
    toPlainText() {
      let buffer = new core.StringBuffer.new();
      this.visitChildren(dart.fn((span, style) => {
        if (TextSpanL().is(span)) {
          buffer.write(span.text);
        }
        return true;
      }, InlineSpanLAndTextStyleLToboolL()), null);
      return buffer.toString();
    }
  };
  (text$.InlineSpan.new = function(opts) {
    let style = opts && 'style' in opts ? opts.style : null;
    let baseline = opts && 'baseline' in opts ? opts.baseline : null;
    let annotation = opts && 'annotation' in opts ? opts.annotation : null;
    this[style$0] = style;
    this[baseline$] = baseline;
    this[annotation$] = annotation;
    ;
  }).prototype = text$.InlineSpan.prototype;
  dart.addTypeTests(text$.InlineSpan);
  dart.addTypeCaches(text$.InlineSpan);
  dart.setMethodSignature(text$.InlineSpan, () => ({
    __proto__: dart.getMethods(text$.InlineSpan.__proto__),
    toPlainText: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(text$.InlineSpan, L16);
  dart.setFieldSignature(text$.InlineSpan, () => ({
    __proto__: dart.getFields(text$.InlineSpan.__proto__),
    style: dart.finalFieldType(dart.legacy(text_style.TextStyle)),
    baseline: dart.finalFieldType(dart.legacy(core.double)),
    annotation: dart.finalFieldType(dart.legacy(annotations.AnnotationBuilder))
  }));
  var child$4 = dart.privateName(text$, "WidgetSpan.child");
  text$.WidgetSpan = class WidgetSpan extends text$.InlineSpan {
    get child() {
      return this[child$4];
    }
    set child(value) {
      super.child = value;
    }
    visitChildren(visitor, parentStyle) {
      let t0;
      let _style = (t0 = parentStyle, t0 == null ? null : t0.merge(this.style));
      if (this.child != null) {
        if (!dart.test(visitor(this, _style))) {
          return false;
        }
      }
      return true;
    }
  };
  (text$.WidgetSpan.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    let baseline = opts && 'baseline' in opts ? opts.baseline : 0;
    let style = opts && 'style' in opts ? opts.style : null;
    let annotation = opts && 'annotation' in opts ? opts.annotation : null;
    this[child$4] = child;
    if (!(child != null)) dart.assertFailed(null, L17, 397, 16, "child != null");
    text$.WidgetSpan.__proto__.new.call(this, {style: style, baseline: baseline, annotation: annotation});
    ;
  }).prototype = text$.WidgetSpan.prototype;
  dart.addTypeTests(text$.WidgetSpan);
  dart.addTypeCaches(text$.WidgetSpan);
  dart.setMethodSignature(text$.WidgetSpan, () => ({
    __proto__: dart.getMethods(text$.WidgetSpan.__proto__),
    visitChildren: dart.fnType(dart.legacy(core.bool), [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(text$.InlineSpan), dart.legacy(text_style.TextStyle)])), dart.legacy(text_style.TextStyle)])
  }));
  dart.setLibraryUri(text$.WidgetSpan, L16);
  dart.setFieldSignature(text$.WidgetSpan, () => ({
    __proto__: dart.getFields(text$.WidgetSpan.__proto__),
    child: dart.finalFieldType(dart.legacy(widget$.Widget))
  }));
  var text$0 = dart.privateName(text$, "TextSpan.text");
  var children$ = dart.privateName(text$, "TextSpan.children");
  text$.TextSpan = class TextSpan extends text$.InlineSpan {
    get text() {
      return this[text$0];
    }
    set text(value) {
      super.text = value;
    }
    get children() {
      return this[children$];
    }
    set children(value) {
      super.children = value;
    }
    visitChildren(visitor, parentStyle) {
      let t0;
      let _style = (t0 = parentStyle, t0 == null ? null : t0.merge(this.style));
      if (this.text != null) {
        if (!dart.test(visitor(this, _style))) {
          return false;
        }
      }
      if (this.children != null) {
        for (let child of this.children) {
          if (!dart.test(child.visitChildren(visitor, _style))) {
            return false;
          }
        }
      }
      return true;
    }
  };
  (text$.TextSpan.new = function(opts) {
    let style = opts && 'style' in opts ? opts.style : null;
    let text = opts && 'text' in opts ? opts.text : null;
    let baseline = opts && 'baseline' in opts ? opts.baseline : 0;
    let children = opts && 'children' in opts ? opts.children : null;
    let annotation = opts && 'annotation' in opts ? opts.annotation : null;
    this[text$0] = text;
    this[children$] = children;
    text$.TextSpan.__proto__.new.call(this, {style: style, baseline: baseline, annotation: annotation});
    ;
  }).prototype = text$.TextSpan.prototype;
  dart.addTypeTests(text$.TextSpan);
  dart.addTypeCaches(text$.TextSpan);
  dart.setMethodSignature(text$.TextSpan, () => ({
    __proto__: dart.getMethods(text$.TextSpan.__proto__),
    visitChildren: dart.fnType(dart.legacy(core.bool), [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(text$.InlineSpan), dart.legacy(text_style.TextStyle)])), dart.legacy(text_style.TextStyle)])
  }));
  dart.setLibraryUri(text$.TextSpan, L16);
  dart.setFieldSignature(text$.TextSpan, () => ({
    __proto__: dart.getFields(text$.TextSpan.__proto__),
    text: dart.finalFieldType(dart.legacy(core.String)),
    children: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(text$.InlineSpan))))
  }));
  var _spans = dart.privateName(text$, "_spans");
  var _decorations = dart.privateName(text$, "_decorations");
  var _textAlign = dart.privateName(text$, "_textAlign");
  var _softWrap = dart.privateName(text$, "_softWrap");
  var _maxLines = dart.privateName(text$, "_maxLines");
  var _realignLine = dart.privateName(text$, "_realignLine");
  var _appendDecoration = dart.privateName(text$, "_appendDecoration");
  var text$1 = dart.privateName(text$, "RichText.text");
  var textDirection$2 = dart.privateName(text$, "RichText.textDirection");
  var textScaleFactor$ = dart.privateName(text$, "RichText.textScaleFactor");
  var tightBounds$ = dart.privateName(text$, "RichText.tightBounds");
  text$.RichText = class RichText extends widget$.Widget {
    get text() {
      return this[text$1];
    }
    set text(value) {
      super.text = value;
    }
    get textDirection() {
      return this[textDirection$2];
    }
    set textDirection(value) {
      super.textDirection = value;
    }
    get textScaleFactor() {
      return this[textScaleFactor$];
    }
    set textScaleFactor(value) {
      super.textScaleFactor = value;
    }
    get tightBounds() {
      return this[tightBounds$];
    }
    set tightBounds(value) {
      super.tightBounds = value;
    }
    get textAlign() {
      return this[_textAlign];
    }
    get softWrap() {
      return this[_softWrap];
    }
    get maxLines() {
      return this[_maxLines];
    }
    [_realignLine](spans, decorations, totalWidth, wordsWidth, last, baseline, textDirection) {
      let delta = 0.0;
      switch (this.textAlign) {
        case C51 || CT.C51:
        {
          break;
        }
        case C52 || CT.C52:
        {
          delta = dart.notNull(totalWidth) - dart.notNull(wordsWidth);
          break;
        }
        case C53 || CT.C53:
        {
          delta = (dart.notNull(totalWidth) - dart.notNull(wordsWidth)) / 2.0;
          break;
        }
        case C54 || CT.C54:
        {
          if (dart.test(last)) {
            totalWidth = wordsWidth;
            break;
          }
          delta = (dart.notNull(totalWidth) - dart.notNull(wordsWidth)) / (dart.notNull(spans[$length]) - 1);
          let x = 0.0;
          for (let span of spans) {
            span.offset = span.offset.translate(x, -dart.notNull(baseline));
            x = x + delta;
          }
          return totalWidth;
        }
      }
      if (textDirection == text$.TextDirection.rtl) {
        for (let span of spans) {
          span.offset = new point$.PdfPoint.new(dart.notNull(totalWidth) - (dart.notNull(span.offset.x) + dart.notNull(span.width)) - delta, dart.notNull(span.offset.y) - dart.notNull(baseline));
        }
        return totalWidth;
      }
      for (let span of spans) {
        span.offset = span.offset.translate(delta, -dart.notNull(baseline));
      }
      return totalWidth;
    }
    [_appendDecoration](append, td) {
      if (dart.test(append) && dart.test(this[_decorations][$isNotEmpty])) {
        let last = this[_decorations][$last];
        if (dart.equals(last.style, td.style) && dart.equals(last.annotation, td.annotation)) {
          this[_decorations][$_set](dart.notNull(this[_decorations][$length]) - 1, last.copyWith({endSpan: td.endSpan}));
          return;
        }
      }
      this[_decorations][$add](td);
    }
    layout(context, constraints, opts) {
      let t0;
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      this[_spans][$clear]();
      this[_decorations][$clear]();
      let theme = theme$.Theme.of(context);
      let defaultstyle = theme.defaultTextStyle;
      this[_softWrap] == null ? this[_softWrap] = theme.softWrap : null;
      this[_maxLines] == null ? this[_maxLines] = theme.maxLines : null;
      this[_textAlign] == null ? this[_textAlign] = theme.textAlign : null;
      let _textDirection = (t0 = this.textDirection, t0 == null ? text_style.Directionality.of(context) : t0);
      let constraintWidth = dart.test(constraints.hasBoundedWidth) ? constraints.maxWidth : constraints.constrainWidth();
      let constraintHeight = dart.test(constraints.hasBoundedHeight) ? constraints.maxHeight : constraints.constrainHeight();
      let offsetX = 0.0;
      let offsetY = 0.0;
      let width = 0.0;
      let top = null;
      let bottom = null;
      let lines = 1;
      let spanCount = 0;
      let spanStart = 0;
      let decorationStart = 0;
      this.text.visitChildren(dart.fn((span, style) => {
        let t0, t0$, t0$0, t0$1;
        if (TextSpanL().is(span)) {
          if (span.text == null) {
            return true;
          }
          let font = style.font.getFont(context);
          let space = font.stringMetrics(" ")['*'](dart.notNull(style.fontSize) * dart.notNull(this.textScaleFactor));
          let spanLines = (_textDirection == text$.TextDirection.rtl ? arabic.PdfArabic.convert(span.text) : span.text)[$split]("\n");
          for (let line = 0; line < dart.notNull(spanLines[$length]); line = line + 1) {
            for (let word of spanLines[$_get](line)[$split](core.RegExp.new("\\s"))) {
              if (word[$isEmpty]) {
                offsetX = offsetX + (dart.notNull(space.advanceWidth) * dart.notNull(style.wordSpacing) + dart.notNull(style.letterSpacing));
                continue;
              }
              let metrics = font.stringMetrics(word, {letterSpacing: dart.notNull(style.letterSpacing) / (dart.notNull(style.fontSize) * dart.notNull(this.textScaleFactor))})['*'](dart.notNull(style.fontSize) * dart.notNull(this.textScaleFactor));
              if (offsetX + dart.notNull(metrics.width) > dart.notNull(constraintWidth) && spanCount > 0) {
                width = math.max(doubleL(), width, this[_realignLine](this[_spans][$sublist](spanStart), this[_decorations][$sublist](decorationStart), constraintWidth, offsetX - dart.notNull(space.advanceWidth) * dart.notNull(style.wordSpacing) - dart.notNull(style.letterSpacing), false, bottom, _textDirection));
                spanStart = spanStart + spanCount;
                decorationStart = this[_decorations][$length];
                lines = lines + 1;
                if (this.maxLines != null && lines > dart.notNull(this.maxLines)) {
                  return false;
                }
                offsetX = 0.0;
                offsetY = offsetY + (dart.notNull(bottom) - dart.notNull(top) + dart.notNull(style.lineSpacing));
                top = null;
                bottom = null;
                if (offsetY > dart.notNull(constraintHeight)) {
                  return false;
                }
                spanCount = 0;
              }
              let baseline = dart.notNull(span.baseline) * dart.notNull(this.textScaleFactor);
              let mt = dart.test(this.tightBounds) ? metrics.top : metrics.descent;
              let mb = dart.test(this.tightBounds) ? metrics.bottom : metrics.ascent;
              top = math.min(doubleL(), (t0 = top, t0 == null ? dart.notNull(mt) + baseline : t0), dart.notNull(mt) + baseline);
              bottom = math.max(doubleL(), (t0$ = bottom, t0$ == null ? dart.notNull(mb) + baseline : t0$), dart.notNull(mb) + baseline);
              let wd = new text$._Word.new(word, style, metrics);
              wd.offset = new point$.PdfPoint.new(offsetX, -offsetY + baseline);
              this[_spans][$add](wd);
              spanCount = spanCount + 1;
              this[_appendDecoration](spanCount > 1, new text$._TextDecoration.new(style, span.annotation, dart.notNull(this[_spans][$length]) - 1, dart.notNull(this[_spans][$length]) - 1));
              offsetX = offsetX + (dart.notNull(metrics.advanceWidth) + dart.notNull(space.advanceWidth) * dart.notNull(style.wordSpacing) + dart.notNull(style.letterSpacing));
            }
            if (dart.test(this.softWrap) && line < dart.notNull(spanLines[$length]) - 1) {
              width = math.max(doubleL(), width, this[_realignLine](this[_spans][$sublist](spanStart), this[_decorations][$sublist](decorationStart), constraintWidth, offsetX - dart.notNull(space.advanceWidth) * dart.notNull(style.wordSpacing) - dart.notNull(style.letterSpacing), true, bottom, _textDirection));
              spanStart = spanStart + spanCount;
              decorationStart = this[_decorations][$length];
              lines = lines + 1;
              if (this.maxLines != null && lines > dart.notNull(this.maxLines)) {
                return false;
              }
              offsetX = 0.0;
              if (spanCount > 0) {
                offsetY = offsetY + (dart.notNull(bottom) - dart.notNull(top) + dart.notNull(style.lineSpacing));
              } else {
                offsetY = offsetY + (dart.notNull(space.ascent) + dart.notNull(space.descent) + dart.notNull(style.lineSpacing));
              }
              top = null;
              bottom = null;
              if (offsetY > dart.notNull(constraintHeight)) {
                return false;
              }
              spanCount = 0;
            }
          }
          offsetX = offsetX - (dart.notNull(space.advanceWidth) * dart.notNull(style.wordSpacing) - dart.notNull(style.letterSpacing));
        } else if (WidgetSpanL().is(span)) {
          span.child.layout(context, new geometry.BoxConstraints.tight(new point$.PdfPoint.new(1 / 0, dart.notNull(style.fontSize) * dart.notNull(this.textScaleFactor))));
          let ws = new text$._WidgetSpan.new(span.child, style);
          if (offsetX + dart.notNull(ws.width) > dart.notNull(constraintWidth) && spanCount > 0) {
            width = math.max(doubleL(), width, this[_realignLine](this[_spans][$sublist](spanStart), this[_decorations][$sublist](decorationStart), constraintWidth, offsetX, false, bottom, _textDirection));
            spanStart = spanStart + spanCount;
            decorationStart = this[_decorations][$length];
            lines = lines + 1;
            if (this.maxLines != null && lines > dart.notNull(this.maxLines)) {
              return false;
            }
            offsetX = 0.0;
            offsetY = offsetY + (dart.notNull(bottom) - dart.notNull(top) + dart.notNull(style.lineSpacing));
            top = null;
            bottom = null;
            if (offsetY > dart.notNull(constraintHeight)) {
              return false;
            }
            spanCount = 0;
          }
          let baseline = dart.notNull(span.baseline) * dart.notNull(this.textScaleFactor);
          top = math.min(doubleL(), (t0$0 = top, t0$0 == null ? baseline : t0$0), baseline);
          bottom = math.max(doubleL(), (t0$1 = bottom, t0$1 == null ? dart.notNull(ws.height) + baseline : t0$1), dart.notNull(ws.height) + baseline);
          ws.offset = new point$.PdfPoint.new(offsetX, -offsetY + baseline);
          this[_spans][$add](ws);
          spanCount = spanCount + 1;
          this[_appendDecoration](spanCount > 1, new text$._TextDecoration.new(style, span.annotation, dart.notNull(this[_spans][$length]) - 1, dart.notNull(this[_spans][$length]) - 1));
          offsetX = offsetX + (dart.notNull(ws.left) + dart.notNull(ws.width));
        }
        return true;
      }, InlineSpanLAndTextStyleLToboolL()), defaultstyle);
      width = math.max(doubleL(), width, this[_realignLine](this[_spans][$sublist](spanStart), this[_decorations][$sublist](decorationStart), lines > 1 ? constraintWidth : offsetX, offsetX, true, bottom, _textDirection));
      bottom == null ? bottom = 0.0 : null;
      top == null ? top = 0.0 : null;
      this.box = new rect$.PdfRect.new(0.0, 0.0, constraints.constrainWidth(width), constraints.constrainHeight(offsetY + dart.notNull(bottom) - dart.notNull(top)));
    }
    debugPaint(context) {
      let t0;
      t0 = context.canvas;
      (() => {
        t0.setStrokeColor(colors.PdfColors.blue);
        t0.setLineWidth(1.0);
        t0.drawRect(this.box.x, this.box.y, this.box.width === 1 / 0 ? 1000.0 : this.box.width, this.box.height === 1 / 0 ? 1000.0 : this.box.height);
        t0.strokePath();
        return t0;
      })();
    }
    paint(context) {
      super.paint(context);
      let currentStyle = null;
      let currentColor = null;
      for (let decoration of this[_decorations]) {
        if (!dart.test(dart.fn(() => {
          if (dart.test(document$.Document.debug) && dart.test(text$.RichText.debug)) {
            decoration.debugPaint(context, this.textScaleFactor, this.box, this[_spans]);
          }
          return true;
        }, VoidToboolL())())) dart.assertFailed(null, L17, 827, 14, "() {\n        if (Document.debug && RichText.debug) {\n          decoration.debugPaint(context, textScaleFactor, box, _spans);\n        }\n        return true;\n      }()");
        decoration.backgroundPaint(context, this.textScaleFactor, this.box, this[_spans]);
      }
      for (let span of this[_spans]) {
        if (!dart.test(dart.fn(() => {
          if (dart.test(document$.Document.debug) && dart.test(text$.RichText.debug)) {
            span.debugPaint(context, this.textScaleFactor, this.box);
          }
          return true;
        }, VoidToboolL())())) dart.assertFailed(null, L17, 843, 14, "() {\n        if (Document.debug && RichText.debug) {\n          span.debugPaint(context, textScaleFactor, box);\n        }\n        return true;\n      }()");
        if (!dart.equals(span.style, currentStyle)) {
          currentStyle = span.style;
          if (!dart.equals(currentStyle.color, currentColor)) {
            currentColor = currentStyle.color;
            context.canvas.setFillColor(currentColor);
          }
        }
        span.paint(context, currentStyle, this.textScaleFactor, new point$.PdfPoint.new(this.box.left, this.box.top));
      }
      for (let decoration of this[_decorations]) {
        decoration.foregroundPaint(context, this.textScaleFactor, this.box, this[_spans]);
      }
    }
  };
  (text$.RichText.new = function(opts) {
    let text = opts && 'text' in opts ? opts.text : null;
    let textAlign = opts && 'textAlign' in opts ? opts.textAlign : null;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    let softWrap = opts && 'softWrap' in opts ? opts.softWrap : null;
    let tightBounds = opts && 'tightBounds' in opts ? opts.tightBounds : false;
    let textScaleFactor = opts && 'textScaleFactor' in opts ? opts.textScaleFactor : 1;
    let maxLines = opts && 'maxLines' in opts ? opts.maxLines : null;
    this[_spans] = JSArrayOf_SpanL().of([]);
    this[_decorations] = JSArrayOf_TextDecorationL().of([]);
    this[text$1] = text;
    this[textDirection$2] = textDirection;
    this[tightBounds$] = tightBounds;
    this[textScaleFactor$] = textScaleFactor;
    if (!(text != null)) dart.assertFailed(null, L17, 460, 16, "text != null");
    this[_textAlign] = textAlign;
    this[_softWrap] = softWrap;
    this[_maxLines] = maxLines;
    text$.RichText.__proto__.new.call(this);
    ;
  }).prototype = text$.RichText.prototype;
  dart.addTypeTests(text$.RichText);
  dart.addTypeCaches(text$.RichText);
  dart.setMethodSignature(text$.RichText, () => ({
    __proto__: dart.getMethods(text$.RichText.__proto__),
    [_realignLine]: dart.fnType(dart.legacy(core.double), [dart.legacy(core.List$(dart.legacy(text$._Span))), dart.legacy(core.List$(dart.legacy(text$._TextDecoration))), dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.bool), dart.legacy(core.double), dart.legacy(text$.TextDirection)]),
    [_appendDecoration]: dart.fnType(dart.void, [dart.legacy(core.bool), dart.legacy(text$._TextDecoration)]),
    layout: dart.fnType(dart.void, [dart.legacy(widget$.Context), dart.legacy(geometry.BoxConstraints)], {parentUsesSize: dart.legacy(core.bool)}, {})
  }));
  dart.setGetterSignature(text$.RichText, () => ({
    __proto__: dart.getGetters(text$.RichText.__proto__),
    textAlign: dart.legacy(text$.TextAlign),
    softWrap: dart.legacy(core.bool),
    maxLines: dart.legacy(core.int)
  }));
  dart.setLibraryUri(text$.RichText, L16);
  dart.setFieldSignature(text$.RichText, () => ({
    __proto__: dart.getFields(text$.RichText.__proto__),
    text: dart.finalFieldType(dart.legacy(text$.InlineSpan)),
    [_textAlign]: dart.fieldType(dart.legacy(text$.TextAlign)),
    textDirection: dart.finalFieldType(dart.legacy(text$.TextDirection)),
    textScaleFactor: dart.finalFieldType(dart.legacy(core.double)),
    [_softWrap]: dart.fieldType(dart.legacy(core.bool)),
    tightBounds: dart.finalFieldType(dart.legacy(core.bool)),
    [_maxLines]: dart.fieldType(dart.legacy(core.int)),
    [_spans]: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(text$._Span)))),
    [_decorations]: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(text$._TextDecoration))))
  }));
  dart.defineLazy(text$.RichText, {
    /*text$.RichText.debug*/get debug() {
      return false;
    },
    set debug(_) {}
  }, true);
  text$.Text = class Text extends text$.RichText {};
  (text$.Text.new = function(text, opts) {
    let style = opts && 'style' in opts ? opts.style : null;
    let textAlign = opts && 'textAlign' in opts ? opts.textAlign : null;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    let softWrap = opts && 'softWrap' in opts ? opts.softWrap : null;
    let tightBounds = opts && 'tightBounds' in opts ? opts.tightBounds : false;
    let textScaleFactor = opts && 'textScaleFactor' in opts ? opts.textScaleFactor : 1;
    let maxLines = opts && 'maxLines' in opts ? opts.maxLines : null;
    if (!(text != null)) dart.assertFailed(null, L17, 887, 16, "text != null");
    text$.Text.__proto__.new.call(this, {text: new text$.TextSpan.new({text: text, style: style}), textAlign: textAlign, softWrap: softWrap, tightBounds: tightBounds, textDirection: textDirection, textScaleFactor: textScaleFactor, maxLines: maxLines});
    ;
  }).prototype = text$.Text.prototype;
  dart.addTypeTests(text$.Text);
  dart.addTypeCaches(text$.Text);
  dart.setLibraryUri(text$.Text, L16);
  var _margin = dart.privateName(page_theme, "_margin");
  var pageFormat$ = dart.privateName(page_theme, "PageTheme.pageFormat");
  var orientation$0 = dart.privateName(page_theme, "PageTheme.orientation");
  var _margin$ = dart.privateName(page_theme, "PageTheme._margin");
  var buildBackground$ = dart.privateName(page_theme, "PageTheme.buildBackground");
  var buildForeground$ = dart.privateName(page_theme, "PageTheme.buildForeground");
  var theme$0 = dart.privateName(page_theme, "PageTheme.theme");
  var clip$ = dart.privateName(page_theme, "PageTheme.clip");
  var textDirection$3 = dart.privateName(page_theme, "PageTheme.textDirection");
  page_theme.PageTheme = class PageTheme extends core.Object {
    get pageFormat() {
      return this[pageFormat$];
    }
    set pageFormat(value) {
      super.pageFormat = value;
    }
    get orientation() {
      return this[orientation$0];
    }
    set orientation(value) {
      super.orientation = value;
    }
    get [_margin]() {
      return this[_margin$];
    }
    set [_margin](value) {
      super[_margin] = value;
    }
    get buildBackground() {
      return this[buildBackground$];
    }
    set buildBackground(value) {
      super.buildBackground = value;
    }
    get buildForeground() {
      return this[buildForeground$];
    }
    set buildForeground(value) {
      super.buildForeground = value;
    }
    get theme() {
      return this[theme$0];
    }
    set theme(value) {
      super.theme = value;
    }
    get clip() {
      return this[clip$];
    }
    set clip(value) {
      super.clip = value;
    }
    get textDirection() {
      return this[textDirection$3];
    }
    set textDirection(value) {
      super.textDirection = value;
    }
    get mustRotate() {
      return this.orientation == page$.PageOrientation.landscape && dart.notNull(this.pageFormat.height) > dart.notNull(this.pageFormat.width) || this.orientation == page$.PageOrientation.portrait && dart.notNull(this.pageFormat.width) > dart.notNull(this.pageFormat.height);
    }
    get margin() {
      if (this[_margin] != null) {
        if (dart.test(this.mustRotate)) {
          return new geometry.EdgeInsets.fromLTRB(this[_margin].bottom, this[_margin].left, this[_margin].top, this[_margin].right);
        } else {
          return this[_margin];
        }
      }
      if (dart.test(this.mustRotate)) {
        return new geometry.EdgeInsets.fromLTRB(this.pageFormat.marginBottom, this.pageFormat.marginLeft, this.pageFormat.marginTop, this.pageFormat.marginRight);
      } else {
        return new geometry.EdgeInsets.fromLTRB(this.pageFormat.marginLeft, this.pageFormat.marginTop, this.pageFormat.marginRight, this.pageFormat.marginBottom);
      }
    }
    copyWith(opts) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5;
      let pageFormat = opts && 'pageFormat' in opts ? opts.pageFormat : null;
      let buildBackground = opts && 'buildBackground' in opts ? opts.buildBackground : null;
      let buildForeground = opts && 'buildForeground' in opts ? opts.buildForeground : null;
      let theme = opts && 'theme' in opts ? opts.theme : null;
      let orientation = opts && 'orientation' in opts ? opts.orientation : null;
      let margin = opts && 'margin' in opts ? opts.margin : null;
      let clip = opts && 'clip' in opts ? opts.clip : null;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      return new page_theme.PageTheme.new({pageFormat: (t0 = pageFormat, t0 == null ? this.pageFormat : t0), buildBackground: (t0$ = buildBackground, t0$ == null ? this.buildBackground : t0$), buildForeground: (t0$0 = buildForeground, t0$0 == null ? this.buildForeground : t0$0), theme: ThemeDataL().as((t0$1 = theme, t0$1 == null ? this.theme : t0$1)), orientation: (t0$2 = orientation, t0$2 == null ? this.orientation : t0$2), margin: (t0$3 = margin, t0$3 == null ? this.margin : t0$3), clip: (t0$4 = clip, t0$4 == null ? this.clip : t0$4), textDirection: (t0$5 = textDirection, t0$5 == null ? this.textDirection : t0$5)});
    }
  };
  (page_theme.PageTheme.new = function(opts) {
    let t0, t0$;
    let pageFormat = opts && 'pageFormat' in opts ? opts.pageFormat : null;
    let buildBackground = opts && 'buildBackground' in opts ? opts.buildBackground : null;
    let buildForeground = opts && 'buildForeground' in opts ? opts.buildForeground : null;
    let theme = opts && 'theme' in opts ? opts.theme : null;
    let orientation = opts && 'orientation' in opts ? opts.orientation : null;
    let margin = opts && 'margin' in opts ? opts.margin : null;
    let clip = opts && 'clip' in opts ? opts.clip : false;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    this[buildBackground$] = buildBackground;
    this[buildForeground$] = buildForeground;
    this[theme$0] = theme;
    this[clip$] = clip;
    this[textDirection$3] = textDirection;
    this[pageFormat$] = (t0 = pageFormat, t0 == null ? page_format.PdfPageFormat.standard : t0);
    this[orientation$0] = (t0$ = orientation, t0$ == null ? page$.PageOrientation.natural : t0$);
    this[_margin$] = margin;
    ;
  }).prototype = page_theme.PageTheme.prototype;
  dart.addTypeTests(page_theme.PageTheme);
  dart.addTypeCaches(page_theme.PageTheme);
  dart.setMethodSignature(page_theme.PageTheme, () => ({
    __proto__: dart.getMethods(page_theme.PageTheme.__proto__),
    copyWith: dart.fnType(dart.legacy(page_theme.PageTheme), [], {buildBackground: dart.legacy(dart.fnType(dart.legacy(widget$.Widget), [dart.legacy(widget$.Context)])), buildForeground: dart.legacy(dart.fnType(dart.legacy(widget$.Widget), [dart.legacy(widget$.Context)])), clip: dart.legacy(core.bool), margin: dart.legacy(geometry.EdgeInsets), orientation: dart.legacy(page$.PageOrientation), pageFormat: dart.legacy(page_format.PdfPageFormat), textDirection: dart.legacy(text$.TextDirection), theme: dart.legacy(theme$.Theme)}, {})
  }));
  dart.setGetterSignature(page_theme.PageTheme, () => ({
    __proto__: dart.getGetters(page_theme.PageTheme.__proto__),
    mustRotate: dart.legacy(core.bool),
    margin: dart.legacy(geometry.EdgeInsets)
  }));
  dart.setLibraryUri(page_theme.PageTheme, L18);
  dart.setFieldSignature(page_theme.PageTheme, () => ({
    __proto__: dart.getFields(page_theme.PageTheme.__proto__),
    pageFormat: dart.finalFieldType(dart.legacy(page_format.PdfPageFormat)),
    orientation: dart.finalFieldType(dart.legacy(page$.PageOrientation)),
    [_margin]: dart.finalFieldType(dart.legacy(geometry.EdgeInsets)),
    buildBackground: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(widget$.Widget), [dart.legacy(widget$.Context)]))),
    buildForeground: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(widget$.Widget), [dart.legacy(widget$.Context)]))),
    theme: dart.finalFieldType(dart.legacy(theme$.ThemeData)),
    clip: dart.finalFieldType(dart.legacy(core.bool)),
    textDirection: dart.finalFieldType(dart.legacy(text$.TextDirection))
  }));
  geometry.BoxConstraints = class BoxConstraints extends core.Object {
    get minWidth() {
      return this[minWidth$];
    }
    set minWidth(value) {
      super.minWidth = value;
    }
    get maxWidth() {
      return this[maxWidth$];
    }
    set maxWidth(value) {
      super.maxWidth = value;
    }
    get minHeight() {
      return this[minHeight$];
    }
    set minHeight(value) {
      super.minHeight = value;
    }
    get maxHeight() {
      return this[maxHeight$];
    }
    set maxHeight(value) {
      super.maxHeight = value;
    }
    get hasBoundedWidth() {
      return dart.notNull(this.maxWidth) < 1 / 0;
    }
    get hasBoundedHeight() {
      return dart.notNull(this.maxHeight) < 1 / 0;
    }
    get hasInfiniteWidth() {
      return dart.notNull(this.minWidth) >= 1 / 0;
    }
    get hasInfiniteHeight() {
      return dart.notNull(this.minHeight) >= 1 / 0;
    }
    get biggest() {
      return new point$.PdfPoint.new(this.constrainWidth(), this.constrainHeight());
    }
    get smallest() {
      return new point$.PdfPoint.new(this.constrainWidth(0.0), this.constrainHeight(0.0));
    }
    get hasTightWidth() {
      return dart.notNull(this.minWidth) >= dart.notNull(this.maxWidth);
    }
    get hasTightHeight() {
      return dart.notNull(this.minHeight) >= dart.notNull(this.maxHeight);
    }
    get isTight() {
      return dart.test(this.hasTightWidth) && dart.test(this.hasTightHeight);
    }
    constrain(size) {
      let result = new point$.PdfPoint.new(this.constrainWidth(size.x), this.constrainHeight(size.y));
      return result;
    }
    constrainRect(opts) {
      let width = opts && 'width' in opts ? opts.width : 1 / 0;
      let height = opts && 'height' in opts ? opts.height : 1 / 0;
      let result = new point$.PdfPoint.new(this.constrainWidth(width), this.constrainHeight(height));
      return rect$.PdfRect.fromPoints(point$.PdfPoint.zero, result);
    }
    constrainWidth(width = 1 / 0) {
      return width[$clamp](this.minWidth, this.maxWidth);
    }
    constrainHeight(height = 1 / 0) {
      return height[$clamp](this.minHeight, this.maxHeight);
    }
    constrainSizeAndAttemptToPreserveAspectRatio(size) {
      if (dart.test(this.isTight)) {
        let result = this.smallest;
        return result;
      }
      let width = size.x;
      let height = size.y;
      if (!(dart.notNull(width) > 0.0)) dart.assertFailed(null, L19, 130, 12, "width > 0.0");
      if (!(dart.notNull(height) > 0.0)) dart.assertFailed(null, L19, 131, 12, "height > 0.0");
      let aspectRatio = dart.notNull(width) / dart.notNull(height);
      if (dart.notNull(width) > dart.notNull(this.maxWidth)) {
        width = this.maxWidth;
        height = dart.notNull(width) / aspectRatio;
      }
      if (dart.notNull(height) > dart.notNull(this.maxHeight)) {
        height = this.maxHeight;
        width = dart.notNull(height) * aspectRatio;
      }
      if (dart.notNull(width) < dart.notNull(this.minWidth)) {
        width = this.minWidth;
        height = dart.notNull(width) / aspectRatio;
      }
      if (dart.notNull(height) < dart.notNull(this.minHeight)) {
        height = this.minHeight;
        width = dart.notNull(height) * aspectRatio;
      }
      let result = new point$.PdfPoint.new(this.constrainWidth(width), this.constrainHeight(height));
      return result;
    }
    tighten(opts) {
      let width = opts && 'width' in opts ? opts.width : null;
      let height = opts && 'height' in opts ? opts.height : null;
      return new geometry.BoxConstraints.new({minWidth: width == null ? this.minWidth : width[$clamp](this.minWidth, this.maxWidth), maxWidth: width == null ? this.maxWidth : width[$clamp](this.minWidth, this.maxWidth), minHeight: height == null ? this.minHeight : height[$clamp](this.minHeight, this.maxHeight), maxHeight: height == null ? this.maxHeight : height[$clamp](this.minHeight, this.maxHeight)});
    }
    deflate(edges) {
      if (!(edges != null)) dart.assertFailed(null, L19, 173, 12, "edges != null");
      let horizontal = edges.horizontal;
      let vertical = edges.vertical;
      let deflatedMinWidth = math.max(doubleL(), 0.0, dart.notNull(this.minWidth) - dart.notNull(horizontal));
      let deflatedMinHeight = math.max(doubleL(), 0.0, dart.notNull(this.minHeight) - dart.notNull(vertical));
      return new geometry.BoxConstraints.new({minWidth: deflatedMinWidth, maxWidth: math.max(doubleL(), deflatedMinWidth, dart.notNull(this.maxWidth) - dart.notNull(horizontal)), minHeight: deflatedMinHeight, maxHeight: math.max(doubleL(), deflatedMinHeight, dart.notNull(this.maxHeight) - dart.notNull(vertical))});
    }
    loosen() {
      return new geometry.BoxConstraints.new({minWidth: 0.0, maxWidth: this.maxWidth, minHeight: 0.0, maxHeight: this.maxHeight});
    }
    enforce(constraints) {
      return new geometry.BoxConstraints.new({minWidth: this.minWidth[$clamp](constraints.minWidth, constraints.maxWidth), maxWidth: this.maxWidth[$clamp](constraints.minWidth, constraints.maxWidth), minHeight: this.minHeight[$clamp](constraints.minHeight, constraints.maxHeight), maxHeight: this.maxHeight[$clamp](constraints.minHeight, constraints.maxHeight)});
    }
    copyWith(opts) {
      let t0, t0$, t0$0, t0$1;
      let minWidth = opts && 'minWidth' in opts ? opts.minWidth : null;
      let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : null;
      let minHeight = opts && 'minHeight' in opts ? opts.minHeight : null;
      let maxHeight = opts && 'maxHeight' in opts ? opts.maxHeight : null;
      return new geometry.BoxConstraints.new({minWidth: (t0 = minWidth, t0 == null ? this.minWidth : t0), maxWidth: (t0$ = maxWidth, t0$ == null ? this.maxWidth : t0$), minHeight: (t0$0 = minHeight, t0$0 == null ? this.minHeight : t0$0), maxHeight: (t0$1 = maxHeight, t0$1 == null ? this.maxHeight : t0$1)});
    }
    toString() {
      return "BoxConstraint <" + dart.str(this.minWidth) + ", " + dart.str(this.maxWidth) + "> <" + dart.str(this.minHeight) + ", " + dart.str(this.maxHeight) + ">";
    }
  };
  (geometry.BoxConstraints.new = function(opts) {
    let minWidth = opts && 'minWidth' in opts ? opts.minWidth : 0;
    let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : 1 / 0;
    let minHeight = opts && 'minHeight' in opts ? opts.minHeight : 0;
    let maxHeight = opts && 'maxHeight' in opts ? opts.maxHeight : 1 / 0;
    this[minWidth$] = minWidth;
    this[maxWidth$] = maxWidth;
    this[minHeight$] = minHeight;
    this[maxHeight$] = maxHeight;
    ;
  }).prototype = geometry.BoxConstraints.prototype;
  (geometry.BoxConstraints.tightFor = function(opts) {
    let t0, t0$, t0$0, t0$1;
    let width = opts && 'width' in opts ? opts.width : null;
    let height = opts && 'height' in opts ? opts.height : null;
    this[minWidth$] = (t0 = width, t0 == null ? 0.0 : t0);
    this[maxWidth$] = (t0$ = width, t0$ == null ? 1 / 0 : t0$);
    this[minHeight$] = (t0$0 = height, t0$0 == null ? 0.0 : t0$0);
    this[maxHeight$] = (t0$1 = height, t0$1 == null ? 1 / 0 : t0$1);
    ;
  }).prototype = geometry.BoxConstraints.prototype;
  (geometry.BoxConstraints.tight = function(size) {
    this[minWidth$] = size.x;
    this[maxWidth$] = size.x;
    this[minHeight$] = size.y;
    this[maxHeight$] = size.y;
    ;
  }).prototype = geometry.BoxConstraints.prototype;
  (geometry.BoxConstraints.expand = function(opts) {
    let t0, t0$, t0$0, t0$1;
    let width = opts && 'width' in opts ? opts.width : null;
    let height = opts && 'height' in opts ? opts.height : null;
    this[minWidth$] = (t0 = width, t0 == null ? 1 / 0 : t0);
    this[maxWidth$] = (t0$ = width, t0$ == null ? 1 / 0 : t0$);
    this[minHeight$] = (t0$0 = height, t0$0 == null ? 1 / 0 : t0$0);
    this[maxHeight$] = (t0$1 = height, t0$1 == null ? 1 / 0 : t0$1);
    ;
  }).prototype = geometry.BoxConstraints.prototype;
  (geometry.BoxConstraints.tightForFinite = function(opts) {
    let width = opts && 'width' in opts ? opts.width : 1 / 0;
    let height = opts && 'height' in opts ? opts.height : 1 / 0;
    this[minWidth$] = width !== 1 / 0 ? width : 0.0;
    this[maxWidth$] = width !== 1 / 0 ? width : 1 / 0;
    this[minHeight$] = height !== 1 / 0 ? height : 0.0;
    this[maxHeight$] = height !== 1 / 0 ? height : 1 / 0;
    ;
  }).prototype = geometry.BoxConstraints.prototype;
  dart.addTypeTests(geometry.BoxConstraints);
  dart.addTypeCaches(geometry.BoxConstraints);
  const minWidth$ = BoxConstraints_minWidth;
  const maxWidth$ = BoxConstraints_maxWidth;
  const minHeight$ = BoxConstraints_minHeight;
  const maxHeight$ = BoxConstraints_maxHeight;
  dart.setMethodSignature(geometry.BoxConstraints, () => ({
    __proto__: dart.getMethods(geometry.BoxConstraints.__proto__),
    constrain: dart.fnType(dart.legacy(point$.PdfPoint), [dart.legacy(point$.PdfPoint)]),
    constrainRect: dart.fnType(dart.legacy(rect$.PdfRect), [], {height: dart.legacy(core.double), width: dart.legacy(core.double)}, {}),
    constrainWidth: dart.fnType(dart.legacy(core.double), [], [dart.legacy(core.double)]),
    constrainHeight: dart.fnType(dart.legacy(core.double), [], [dart.legacy(core.double)]),
    constrainSizeAndAttemptToPreserveAspectRatio: dart.fnType(dart.legacy(point$.PdfPoint), [dart.legacy(point$.PdfPoint)]),
    tighten: dart.fnType(dart.legacy(geometry.BoxConstraints), [], {height: dart.legacy(core.double), width: dart.legacy(core.double)}, {}),
    deflate: dart.fnType(dart.legacy(geometry.BoxConstraints), [dart.legacy(geometry.EdgeInsets)]),
    loosen: dart.fnType(dart.legacy(geometry.BoxConstraints), []),
    enforce: dart.fnType(dart.legacy(geometry.BoxConstraints), [dart.legacy(geometry.BoxConstraints)]),
    copyWith: dart.fnType(dart.legacy(geometry.BoxConstraints), [], {maxHeight: dart.legacy(core.double), maxWidth: dart.legacy(core.double), minHeight: dart.legacy(core.double), minWidth: dart.legacy(core.double)}, {}),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setGetterSignature(geometry.BoxConstraints, () => ({
    __proto__: dart.getGetters(geometry.BoxConstraints.__proto__),
    hasBoundedWidth: dart.legacy(core.bool),
    hasBoundedHeight: dart.legacy(core.bool),
    hasInfiniteWidth: dart.legacy(core.bool),
    hasInfiniteHeight: dart.legacy(core.bool),
    biggest: dart.legacy(point$.PdfPoint),
    smallest: dart.legacy(point$.PdfPoint),
    hasTightWidth: dart.legacy(core.bool),
    hasTightHeight: dart.legacy(core.bool),
    isTight: dart.legacy(core.bool)
  }));
  dart.setLibraryUri(geometry.BoxConstraints, L20);
  dart.setFieldSignature(geometry.BoxConstraints, () => ({
    __proto__: dart.getFields(geometry.BoxConstraints.__proto__),
    minWidth: dart.finalFieldType(dart.legacy(core.double)),
    maxWidth: dart.finalFieldType(dart.legacy(core.double)),
    minHeight: dart.finalFieldType(dart.legacy(core.double)),
    maxHeight: dart.finalFieldType(dart.legacy(core.double))
  }));
  dart.defineExtensionMethods(geometry.BoxConstraints, ['toString']);
  var left$ = dart.privateName(geometry, "EdgeInsets.left");
  var top$ = dart.privateName(geometry, "EdgeInsets.top");
  var right$ = dart.privateName(geometry, "EdgeInsets.right");
  var bottom$ = dart.privateName(geometry, "EdgeInsets.bottom");
  var C57;
  geometry.EdgeInsets = class EdgeInsets extends core.Object {
    get left() {
      return this[left$];
    }
    set left(value) {
      super.left = value;
    }
    get top() {
      return this[top$];
    }
    set top(value) {
      super.top = value;
    }
    get right() {
      return this[right$];
    }
    set right(value) {
      super.right = value;
    }
    get bottom() {
      return this[bottom$];
    }
    set bottom(value) {
      super.bottom = value;
    }
    get horizontal() {
      return dart.notNull(this.left) + dart.notNull(this.right);
    }
    get vertical() {
      return dart.notNull(this.top) + dart.notNull(this.bottom);
    }
    copyWith(opts) {
      let t0, t0$, t0$0, t0$1;
      let left = opts && 'left' in opts ? opts.left : null;
      let top = opts && 'top' in opts ? opts.top : null;
      let right = opts && 'right' in opts ? opts.right : null;
      let bottom = opts && 'bottom' in opts ? opts.bottom : null;
      return new geometry.EdgeInsets.only({left: (t0 = left, t0 == null ? this.left : t0), top: (t0$ = top, t0$ == null ? this.top : t0$), right: (t0$0 = right, t0$0 == null ? this.right : t0$0), bottom: (t0$1 = bottom, t0$1 == null ? this.bottom : t0$1)});
    }
    add(other) {
      return new geometry.EdgeInsets.fromLTRB(dart.notNull(this.left) + dart.notNull(other.left), dart.notNull(this.top) + dart.notNull(other.top), dart.notNull(this.right) + dart.notNull(other.right), dart.notNull(this.bottom) + dart.notNull(other.bottom));
    }
    toString() {
      return "EdgeInsets " + dart.str(this.left) + ", " + dart.str(this.top) + ", " + dart.str(this.right) + ", " + dart.str(this.bottom);
    }
  };
  (geometry.EdgeInsets.fromLTRB = function(left, top, right, bottom) {
    this[left$] = left;
    this[top$] = top;
    this[right$] = right;
    this[bottom$] = bottom;
    ;
  }).prototype = geometry.EdgeInsets.prototype;
  (geometry.EdgeInsets.all = function(value) {
    this[left$] = value;
    this[top$] = value;
    this[right$] = value;
    this[bottom$] = value;
    ;
  }).prototype = geometry.EdgeInsets.prototype;
  (geometry.EdgeInsets.only = function(opts) {
    let left = opts && 'left' in opts ? opts.left : 0;
    let top = opts && 'top' in opts ? opts.top : 0;
    let right = opts && 'right' in opts ? opts.right : 0;
    let bottom = opts && 'bottom' in opts ? opts.bottom : 0;
    this[left$] = left;
    this[top$] = top;
    this[right$] = right;
    this[bottom$] = bottom;
    ;
  }).prototype = geometry.EdgeInsets.prototype;
  (geometry.EdgeInsets.symmetric = function(opts) {
    let vertical = opts && 'vertical' in opts ? opts.vertical : 0;
    let horizontal = opts && 'horizontal' in opts ? opts.horizontal : 0;
    this[left$] = horizontal;
    this[top$] = vertical;
    this[right$] = horizontal;
    this[bottom$] = vertical;
    ;
  }).prototype = geometry.EdgeInsets.prototype;
  dart.addTypeTests(geometry.EdgeInsets);
  dart.addTypeCaches(geometry.EdgeInsets);
  dart.setMethodSignature(geometry.EdgeInsets, () => ({
    __proto__: dart.getMethods(geometry.EdgeInsets.__proto__),
    copyWith: dart.fnType(dart.legacy(geometry.EdgeInsets), [], {bottom: dart.legacy(core.double), left: dart.legacy(core.double), right: dart.legacy(core.double), top: dart.legacy(core.double)}, {}),
    add: dart.fnType(dart.legacy(geometry.EdgeInsets), [dart.legacy(geometry.EdgeInsets)]),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setGetterSignature(geometry.EdgeInsets, () => ({
    __proto__: dart.getGetters(geometry.EdgeInsets.__proto__),
    horizontal: dart.legacy(core.double),
    vertical: dart.legacy(core.double)
  }));
  dart.setLibraryUri(geometry.EdgeInsets, L20);
  dart.setFieldSignature(geometry.EdgeInsets, () => ({
    __proto__: dart.getFields(geometry.EdgeInsets.__proto__),
    left: dart.finalFieldType(dart.legacy(core.double)),
    top: dart.finalFieldType(dart.legacy(core.double)),
    right: dart.finalFieldType(dart.legacy(core.double)),
    bottom: dart.finalFieldType(dart.legacy(core.double))
  }));
  dart.defineExtensionMethods(geometry.EdgeInsets, ['toString']);
  dart.defineLazy(geometry.EdgeInsets, {
    /*geometry.EdgeInsets.zero*/get zero() {
      return C57 || CT.C57;
    }
  }, true);
  var C58;
  var C59;
  var C60;
  var C61;
  var C62;
  var C63;
  geometry.Alignment = class Alignment extends core.Object {
    get x() {
      return this[x$];
    }
    set x(value) {
      super.x = value;
    }
    get y() {
      return this[y$];
    }
    set y(value) {
      super.y = value;
    }
    alongSize(other) {
      let centerX = dart.notNull(other.x) / 2.0;
      let centerY = dart.notNull(other.y) / 2.0;
      return new point$.PdfPoint.new(centerX + dart.notNull(this.x) * centerX, centerY + dart.notNull(this.y) * centerY);
    }
    withinRect(rect) {
      let halfWidth = dart.notNull(rect.width) / 2.0;
      let halfHeight = dart.notNull(rect.height) / 2.0;
      return new point$.PdfPoint.new(dart.notNull(rect.left) + halfWidth + dart.notNull(this.x) * halfWidth, dart.notNull(rect.bottom) + halfHeight + dart.notNull(this.y) * halfHeight);
    }
    inscribe(size, rect) {
      let halfWidthDelta = (dart.notNull(rect.width) - dart.notNull(size.x)) / 2.0;
      let halfHeightDelta = (dart.notNull(rect.height) - dart.notNull(size.y)) / 2.0;
      return new rect$.PdfRect.new(dart.notNull(rect.x) + halfWidthDelta + dart.notNull(this.x) * halfWidthDelta, dart.notNull(rect.y) + halfHeightDelta + dart.notNull(this.y) * halfHeightDelta, size.x, size.y);
    }
    toString() {
      return "(" + dart.str(this.x) + ", " + dart.str(this.y) + ")";
    }
  };
  (geometry.Alignment.new = function(x, y) {
    this[x$] = x;
    this[y$] = y;
    if (!(x != null)) dart.assertFailed(null, L19, 287, 16, "x != null");
    if (!(y != null)) dart.assertFailed(null, L19, 288, 16, "y != null");
    ;
  }).prototype = geometry.Alignment.prototype;
  dart.addTypeTests(geometry.Alignment);
  dart.addTypeCaches(geometry.Alignment);
  const x$ = Alignment_x;
  const y$ = Alignment_y;
  dart.setMethodSignature(geometry.Alignment, () => ({
    __proto__: dart.getMethods(geometry.Alignment.__proto__),
    alongSize: dart.fnType(dart.legacy(point$.PdfPoint), [dart.legacy(point$.PdfPoint)]),
    withinRect: dart.fnType(dart.legacy(point$.PdfPoint), [dart.legacy(rect$.PdfRect)]),
    inscribe: dart.fnType(dart.legacy(rect$.PdfRect), [dart.legacy(point$.PdfPoint), dart.legacy(rect$.PdfRect)]),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(geometry.Alignment, L20);
  dart.setFieldSignature(geometry.Alignment, () => ({
    __proto__: dart.getFields(geometry.Alignment.__proto__),
    x: dart.finalFieldType(dart.legacy(core.double)),
    y: dart.finalFieldType(dart.legacy(core.double))
  }));
  dart.defineExtensionMethods(geometry.Alignment, ['toString']);
  dart.defineLazy(geometry.Alignment, {
    /*geometry.Alignment.topLeft*/get topLeft() {
      return C58 || CT.C58;
    },
    /*geometry.Alignment.topCenter*/get topCenter() {
      return C59 || CT.C59;
    },
    /*geometry.Alignment.topRight*/get topRight() {
      return C60 || CT.C60;
    },
    /*geometry.Alignment.centerLeft*/get centerLeft() {
      return C27 || CT.C27;
    },
    /*geometry.Alignment.center*/get center() {
      return C24 || CT.C24;
    },
    /*geometry.Alignment.centerRight*/get centerRight() {
      return C28 || CT.C28;
    },
    /*geometry.Alignment.bottomLeft*/get bottomLeft() {
      return C61 || CT.C61;
    },
    /*geometry.Alignment.bottomCenter*/get bottomCenter() {
      return C62 || CT.C62;
    },
    /*geometry.Alignment.bottomRight*/get bottomRight() {
      return C63 || CT.C63;
    }
  }, true);
  geometry.FractionalOffset = class FractionalOffset extends geometry.Alignment {};
  (geometry.FractionalOffset.new = function(dx, dy) {
    if (!(dx != null)) dart.assertFailed(null, L19, 362, 16, "dx != null");
    if (!(dy != null)) dart.assertFailed(null, L19, 363, 16, "dy != null");
    geometry.FractionalOffset.__proto__.new.call(this, dart.notNull(dx) * 2 - 1, 1 - dart.notNull(dy) * 2);
    ;
  }).prototype = geometry.FractionalOffset.prototype;
  dart.addTypeTests(geometry.FractionalOffset);
  dart.addTypeCaches(geometry.FractionalOffset);
  dart.setLibraryUri(geometry.FractionalOffset, L20);
  var source$ = dart.privateName(geometry, "FittedSizes.source");
  var destination$ = dart.privateName(geometry, "FittedSizes.destination");
  geometry.FittedSizes = class FittedSizes extends core.Object {
    get source() {
      return this[source$];
    }
    set source(value) {
      super.source = value;
    }
    get destination() {
      return this[destination$];
    }
    set destination(value) {
      super.destination = value;
    }
  };
  (geometry.FittedSizes.new = function(source, destination) {
    this[source$] = source;
    this[destination$] = destination;
    ;
  }).prototype = geometry.FittedSizes.prototype;
  dart.addTypeTests(geometry.FittedSizes);
  dart.addTypeCaches(geometry.FittedSizes);
  dart.setLibraryUri(geometry.FittedSizes, L20);
  dart.setFieldSignature(geometry.FittedSizes, () => ({
    __proto__: dart.getFields(geometry.FittedSizes.__proto__),
    source: dart.finalFieldType(dart.legacy(point$.PdfPoint)),
    destination: dart.finalFieldType(dart.legacy(point$.PdfPoint))
  }));
  var C64;
  var C65;
  var C66;
  var C67;
  var C68;
  var C69;
  var C70;
  geometry.applyBoxFit = function applyBoxFit(fit, inputSize, outputSize) {
    if (dart.notNull(inputSize.y) <= 0.0 || dart.notNull(inputSize.x) <= 0.0 || dart.notNull(outputSize.y) <= 0.0 || dart.notNull(outputSize.x) <= 0.0) {
      return C64 || CT.C64;
    }
    let sourceSize = null;
    let destinationSize = null;
    switch (fit) {
      case C65 || CT.C65:
      {
        sourceSize = inputSize;
        destinationSize = outputSize;
        break;
      }
      case C66 || CT.C66:
      {
        sourceSize = inputSize;
        if (dart.notNull(outputSize.x) / dart.notNull(outputSize.y) > dart.notNull(sourceSize.x) / dart.notNull(sourceSize.y)) {
          destinationSize = new point$.PdfPoint.new(dart.notNull(sourceSize.x) * dart.notNull(outputSize.y) / dart.notNull(sourceSize.y), outputSize.y);
        } else {
          destinationSize = new point$.PdfPoint.new(outputSize.x, dart.notNull(sourceSize.y) * dart.notNull(outputSize.x) / dart.notNull(sourceSize.x));
        }
        break;
      }
      case C23 || CT.C23:
      {
        if (dart.notNull(outputSize.x) / dart.notNull(outputSize.y) > dart.notNull(inputSize.x) / dart.notNull(inputSize.y)) {
          sourceSize = new point$.PdfPoint.new(inputSize.x, dart.notNull(inputSize.x) * dart.notNull(outputSize.y) / dart.notNull(outputSize.x));
        } else {
          sourceSize = new point$.PdfPoint.new(dart.notNull(inputSize.y) * dart.notNull(outputSize.x) / dart.notNull(outputSize.y), inputSize.y);
        }
        destinationSize = outputSize;
        break;
      }
      case C67 || CT.C67:
      {
        sourceSize = new point$.PdfPoint.new(inputSize.x, dart.notNull(inputSize.x) * dart.notNull(outputSize.y) / dart.notNull(outputSize.x));
        destinationSize = new point$.PdfPoint.new(outputSize.x, dart.notNull(sourceSize.y) * dart.notNull(outputSize.x) / dart.notNull(sourceSize.x));
        break;
      }
      case C68 || CT.C68:
      {
        sourceSize = new point$.PdfPoint.new(dart.notNull(inputSize.y) * dart.notNull(outputSize.x) / dart.notNull(outputSize.y), inputSize.y);
        destinationSize = new point$.PdfPoint.new(dart.notNull(sourceSize.x) * dart.notNull(outputSize.y) / dart.notNull(sourceSize.y), outputSize.y);
        break;
      }
      case C69 || CT.C69:
      {
        sourceSize = new point$.PdfPoint.new(math.min(doubleL(), inputSize.x, outputSize.x), math.min(doubleL(), inputSize.y, outputSize.y));
        destinationSize = sourceSize;
        break;
      }
      case C70 || CT.C70:
      {
        sourceSize = inputSize;
        destinationSize = inputSize;
        let aspectRatio = dart.notNull(inputSize.x) / dart.notNull(inputSize.y);
        if (dart.notNull(destinationSize.y) > dart.notNull(outputSize.y)) {
          destinationSize = new point$.PdfPoint.new(dart.notNull(outputSize.y) * aspectRatio, outputSize.y);
        }
        if (dart.notNull(destinationSize.x) > dart.notNull(outputSize.x)) {
          destinationSize = new point$.PdfPoint.new(outputSize.x, dart.notNull(outputSize.x) / aspectRatio);
        }
        break;
      }
    }
    return new geometry.FittedSizes.new(sourceSize, destinationSize);
  };
  geometry.transformPoint = function transformPoint(transform, point) {
    let position3 = vector_math_64.Vector3.new(point.x, point.y, 0.0);
    let transformed3 = transform.perspectiveTransform(position3);
    return new point$.PdfPoint.new(transformed3.x, transformed3.y);
  };
  geometry.transformRect = function transformRect(transform, rect) {
    let point1 = geometry.transformPoint(transform, rect.topLeft);
    let point2 = geometry.transformPoint(transform, rect.topRight);
    let point3 = geometry.transformPoint(transform, rect.bottomLeft);
    let point4 = geometry.transformPoint(transform, rect.bottomRight);
    return rect$.PdfRect.fromLTRB(math.min(doubleL(), point1.x, math.min(doubleL(), point2.x, math.min(doubleL(), point3.x, point4.x))), math.min(doubleL(), point1.y, math.min(doubleL(), point2.y, math.min(doubleL(), point3.y, point4.y))), math.max(doubleL(), point1.x, math.max(doubleL(), point2.x, math.max(doubleL(), point3.x, point4.x))), math.max(doubleL(), point1.y, math.max(doubleL(), point2.y, math.max(doubleL(), point3.y, point4.y))));
  };
  var _name$4 = dart.privateName(page$, "_name");
  var C71;
  var C72;
  var C73;
  var C74;
  page$.PageOrientation = class PageOrientation extends core.Object {
    toString() {
      return this[_name$4];
    }
  };
  (page$.PageOrientation.new = function(index, _name) {
    this.index = index;
    this[_name$4] = _name;
    ;
  }).prototype = page$.PageOrientation.prototype;
  dart.addTypeTests(page$.PageOrientation);
  dart.addTypeCaches(page$.PageOrientation);
  dart.setMethodSignature(page$.PageOrientation, () => ({
    __proto__: dart.getMethods(page$.PageOrientation.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(page$.PageOrientation, L21);
  dart.setFieldSignature(page$.PageOrientation, () => ({
    __proto__: dart.getFields(page$.PageOrientation.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$4]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(page$.PageOrientation, ['toString']);
  page$.PageOrientation.natural = C71 || CT.C71;
  page$.PageOrientation.landscape = C72 || CT.C72;
  page$.PageOrientation.portrait = C73 || CT.C73;
  page$.PageOrientation.values = C74 || CT.C74;
  var _pdfPage = dart.privateName(page$, "_pdfPage");
  var _build = dart.privateName(page$, "_build");
  var pageTheme$ = dart.privateName(page$, "Page.pageTheme");
  page$.Page = class Page extends core.Object {
    get pageTheme() {
      return this[pageTheme$];
    }
    set pageTheme(value) {
      super.pageTheme = value;
    }
    get pageFormat() {
      let t0, t0$;
      t0$ = (t0 = this[_pdfPage], t0 == null ? null : t0.pageFormat);
      return t0$ == null ? this.pageTheme.pageFormat : t0$;
    }
    get orientation() {
      return this.pageTheme.orientation;
    }
    get theme() {
      return this.pageTheme.theme;
    }
    get mustRotate() {
      return this.pageTheme.mustRotate;
    }
    get margin() {
      return this.pageTheme.margin;
    }
    debugPaint(context) {
      let t0;
      let _margin = this.margin;
      t0 = context.canvas;
      (() => {
        t0.setFillColor(colors.PdfColors.lightGreen);
        t0.moveTo(0.0, 0.0);
        t0.lineTo(this.pageFormat.width, 0.0);
        t0.lineTo(this.pageFormat.width, this.pageFormat.height);
        t0.lineTo(0.0, this.pageFormat.height);
        t0.moveTo(_margin.left, _margin.bottom);
        t0.lineTo(_margin.left, dart.notNull(this.pageFormat.height) - dart.notNull(_margin.top));
        t0.lineTo(dart.notNull(this.pageFormat.width) - dart.notNull(_margin.right), dart.notNull(this.pageFormat.height) - dart.notNull(_margin.top));
        t0.lineTo(dart.notNull(this.pageFormat.width) - dart.notNull(_margin.right), _margin.bottom);
        t0.fillPath();
        return t0;
      })();
    }
    generate(document, opts) {
      let insert = opts && 'insert' in opts ? opts.insert : true;
      let index = opts && 'index' in opts ? opts.index : null;
      if (index != null) {
        if (dart.test(insert)) {
          this[_pdfPage] = new page.PdfPage.new(document.document, {pageFormat: this.pageFormat, index: index});
        } else {
          this[_pdfPage] = document.document.page(index);
        }
      } else {
        this[_pdfPage] = new page.PdfPage.new(document.document, {pageFormat: this.pageFormat});
      }
    }
    postProcess(document) {
      let t0, t0$, t1, t2, t1$, t2$, t1$0;
      let canvas = this[_pdfPage].getGraphics();
      canvas.reset();
      let _margin = this.margin;
      let constraints = dart.test(this.mustRotate) ? new geometry.BoxConstraints.new({maxWidth: dart.notNull(this.pageFormat.height) - dart.notNull(_margin.vertical), maxHeight: dart.notNull(this.pageFormat.width) - dart.notNull(_margin.horizontal)}) : new geometry.BoxConstraints.new({maxWidth: dart.notNull(this.pageFormat.width) - dart.notNull(_margin.horizontal), maxHeight: dart.notNull(this.pageFormat.height) - dart.notNull(_margin.vertical)});
      let calculatedTheme = (t0$ = (t0 = this.theme, t0 == null ? document.theme : t0), t0$ == null ? theme$.ThemeData.base() : t0$);
      let context = widget$.Context.new({document: document.document, page: this[_pdfPage], canvas: canvas}).inheritFromAll((() => {
        let t0 = JSArrayOfInheritedL().of([calculatedTheme]);
        if (this.pageTheme.textDirection != null) t0.push(new text_style.InheritedDirectionality.new(this.pageTheme.textDirection));
        return t0;
      })());
      let background = null;
      let content = null;
      let foreground = null;
      if (this[_build] != null) {
        content = (t1 = context, this[_build](t1));
        if (content != null) {
          let size = this.layout(content, context, constraints);
          if (this[_pdfPage].pageFormat.height === 1 / 0) {
            this[_pdfPage].pageFormat = this[_pdfPage].pageFormat.copyWith({width: size.x, height: size.y});
            constraints = dart.test(this.mustRotate) ? new geometry.BoxConstraints.new({maxWidth: dart.notNull(this[_pdfPage].pageFormat.height) - dart.notNull(_margin.vertical), maxHeight: dart.notNull(this[_pdfPage].pageFormat.width) - dart.notNull(_margin.horizontal)}) : new geometry.BoxConstraints.new({maxWidth: dart.notNull(this[_pdfPage].pageFormat.width) - dart.notNull(_margin.horizontal), maxHeight: dart.notNull(this[_pdfPage].pageFormat.height) - dart.notNull(_margin.vertical)});
          }
        }
      }
      if (this.pageTheme.buildBackground != null) {
        background = (t1$ = this.pageTheme, t2 = context, t1$.buildBackground(t2));
        if (background != null) {
          this.layout(background, context, constraints);
        }
      }
      if (this.pageTheme.buildForeground != null) {
        foreground = (t1$0 = this.pageTheme, t2$ = context, t1$0.buildForeground(t2$));
        if (foreground != null) {
          this.layout(foreground, context, constraints);
        }
      }
      if (!dart.test(dart.fn(() => {
        if (dart.test(document$.Document.debug)) {
          this.debugPaint(context);
        }
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L22, 172, 12, "() {\n      if (Document.debug) {\n        debugPaint(context);\n      }\n      return true;\n    }()");
      if (background != null) {
        this.paint(background, context);
      }
      if (content != null) {
        this.paint(content, context);
      }
      if (foreground != null) {
        this.paint(foreground, context);
      }
    }
    layout(child, context, constraints, opts) {
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      if (child == null) {
        return new point$.PdfPoint.new(this.pageFormat.width, this.pageFormat.height);
      }
      let _margin = this.margin;
      child.layout(context, constraints, {parentUsesSize: parentUsesSize});
      if (!(child.box != null)) dart.assertFailed(null, L22, 201, 12, "child.box != null");
      let width = this.pageFormat.width === 1 / 0 ? dart.notNull(child.box.width) + dart.notNull(_margin.left) + dart.notNull(_margin.right) : this.pageFormat.width;
      let height = this.pageFormat.height === 1 / 0 ? dart.notNull(child.box.height) + dart.notNull(_margin.top) + dart.notNull(_margin.bottom) : this.pageFormat.height;
      child.box = new rect$.PdfRect.new(_margin.left, dart.notNull(height) - dart.notNull(child.box.height) - dart.notNull(_margin.top), child.box.width, child.box.height);
      return new point$.PdfPoint.new(width, height);
    }
    paint(child, context) {
      let t1, t2, t1$;
      if (child == null) {
        return;
      }
      if (dart.test(this.pageTheme.clip)) {
        let _margin = this.margin;
        t1 = context.canvas;
        (() => {
          t1.saveContext();
          t1.drawRect(_margin.left, _margin.bottom, dart.notNull(this.pageFormat.width) - dart.notNull(_margin.horizontal), dart.notNull(this.pageFormat.height) - dart.notNull(_margin.vertical));
          t1.clipPath();
          return t1;
        })();
      }
      if (dart.test(this.mustRotate)) {
        let _margin = this.margin;
        t1$ = context.canvas;
        (() => {
          t1$.saveContext();
          t1$.setTransform((t2 = vector_math_64.Matrix4.identity(), (() => {
            t2.rotateZ(-3.141592653589793 / 2);
            t2.translate(-dart.notNull(this.pageFormat.height) - dart.notNull(_margin.left) + dart.notNull(_margin.top), -dart.notNull(this.pageFormat.height) + dart.notNull(this.pageFormat.width) + dart.notNull(_margin.top) - dart.notNull(_margin.right));
            return t2;
          })()));
          return t1$;
        })();
        child.paint(context);
        context.canvas.restoreContext();
      } else {
        child.paint(context);
      }
      if (dart.test(this.pageTheme.clip)) {
        context.canvas.restoreContext();
      }
    }
  };
  (page$.Page.new = function(opts) {
    let t0;
    let pageTheme = opts && 'pageTheme' in opts ? opts.pageTheme : null;
    let pageFormat = opts && 'pageFormat' in opts ? opts.pageFormat : null;
    let build = opts && 'build' in opts ? opts.build : null;
    let theme = opts && 'theme' in opts ? opts.theme : null;
    let orientation = opts && 'orientation' in opts ? opts.orientation : null;
    let margin = opts && 'margin' in opts ? opts.margin : null;
    let clip = opts && 'clip' in opts ? opts.clip : false;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    this[_pdfPage] = null;
    if (!(pageTheme == null || pageFormat == null && theme == null && orientation == null && margin == null && dart.equals(clip, false) && textDirection == null)) dart.assertFailed("Don't set both pageTheme and other settings", L22, 47, 13, "pageTheme == null ||\n                (pageFormat == null &&\n                    theme == null &&\n                    orientation == null &&\n                    margin == null &&\n                    clip == false &&\n                    textDirection == null)");
    this[pageTheme$] = (t0 = pageTheme, t0 == null ? new page_theme.PageTheme.new({pageFormat: pageFormat, orientation: orientation, margin: margin, theme: theme, clip: clip, textDirection: textDirection}) : t0);
    this[_build] = build;
    ;
  }).prototype = page$.Page.prototype;
  dart.addTypeTests(page$.Page);
  dart.addTypeCaches(page$.Page);
  dart.setMethodSignature(page$.Page, () => ({
    __proto__: dart.getMethods(page$.Page.__proto__),
    debugPaint: dart.fnType(dart.void, [dart.legacy(widget$.Context)]),
    generate: dart.fnType(dart.void, [dart.legacy(document$.Document)], {index: dart.legacy(core.int), insert: dart.legacy(core.bool)}, {}),
    postProcess: dart.fnType(dart.void, [dart.legacy(document$.Document)]),
    layout: dart.fnType(dart.legacy(point$.PdfPoint), [dart.legacy(widget$.Widget), dart.legacy(widget$.Context), dart.legacy(geometry.BoxConstraints)], {parentUsesSize: dart.legacy(core.bool)}, {}),
    paint: dart.fnType(dart.void, [dart.legacy(widget$.Widget), dart.legacy(widget$.Context)])
  }));
  dart.setGetterSignature(page$.Page, () => ({
    __proto__: dart.getGetters(page$.Page.__proto__),
    pageFormat: dart.legacy(page_format.PdfPageFormat),
    orientation: dart.legacy(page$.PageOrientation),
    theme: dart.legacy(theme$.ThemeData),
    mustRotate: dart.legacy(core.bool),
    margin: dart.legacy(geometry.EdgeInsets)
  }));
  dart.setLibraryUri(page$.Page, L21);
  dart.setFieldSignature(page$.Page, () => ({
    __proto__: dart.getFields(page$.Page.__proto__),
    pageTheme: dart.finalFieldType(dart.legacy(page_theme.PageTheme)),
    [_build]: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(widget$.Widget), [dart.legacy(widget$.Context)]))),
    [_pdfPage]: dart.fieldType(dart.legacy(page.PdfPage))
  }));
  var _name = dart.privateName(document, "_name");
  var C75;
  var _pages = dart.privateName(document$, "_pages");
  var _paint = dart.privateName(document$, "_paint");
  var document$0 = dart.privateName(document$, "Document.document");
  var theme$1 = dart.privateName(document$, "Document.theme");
  document$.Document = class Document extends core.Object {
    get document() {
      return this[document$0];
    }
    set document(value) {
      super.document = value;
    }
    get theme() {
      return this[theme$1];
    }
    set theme(value) {
      super.theme = value;
    }
    addPage(page, opts) {
      let index = opts && 'index' in opts ? opts.index : null;
      page.generate(this, {index: index});
      this[_pages][$add](page);
    }
    editPage(index, page) {
      page.generate(this, {index: index, insert: false});
      this[_pages][$add](page);
    }
    save() {
      return async.async(Uint8ListL(), (function* save() {
        if (!dart.test(this[_paint])) {
          for (let page of this[_pages]) {
            page.postProcess(this);
          }
          this[_paint] = true;
        }
        return yield this.document.save();
      }).bind(this));
    }
  };
  (document$.Document.new = function(opts) {
    let pageMode = opts && 'pageMode' in opts ? opts.pageMode : C75 || CT.C75;
    let deflate = opts && 'deflate' in opts ? opts.deflate : null;
    let compress = opts && 'compress' in opts ? opts.compress : true;
    let theme = opts && 'theme' in opts ? opts.theme : null;
    let title = opts && 'title' in opts ? opts.title : null;
    let author = opts && 'author' in opts ? opts.author : null;
    let creator = opts && 'creator' in opts ? opts.creator : null;
    let subject = opts && 'subject' in opts ? opts.subject : null;
    let keywords = opts && 'keywords' in opts ? opts.keywords : null;
    let producer = opts && 'producer' in opts ? opts.producer : null;
    this[_pages] = JSArrayOfPageL().of([]);
    this[_paint] = false;
    this[theme$1] = theme;
    this[document$0] = new document.PdfDocument.new({pageMode: pageMode, deflate: deflate, compress: compress});
    if (title != null || author != null || creator != null || subject != null || keywords != null || producer != null) {
      this.document.info = new info.PdfInfo.new(this.document, {title: title, author: author, creator: creator, subject: subject, keywords: keywords, producer: producer});
    }
  }).prototype = document$.Document.prototype;
  (document$.Document.load = function(parser, opts) {
    let pageMode = opts && 'pageMode' in opts ? opts.pageMode : C75 || CT.C75;
    let deflate = opts && 'deflate' in opts ? opts.deflate : null;
    let compress = opts && 'compress' in opts ? opts.compress : true;
    let theme = opts && 'theme' in opts ? opts.theme : null;
    let title = opts && 'title' in opts ? opts.title : null;
    let author = opts && 'author' in opts ? opts.author : null;
    let creator = opts && 'creator' in opts ? opts.creator : null;
    let subject = opts && 'subject' in opts ? opts.subject : null;
    let keywords = opts && 'keywords' in opts ? opts.keywords : null;
    let producer = opts && 'producer' in opts ? opts.producer : null;
    this[_pages] = JSArrayOfPageL().of([]);
    this[_paint] = false;
    this[theme$1] = theme;
    this[document$0] = new document.PdfDocument.load(parser, {pageMode: pageMode, deflate: deflate, compress: compress});
    if (title != null || author != null || creator != null || subject != null || keywords != null || producer != null) {
      this.document.info = new info.PdfInfo.new(this.document, {title: title, author: author, creator: creator, subject: subject, keywords: keywords, producer: producer});
    }
  }).prototype = document$.Document.prototype;
  dart.addTypeTests(document$.Document);
  dart.addTypeCaches(document$.Document);
  dart.setMethodSignature(document$.Document, () => ({
    __proto__: dart.getMethods(document$.Document.__proto__),
    addPage: dart.fnType(dart.void, [dart.legacy(page$.Page)], {index: dart.legacy(core.int)}, {}),
    editPage: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(page$.Page)]),
    save: dart.fnType(dart.legacy(async.Future$(dart.legacy(typed_data.Uint8List))), [])
  }));
  dart.setLibraryUri(document$.Document, L23);
  dart.setFieldSignature(document$.Document, () => ({
    __proto__: dart.getFields(document$.Document.__proto__),
    document: dart.finalFieldType(dart.legacy(document.PdfDocument)),
    theme: dart.finalFieldType(dart.legacy(theme$.ThemeData)),
    [_pages]: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(page$.Page)))),
    [_paint]: dart.fieldType(dart.legacy(core.bool))
  }));
  dart.defineLazy(document$.Document, {
    /*document$.Document.debug*/get debug() {
      return false;
    },
    set debug(_) {}
  }, true);
  var C76;
  var C77;
  var page$0 = dart.privateName(widget$, "Context.page");
  var canvas$ = dart.privateName(widget$, "Context.canvas");
  var inherited$ = dart.privateName(widget$, "Context.inherited");
  var document$1 = dart.privateName(widget$, "Context.document");
  widget$.Context = class Context extends core.Object {
    get page() {
      return this[page$0];
    }
    set page(value) {
      super.page = value;
    }
    get canvas() {
      return this[canvas$];
    }
    set canvas(value) {
      super.canvas = value;
    }
    get inherited() {
      return this[inherited$];
    }
    set inherited(value) {
      super.inherited = value;
    }
    get document() {
      return this[document$1];
    }
    set document(value) {
      super.document = value;
    }
    static new(opts) {
      let document = opts && 'document' in opts ? opts.document : null;
      let page = opts && 'page' in opts ? opts.page : null;
      let canvas = opts && 'canvas' in opts ? opts.canvas : null;
      return new widget$.Context.__({document: document, page: page, canvas: canvas, inherited: new (LinkedMapOfTypeL$InheritedL()).new()});
    }
    get pageNumber() {
      return dart.notNull(this.document.pdfPageList.pages[$indexOf](this.page)) + 1;
    }
    get pagesCount() {
      return this.document.pdfPageList.pages[$length];
    }
    copyWith(opts) {
      let t1, t1$, t1$0;
      let page = opts && 'page' in opts ? opts.page : null;
      let canvas = opts && 'canvas' in opts ? opts.canvas : null;
      let ctm = opts && 'ctm' in opts ? opts.ctm : null;
      let inherited = opts && 'inherited' in opts ? opts.inherited : null;
      return new widget$.Context.__({document: this.document, page: (t1 = page, t1 == null ? this.page : t1), canvas: (t1$ = canvas, t1$ == null ? this.canvas : t1$), inherited: (t1$0 = inherited, t1$0 == null ? this.inherited : t1$0)});
    }
    inheritFrom(object) {
      return this.inheritFromAll(JSArrayOfInheritedL().of([object]));
    }
    inheritFromAll(objects) {
      let inherited = HashMapOfTypeL$InheritedL().of(this.inherited);
      for (let object of objects) {
        inherited[$_set](dart.runtimeType(object), object);
      }
      return this.copyWith({inherited: inherited});
    }
    localToGlobal(box) {
      let mat = this.canvas.getTransform();
      let lt = mat.transform3(vector_math_64.Vector3.new(box.left, box.bottom, 0.0));
      let lb = mat.transform3(vector_math_64.Vector3.new(box.left, box.top, 0.0));
      let rt = mat.transform3(vector_math_64.Vector3.new(box.right, box.bottom, 0.0));
      let rb = mat.transform3(vector_math_64.Vector3.new(box.right, box.top, 0.0));
      let x = JSArrayOfdoubleL().of([lt.x, lb.x, rt.x, rb.x]);
      let y = JSArrayOfdoubleL().of([lt.y, lb.y, rt.y, rb.y]);
      return rect$.PdfRect.fromLTRB(x[$reduce](dart.gbind(C76 || CT.C76, doubleL())), y[$reduce](dart.gbind(C76 || CT.C76, doubleL())), x[$reduce](dart.gbind(C77 || CT.C77, doubleL())), y[$reduce](dart.gbind(C77 || CT.C77, doubleL())));
    }
  };
  (widget$.Context.__ = function(opts) {
    let document = opts && 'document' in opts ? opts.document : null;
    let page = opts && 'page' in opts ? opts.page : null;
    let canvas = opts && 'canvas' in opts ? opts.canvas : null;
    let inherited = opts && 'inherited' in opts ? opts.inherited : null;
    this[document$1] = document;
    this[page$0] = page;
    this[canvas$] = canvas;
    this[inherited$] = inherited;
    if (!(document != null)) dart.assertFailed(null, L1, 48, 16, "document != null");
    if (!(inherited != null)) dart.assertFailed(null, L1, 49, 16, "inherited != null");
    ;
  }).prototype = widget$.Context.prototype;
  dart.addTypeTests(widget$.Context);
  dart.addTypeCaches(widget$.Context);
  dart.setMethodSignature(widget$.Context, () => ({
    __proto__: dart.getMethods(widget$.Context.__proto__),
    copyWith: dart.fnType(dart.legacy(widget$.Context), [], {canvas: dart.legacy(graphics.PdfGraphics), ctm: dart.legacy(vector_math_64.Matrix4), inherited: dart.legacy(collection.HashMap$(dart.legacy(core.Type), dart.legacy(widget$.Inherited))), page: dart.legacy(page.PdfPage)}, {}),
    inheritFrom: dart.fnType(dart.legacy(widget$.Context), [dart.legacy(widget$.Inherited)]),
    inheritFromAll: dart.fnType(dart.legacy(widget$.Context), [dart.legacy(core.Iterable$(dart.legacy(widget$.Inherited)))]),
    localToGlobal: dart.fnType(dart.legacy(rect$.PdfRect), [dart.legacy(rect$.PdfRect)])
  }));
  dart.setGetterSignature(widget$.Context, () => ({
    __proto__: dart.getGetters(widget$.Context.__proto__),
    pageNumber: dart.legacy(core.int),
    pagesCount: dart.legacy(core.int)
  }));
  dart.setLibraryUri(widget$.Context, L2);
  dart.setFieldSignature(widget$.Context, () => ({
    __proto__: dart.getFields(widget$.Context.__proto__),
    page: dart.finalFieldType(dart.legacy(page.PdfPage)),
    canvas: dart.finalFieldType(dart.legacy(graphics.PdfGraphics)),
    inherited: dart.finalFieldType(dart.legacy(collection.HashMap$(dart.legacy(core.Type), dart.legacy(widget$.Inherited)))),
    document: dart.finalFieldType(dart.legacy(document.PdfDocument))
  }));
  var C78;
  var children$0 = dart.privateName(widget$, "MultiChildWidget.children");
  widget$.MultiChildWidget = class MultiChildWidget extends widget$.Widget {
    get children() {
      return this[children$0];
    }
    set children(value) {
      super.children = value;
    }
  };
  (widget$.MultiChildWidget.new = function(opts) {
    let children = opts && 'children' in opts ? opts.children : C78 || CT.C78;
    this[children$0] = children;
    widget$.MultiChildWidget.__proto__.new.call(this);
    ;
  }).prototype = widget$.MultiChildWidget.prototype;
  dart.addTypeTests(widget$.MultiChildWidget);
  dart.addTypeCaches(widget$.MultiChildWidget);
  dart.setLibraryUri(widget$.MultiChildWidget, L2);
  dart.setFieldSignature(widget$.MultiChildWidget, () => ({
    __proto__: dart.getFields(widget$.MultiChildWidget.__proto__),
    children: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(widget$.Widget))))
  }));
  var _context = dart.privateName(widget$, "_context");
  var build$ = dart.privateName(widget$, "InheritedWidget.build");
  var inherited$0 = dart.privateName(widget$, "InheritedWidget.inherited");
  widget$.InheritedWidget = class InheritedWidget extends widget$.Widget {
    get build() {
      return this[build$];
    }
    set build(value) {
      super.build = value;
    }
    get inherited() {
      return this[inherited$0];
    }
    set inherited(value) {
      super.inherited = value;
    }
    layout(context, constraints, opts) {
      let t1;
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      this[_context] = this.inherited != null ? context.inheritFrom(this.inherited) : context;
      this[_child] = (t1 = this[_context], this.build(t1));
      if (this[_child] != null) {
        this[_child].layout(this[_context], constraints, {parentUsesSize: parentUsesSize});
        if (!(this[_child].box != null)) dart.assertFailed(null, L1, 300, 14, "_child.box != null");
        this.box = this[_child].box;
      } else {
        this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, constraints.smallest);
      }
    }
    paint(context) {
      let t1;
      if (!(this[_context] != null)) dart.assertFailed(null, L1, 309, 12, "_context != null");
      super.paint(this[_context]);
      if (this[_child] != null) {
        let mat = vector_math_64.Matrix4.identity();
        mat.translate(this.box.x, this.box.y);
        t1 = context.canvas;
        (() => {
          t1.saveContext();
          t1.setTransform(mat);
          return t1;
        })();
        this[_child].paint(this[_context]);
        context.canvas.restoreContext();
      }
    }
  };
  (widget$.InheritedWidget.new = function(opts) {
    let build = opts && 'build' in opts ? opts.build : null;
    let inherited = opts && 'inherited' in opts ? opts.inherited : null;
    this[_context] = null;
    this[_child] = null;
    this[build$] = build;
    this[inherited$0] = inherited;
    widget$.InheritedWidget.__proto__.new.call(this);
    ;
  }).prototype = widget$.InheritedWidget.prototype;
  dart.addTypeTests(widget$.InheritedWidget);
  dart.addTypeCaches(widget$.InheritedWidget);
  dart.setMethodSignature(widget$.InheritedWidget, () => ({
    __proto__: dart.getMethods(widget$.InheritedWidget.__proto__),
    layout: dart.fnType(dart.void, [dart.legacy(widget$.Context), dart.legacy(geometry.BoxConstraints)], {parentUsesSize: dart.legacy(core.bool)}, {})
  }));
  dart.setLibraryUri(widget$.InheritedWidget, L2);
  dart.setFieldSignature(widget$.InheritedWidget, () => ({
    __proto__: dart.getFields(widget$.InheritedWidget.__proto__),
    build: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(widget$.Widget), [dart.legacy(widget$.Context)]))),
    inherited: dart.finalFieldType(dart.legacy(widget$.Inherited)),
    [_context]: dart.fieldType(dart.legacy(widget$.Context)),
    [_child]: dart.fieldType(dart.legacy(widget$.Widget))
  }));
  var x$0 = dart.privateName(border_radius, "Radius.x");
  var y$0 = dart.privateName(border_radius, "Radius.y");
  var C79;
  border_radius.Radius = class Radius extends core.Object {
    get x() {
      return this[x$0];
    }
    set x(value) {
      super.x = value;
    }
    get y() {
      return this[y$0];
    }
    set y(value) {
      super.y = value;
    }
  };
  (border_radius.Radius.circular = function(radius) {
    border_radius.Radius.elliptical.call(this, radius, radius);
  }).prototype = border_radius.Radius.prototype;
  (border_radius.Radius.elliptical = function(x, y) {
    this[x$0] = x;
    this[y$0] = y;
    ;
  }).prototype = border_radius.Radius.prototype;
  dart.addTypeTests(border_radius.Radius);
  dart.addTypeCaches(border_radius.Radius);
  dart.setLibraryUri(border_radius.Radius, L24);
  dart.setFieldSignature(border_radius.Radius, () => ({
    __proto__: dart.getFields(border_radius.Radius.__proto__),
    x: dart.finalFieldType(dart.legacy(core.double)),
    y: dart.finalFieldType(dart.legacy(core.double))
  }));
  dart.defineLazy(border_radius.Radius, {
    /*border_radius.Radius.zero*/get zero() {
      return C79 || CT.C79;
    }
  }, true);
  var topLeft$ = dart.privateName(border_radius, "BorderRadius.topLeft");
  var topRight$ = dart.privateName(border_radius, "BorderRadius.topRight");
  var bottomLeft$ = dart.privateName(border_radius, "BorderRadius.bottomLeft");
  var bottomRight$ = dart.privateName(border_radius, "BorderRadius.bottomRight");
  var C80;
  border_radius.BorderRadius = class BorderRadius extends core.Object {
    get topLeft() {
      return this[topLeft$];
    }
    set topLeft(value) {
      super.topLeft = value;
    }
    get topRight() {
      return this[topRight$];
    }
    set topRight(value) {
      super.topRight = value;
    }
    get bottomLeft() {
      return this[bottomLeft$];
    }
    set bottomLeft(value) {
      super.bottomLeft = value;
    }
    get bottomRight() {
      return this[bottomRight$];
    }
    set bottomRight(value) {
      super.bottomRight = value;
    }
    paint(context, box) {
      let t1;
      t1 = context.canvas;
      (() => {
        t1.moveTo(box.x, dart.notNull(box.y) + dart.notNull(this.bottomLeft.y));
        t1.curveTo(box.x, dart.notNull(box.y) - 0.551784 * dart.notNull(this.bottomLeft.y) + dart.notNull(this.bottomLeft.y), dart.notNull(box.x) - 0.551784 * dart.notNull(this.bottomLeft.x) + dart.notNull(this.bottomLeft.x), box.y, dart.notNull(box.x) + dart.notNull(this.bottomLeft.x), box.y);
        t1.lineTo(dart.notNull(box.x) + dart.notNull(box.width) - dart.notNull(this.bottomRight.x), box.y);
        t1.curveTo(dart.notNull(box.x) + 0.551784 * dart.notNull(this.bottomRight.x) + dart.notNull(box.width) - dart.notNull(this.bottomRight.x), box.y, dart.notNull(box.x) + dart.notNull(box.width), dart.notNull(box.y) - 0.551784 * dart.notNull(this.bottomRight.y) + dart.notNull(this.bottomRight.y), dart.notNull(box.x) + dart.notNull(box.width), dart.notNull(box.y) + dart.notNull(this.bottomRight.y));
        t1.lineTo(dart.notNull(box.x) + dart.notNull(box.width), dart.notNull(box.y) + dart.notNull(box.height) - dart.notNull(this.topRight.y));
        t1.curveTo(dart.notNull(box.x) + dart.notNull(box.width), dart.notNull(box.y) + 0.551784 * dart.notNull(this.topRight.y) + dart.notNull(box.height) - dart.notNull(this.topRight.y), dart.notNull(box.x) + 0.551784 * dart.notNull(this.topRight.x) + dart.notNull(box.width) - dart.notNull(this.topRight.x), dart.notNull(box.y) + dart.notNull(box.height), dart.notNull(box.x) + dart.notNull(box.width) - dart.notNull(this.topRight.x), dart.notNull(box.y) + dart.notNull(box.height));
        t1.lineTo(dart.notNull(box.x) + dart.notNull(this.topLeft.x), dart.notNull(box.y) + dart.notNull(box.height));
        t1.curveTo(dart.notNull(box.x) - 0.551784 * dart.notNull(this.topLeft.x) + dart.notNull(this.topLeft.x), dart.notNull(box.y) + dart.notNull(box.height), box.x, dart.notNull(box.y) + 0.551784 * dart.notNull(this.topLeft.y) + dart.notNull(box.height) - dart.notNull(this.topLeft.y), box.x, dart.notNull(box.y) + dart.notNull(box.height) - dart.notNull(this.topLeft.y));
        t1.lineTo(box.x, dart.notNull(box.y) + dart.notNull(this.bottomLeft.y));
        return t1;
      })();
    }
  };
  (border_radius.BorderRadius.all = function(radius) {
    border_radius.BorderRadius.only.call(this, {topLeft: radius, topRight: radius, bottomLeft: radius, bottomRight: radius});
  }).prototype = border_radius.BorderRadius.prototype;
  (border_radius.BorderRadius.circular = function(radius) {
    border_radius.BorderRadius.all.call(this, new border_radius.Radius.circular(radius));
  }).prototype = border_radius.BorderRadius.prototype;
  (border_radius.BorderRadius.vertical = function(opts) {
    let top = opts && 'top' in opts ? opts.top : C79 || CT.C79;
    let bottom = opts && 'bottom' in opts ? opts.bottom : C79 || CT.C79;
    border_radius.BorderRadius.only.call(this, {topLeft: top, topRight: top, bottomLeft: bottom, bottomRight: bottom});
  }).prototype = border_radius.BorderRadius.prototype;
  (border_radius.BorderRadius.horizontal = function(opts) {
    let left = opts && 'left' in opts ? opts.left : C79 || CT.C79;
    let right = opts && 'right' in opts ? opts.right : C79 || CT.C79;
    border_radius.BorderRadius.only.call(this, {topLeft: left, topRight: right, bottomLeft: left, bottomRight: right});
  }).prototype = border_radius.BorderRadius.prototype;
  (border_radius.BorderRadius.only = function(opts) {
    let topLeft = opts && 'topLeft' in opts ? opts.topLeft : C79 || CT.C79;
    let topRight = opts && 'topRight' in opts ? opts.topRight : C79 || CT.C79;
    let bottomLeft = opts && 'bottomLeft' in opts ? opts.bottomLeft : C79 || CT.C79;
    let bottomRight = opts && 'bottomRight' in opts ? opts.bottomRight : C79 || CT.C79;
    this[topLeft$] = topLeft;
    this[topRight$] = topRight;
    this[bottomLeft$] = bottomLeft;
    this[bottomRight$] = bottomRight;
    ;
  }).prototype = border_radius.BorderRadius.prototype;
  dart.addTypeTests(border_radius.BorderRadius);
  dart.addTypeCaches(border_radius.BorderRadius);
  dart.setMethodSignature(border_radius.BorderRadius, () => ({
    __proto__: dart.getMethods(border_radius.BorderRadius.__proto__),
    paint: dart.fnType(dart.void, [dart.legacy(widget$.Context), dart.legacy(rect$.PdfRect)])
  }));
  dart.setLibraryUri(border_radius.BorderRadius, L24);
  dart.setFieldSignature(border_radius.BorderRadius, () => ({
    __proto__: dart.getFields(border_radius.BorderRadius.__proto__),
    topLeft: dart.finalFieldType(dart.legacy(border_radius.Radius)),
    topRight: dart.finalFieldType(dart.legacy(border_radius.Radius)),
    bottomLeft: dart.finalFieldType(dart.legacy(border_radius.Radius)),
    bottomRight: dart.finalFieldType(dart.legacy(border_radius.Radius))
  }));
  dart.defineLazy(border_radius.BorderRadius, {
    /*border_radius.BorderRadius.zero*/get zero() {
      return C80 || CT.C80;
    }
  }, true);
  var _name$5 = dart.privateName(box_border, "_name");
  var C81;
  var C82;
  var C83;
  var C84;
  var C85;
  box_border.BorderStyle = class BorderStyle extends core.Object {
    toString() {
      return this[_name$5];
    }
  };
  (box_border.BorderStyle.new = function(index, _name) {
    this.index = index;
    this[_name$5] = _name;
    ;
  }).prototype = box_border.BorderStyle.prototype;
  dart.addTypeTests(box_border.BorderStyle);
  dart.addTypeCaches(box_border.BorderStyle);
  dart.setMethodSignature(box_border.BorderStyle, () => ({
    __proto__: dart.getMethods(box_border.BorderStyle.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(box_border.BorderStyle, L25);
  dart.setFieldSignature(box_border.BorderStyle, () => ({
    __proto__: dart.getFields(box_border.BorderStyle.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$5]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(box_border.BorderStyle, ['toString']);
  box_border.BorderStyle.none = C81 || CT.C81;
  box_border.BorderStyle.solid = C82 || CT.C82;
  box_border.BorderStyle.dashed = C83 || CT.C83;
  box_border.BorderStyle.dotted = C84 || CT.C84;
  box_border.BorderStyle.values = C85 || CT.C85;
  var C86;
  var C87;
  box_border.BoxBorder = class BoxBorder extends core.Object {
    static _setStyle(context, style) {
      let t1, t1$;
      switch (style) {
        case C81 || CT.C81:
        case C82 || CT.C82:
        {
          break;
        }
        case C83 || CT.C83:
        {
          t1 = context.canvas;
          (() => {
            t1.saveContext();
            t1.setLineDashPattern(C86 || CT.C86);
            return t1;
          })();
          break;
        }
        case C84 || CT.C84:
        {
          t1$ = context.canvas;
          (() => {
            t1$.saveContext();
            t1$.setLineDashPattern(C87 || CT.C87);
            return t1$;
          })();
          break;
        }
      }
    }
    static _unsetStyle(context, style) {
      switch (style) {
        case C81 || CT.C81:
        case C82 || CT.C82:
        {
          break;
        }
        case C83 || CT.C83:
        case C84 || CT.C84:
        {
          context.canvas.restoreContext();
          break;
        }
      }
    }
    static _paintUniformBorderWithCircle(context, box, side) {
      let t1;
      box_border.BoxBorder._setStyle(context, side.style);
      t1 = context.canvas;
      (() => {
        t1.setStrokeColor(side.color);
        t1.setLineWidth(side.width);
        t1.drawEllipse(dart.notNull(box.x) + dart.notNull(box.width) / 2.0, dart.notNull(box.y) + dart.notNull(box.height) / 2.0, dart.notNull(box.width) / 2.0, dart.notNull(box.height) / 2.0);
        t1.strokePath();
        return t1;
      })();
      box_border.BoxBorder._unsetStyle(context, side.style);
    }
    static _paintUniformBorderWithRadius(context, box, side, borderRadius) {
      let t1;
      box_border.BoxBorder._setStyle(context, side.style);
      t1 = context.canvas;
      (() => {
        t1.setLineJoin(graphics.PdfLineJoin.miter);
        t1.setMiterLimit(4.0);
        t1.setStrokeColor(side.color);
        t1.setLineWidth(side.width);
        return t1;
      })();
      borderRadius.paint(context, box);
      context.canvas.strokePath();
      box_border.BoxBorder._unsetStyle(context, side.style);
    }
    static _paintUniformBorderWithRectangle(context, box, side) {
      let t1;
      box_border.BoxBorder._setStyle(context, side.style);
      t1 = context.canvas;
      (() => {
        t1.setLineJoin(graphics.PdfLineJoin.miter);
        t1.setMiterLimit(4.0);
        t1.setStrokeColor(side.color);
        t1.setLineWidth(side.width);
        t1.drawBox(box);
        t1.strokePath();
        return t1;
      })();
      box_border.BoxBorder._unsetStyle(context, side.style);
    }
  };
  (box_border.BoxBorder.new = function() {
    ;
  }).prototype = box_border.BoxBorder.prototype;
  dart.addTypeTests(box_border.BoxBorder);
  dart.addTypeCaches(box_border.BoxBorder);
  dart.setLibraryUri(box_border.BoxBorder, L25);
  var color$4 = dart.privateName(box_border, "BorderSide.color");
  var width$ = dart.privateName(box_border, "BorderSide.width");
  var style$1 = dart.privateName(box_border, "BorderSide.style");
  var C88;
  box_border.BorderSide = class BorderSide extends core.Object {
    get color() {
      return this[color$4];
    }
    set color(value) {
      super.color = value;
    }
    get width() {
      return this[width$];
    }
    set width(value) {
      super.width = value;
    }
    get style() {
      return this[style$1];
    }
    set style(value) {
      super.style = value;
    }
    copyWith(opts) {
      let color = opts && 'color' in opts ? opts.color : null;
      let width = opts && 'width' in opts ? opts.width : null;
      let style = opts && 'style' in opts ? opts.style : null;
      return new box_border.BorderSide.new({color: color, width: width, style: style});
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!dart.equals(dart.runtimeType(other), this.runtimeType)) {
        return false;
      }
      return BorderSideL().is(other) && dart.equals(other.color, this.color) && other.width == this.width && other.style == this.style;
    }
    get hashCode() {
      return dart.notNull(dart.hashCode(this.color)) + dart.hashCode(this.width) + dart.notNull(dart.hashCode(this.style));
    }
  };
  (box_border.BorderSide.new = function(opts) {
    let color = opts && 'color' in opts ? opts.color : C29 || CT.C29;
    let width = opts && 'width' in opts ? opts.width : 1;
    let style = opts && 'style' in opts ? opts.style : C82 || CT.C82;
    this[color$4] = color;
    this[width$] = width;
    this[style$1] = style;
    ;
  }).prototype = box_border.BorderSide.prototype;
  dart.addTypeTests(box_border.BorderSide);
  dart.addTypeCaches(box_border.BorderSide);
  dart.setMethodSignature(box_border.BorderSide, () => ({
    __proto__: dart.getMethods(box_border.BorderSide.__proto__),
    copyWith: dart.fnType(dart.legacy(box_border.BorderSide), [], {color: dart.legacy(color.PdfColor), style: dart.legacy(box_border.BorderStyle), width: dart.legacy(core.double)}, {}),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(box_border.BorderSide, () => ({
    __proto__: dart.getGetters(box_border.BorderSide.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(box_border.BorderSide, L25);
  dart.setFieldSignature(box_border.BorderSide, () => ({
    __proto__: dart.getFields(box_border.BorderSide.__proto__),
    color: dart.finalFieldType(dart.legacy(color.PdfColor)),
    width: dart.finalFieldType(dart.legacy(core.double)),
    style: dart.finalFieldType(dart.legacy(box_border.BorderStyle))
  }));
  dart.defineExtensionMethods(box_border.BorderSide, ['_equals']);
  dart.defineExtensionAccessors(box_border.BorderSide, ['hashCode']);
  dart.defineLazy(box_border.BorderSide, {
    /*box_border.BorderSide.none*/get none() {
      return C88 || CT.C88;
    }
  }, true);
  var top$0 = dart.privateName(box_border, "Border.top");
  var bottom$0 = dart.privateName(box_border, "Border.bottom");
  var left$0 = dart.privateName(box_border, "Border.left");
  var right$0 = dart.privateName(box_border, "Border.right");
  box_border.Border = class Border extends box_border.BoxBorder {
    get top() {
      return this[top$0];
    }
    set top(value) {
      super.top = value;
    }
    get bottom() {
      return this[bottom$0];
    }
    set bottom(value) {
      super.bottom = value;
    }
    get left() {
      return this[left$0];
    }
    set left(value) {
      super.left = value;
    }
    get right() {
      return this[right$0];
    }
    set right(value) {
      super.right = value;
    }
    static all(opts) {
      let color = opts && 'color' in opts ? opts.color : C29 || CT.C29;
      let width = opts && 'width' in opts ? opts.width : 1;
      let style = opts && 'style' in opts ? opts.style : C82 || CT.C82;
      return new box_border.Border.fromBorderSide(new box_border.BorderSide.new({color: color, width: width, style: style}));
    }
    get isUniform() {
      return dart.equals(this.top, this.bottom) && dart.equals(this.bottom, this.left) && dart.equals(this.left, this.right);
    }
    paint(context, box, opts) {
      let t1, t1$, t1$0, t1$1, t1$2;
      let shape = opts && 'shape' in opts ? opts.shape : C32 || CT.C32;
      let borderRadius = opts && 'borderRadius' in opts ? opts.borderRadius : null;
      if (!(box.x != null)) dart.assertFailed(null, L26, 230, 12, "box.x != null");
      if (!(box.y != null)) dart.assertFailed(null, L26, 231, 12, "box.y != null");
      if (!(box.width != null)) dart.assertFailed(null, L26, 232, 12, "box.width != null");
      if (!(box.height != null)) dart.assertFailed(null, L26, 233, 12, "box.height != null");
      if (dart.test(this.isUniform)) {
        if (this.top.style == box_border.BorderStyle.none) {
          return;
        }
        switch (shape) {
          case C31 || CT.C31:
          {
            if (!(borderRadius == null)) dart.assertFailed("A borderRadius can only be given for rectangular boxes.", L26, 242, 18, "borderRadius == null");
            box_border.BoxBorder._paintUniformBorderWithCircle(context, box, this.top);
            break;
          }
          case C32 || CT.C32:
          {
            if (borderRadius != null) {
              box_border.BoxBorder._paintUniformBorderWithRadius(context, box, this.top, borderRadius);
              return;
            }
            box_border.BoxBorder._paintUniformBorderWithRectangle(context, box, this.top);
            break;
          }
        }
        return;
      }
      if (!(borderRadius == null)) dart.assertFailed("A borderRadius can only be given for a uniform Border.", L26, 258, 12, "borderRadius == null");
      t1 = context.canvas;
      (() => {
        t1.setLineCap(graphics.PdfLineCap.square);
        t1.setMiterLimit(4.0);
        t1.setLineJoin(graphics.PdfLineJoin.miter);
        return t1;
      })();
      if (this.top.style != box_border.BorderStyle.none) {
        box_border.BoxBorder._setStyle(context, this.top.style);
        t1$ = context.canvas;
        (() => {
          t1$.setStrokeColor(this.top.color);
          t1$.setLineWidth(this.top.width);
          t1$.drawLine(box.left, box.top, box.right, box.top);
          t1$.strokePath();
          return t1$;
        })();
        box_border.BoxBorder._unsetStyle(context, this.top.style);
      }
      if (this.right.style != box_border.BorderStyle.none) {
        box_border.BoxBorder._setStyle(context, this.right.style);
        t1$0 = context.canvas;
        (() => {
          t1$0.setStrokeColor(this.right.color);
          t1$0.setLineWidth(this.right.width);
          t1$0.drawLine(box.right, box.top, box.right, box.bottom);
          t1$0.strokePath();
          return t1$0;
        })();
        box_border.BoxBorder._unsetStyle(context, this.right.style);
      }
      if (this.bottom.style != box_border.BorderStyle.none) {
        box_border.BoxBorder._setStyle(context, this.bottom.style);
        t1$1 = context.canvas;
        (() => {
          t1$1.setStrokeColor(this.bottom.color);
          t1$1.setLineWidth(this.bottom.width);
          t1$1.drawLine(box.right, box.bottom, box.left, box.bottom);
          t1$1.strokePath();
          return t1$1;
        })();
        box_border.BoxBorder._unsetStyle(context, this.bottom.style);
      }
      if (this.left.style != box_border.BorderStyle.none) {
        box_border.BoxBorder._setStyle(context, this.left.style);
        t1$2 = context.canvas;
        (() => {
          t1$2.setStrokeColor(this.left.color);
          t1$2.setLineWidth(this.left.width);
          t1$2.drawLine(box.left, box.top, box.left, box.bottom);
          t1$2.strokePath();
          return t1$2;
        })();
        box_border.BoxBorder._unsetStyle(context, this.left.style);
      }
    }
  };
  (box_border.Border.new = function(opts) {
    let top = opts && 'top' in opts ? opts.top : C88 || CT.C88;
    let right = opts && 'right' in opts ? opts.right : C88 || CT.C88;
    let bottom = opts && 'bottom' in opts ? opts.bottom : C88 || CT.C88;
    let left = opts && 'left' in opts ? opts.left : C88 || CT.C88;
    this[top$0] = top;
    this[right$0] = right;
    this[bottom$0] = bottom;
    this[left$0] = left;
    if (!(top != null)) dart.assertFailed(null, L26, 171, 16, "top != null");
    if (!(right != null)) dart.assertFailed(null, L26, 172, 16, "right != null");
    if (!(bottom != null)) dart.assertFailed(null, L26, 173, 16, "bottom != null");
    if (!(left != null)) dart.assertFailed(null, L26, 174, 16, "left != null");
    box_border.Border.__proto__.new.call(this);
    ;
  }).prototype = box_border.Border.prototype;
  (box_border.Border.fromBorderSide = function(side) {
    if (!(side != null)) dart.assertFailed(null, L26, 189, 16, "side != null");
    this[top$0] = side;
    this[right$0] = side;
    this[bottom$0] = side;
    this[left$0] = side;
    box_border.Border.__proto__.new.call(this);
    ;
  }).prototype = box_border.Border.prototype;
  (box_border.Border.symmetric = function(opts) {
    let vertical = opts && 'vertical' in opts ? opts.vertical : C88 || CT.C88;
    let horizontal = opts && 'horizontal' in opts ? opts.horizontal : C88 || CT.C88;
    if (!(vertical != null)) dart.assertFailed(null, L26, 200, 16, "vertical != null");
    if (!(horizontal != null)) dart.assertFailed(null, L26, 201, 16, "horizontal != null");
    this[left$0] = vertical;
    this[top$0] = horizontal;
    this[right$0] = vertical;
    this[bottom$0] = horizontal;
    box_border.Border.__proto__.new.call(this);
    ;
  }).prototype = box_border.Border.prototype;
  dart.addTypeTests(box_border.Border);
  dart.addTypeCaches(box_border.Border);
  dart.setMethodSignature(box_border.Border, () => ({
    __proto__: dart.getMethods(box_border.Border.__proto__),
    paint: dart.fnType(dart.void, [dart.legacy(widget$.Context), dart.legacy(rect$.PdfRect)], {borderRadius: dart.legacy(border_radius.BorderRadius), shape: dart.legacy(decoration$.BoxShape)}, {})
  }));
  dart.setGetterSignature(box_border.Border, () => ({
    __proto__: dart.getGetters(box_border.Border.__proto__),
    isUniform: dart.legacy(core.bool)
  }));
  dart.setLibraryUri(box_border.Border, L25);
  dart.setFieldSignature(box_border.Border, () => ({
    __proto__: dart.getFields(box_border.Border.__proto__),
    top: dart.finalFieldType(dart.legacy(box_border.BorderSide)),
    bottom: dart.finalFieldType(dart.legacy(box_border.BorderSide)),
    left: dart.finalFieldType(dart.legacy(box_border.BorderSide)),
    right: dart.finalFieldType(dart.legacy(box_border.BorderSide))
  }));
  var C89;
  basic.BoxFit = class BoxFit extends core.Object {
    toString() {
      return this[_name$2];
    }
  };
  (basic.BoxFit.new = function(index, _name) {
    this.index = index;
    this[_name$2] = _name;
    ;
  }).prototype = basic.BoxFit.prototype;
  dart.addTypeTests(basic.BoxFit);
  dart.addTypeCaches(basic.BoxFit);
  dart.setMethodSignature(basic.BoxFit, () => ({
    __proto__: dart.getMethods(basic.BoxFit.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(basic.BoxFit, L27);
  dart.setFieldSignature(basic.BoxFit, () => ({
    __proto__: dart.getFields(basic.BoxFit.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$2]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(basic.BoxFit, ['toString']);
  basic.BoxFit.fill = C65 || CT.C65;
  basic.BoxFit.contain = C66 || CT.C66;
  basic.BoxFit.cover = C23 || CT.C23;
  basic.BoxFit.fitWidth = C67 || CT.C67;
  basic.BoxFit.fitHeight = C68 || CT.C68;
  basic.BoxFit.none = C69 || CT.C69;
  basic.BoxFit.scaleDown = C70 || CT.C70;
  basic.BoxFit.values = C89 || CT.C89;
  var _limitConstraints = dart.privateName(basic, "_limitConstraints");
  var maxWidth$0 = dart.privateName(basic, "LimitedBox.maxWidth");
  var maxHeight$0 = dart.privateName(basic, "LimitedBox.maxHeight");
  basic.LimitedBox = class LimitedBox extends widget$.SingleChildWidget {
    get maxWidth() {
      return this[maxWidth$0];
    }
    set maxWidth(value) {
      super.maxWidth = value;
    }
    get maxHeight() {
      return this[maxHeight$0];
    }
    set maxHeight(value) {
      super.maxHeight = value;
    }
    [_limitConstraints](constraints) {
      return new geometry.BoxConstraints.new({minWidth: constraints.minWidth, maxWidth: dart.test(constraints.hasBoundedWidth) ? constraints.maxWidth : constraints.constrainWidth(this.maxWidth), minHeight: constraints.minHeight, maxHeight: dart.test(constraints.hasBoundedHeight) ? constraints.maxHeight : constraints.constrainHeight(this.maxHeight)});
    }
    layout(context, constraints, opts) {
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      let size = null;
      if (this.child != null) {
        this.child.layout(context, this[_limitConstraints](constraints), {parentUsesSize: true});
        if (!(this.child.box != null)) dart.assertFailed(null, L28, 63, 14, "child.box != null");
        size = constraints.constrain(this.child.box.size);
      } else {
        size = this[_limitConstraints](constraints).constrain(point$.PdfPoint.zero);
      }
      this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, size);
    }
    paint(context) {
      super.paint(context);
      this.paintChild(context);
    }
  };
  (basic.LimitedBox.new = function(opts) {
    let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : 1 / 0;
    let maxHeight = opts && 'maxHeight' in opts ? opts.maxHeight : 1 / 0;
    let child = opts && 'child' in opts ? opts.child : null;
    this[maxWidth$0] = maxWidth;
    this[maxHeight$0] = maxHeight;
    if (!(maxWidth != null && dart.notNull(maxWidth) >= 0.0)) dart.assertFailed(null, L28, 36, 16, "maxWidth != null && maxWidth >= 0.0");
    if (!(maxHeight != null && dart.notNull(maxHeight) >= 0.0)) dart.assertFailed(null, L28, 37, 16, "maxHeight != null && maxHeight >= 0.0");
    basic.LimitedBox.__proto__.new.call(this, {child: child});
    ;
  }).prototype = basic.LimitedBox.prototype;
  dart.addTypeTests(basic.LimitedBox);
  dart.addTypeCaches(basic.LimitedBox);
  dart.setMethodSignature(basic.LimitedBox, () => ({
    __proto__: dart.getMethods(basic.LimitedBox.__proto__),
    [_limitConstraints]: dart.fnType(dart.legacy(geometry.BoxConstraints), [dart.legacy(geometry.BoxConstraints)])
  }));
  dart.setLibraryUri(basic.LimitedBox, L27);
  dart.setFieldSignature(basic.LimitedBox, () => ({
    __proto__: dart.getFields(basic.LimitedBox.__proto__),
    maxWidth: dart.finalFieldType(dart.legacy(core.double)),
    maxHeight: dart.finalFieldType(dart.legacy(core.double))
  }));
  var padding$0 = dart.privateName(basic, "Padding.padding");
  basic.Padding = class Padding extends widget$.SingleChildWidget {
    get padding() {
      return this[padding$0];
    }
    set padding(value) {
      super.padding = value;
    }
    layout(context, constraints, opts) {
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      if (this.child != null) {
        let childConstraints = constraints.deflate(this.padding);
        this.child.layout(context, childConstraints, {parentUsesSize: parentUsesSize});
        if (!(this.child.box != null)) dart.assertFailed(null, L28, 93, 14, "child.box != null");
        this.box = constraints.constrainRect({width: dart.notNull(this.child.box.width) + dart.notNull(this.padding.horizontal), height: dart.notNull(this.child.box.height) + dart.notNull(this.padding.vertical)});
      } else {
        this.box = constraints.constrainRect({width: this.padding.horizontal, height: this.padding.vertical});
      }
    }
    debugPaint(context) {
      let t1;
      t1 = context.canvas;
      (() => {
        t1.setFillColor(colors.PdfColors.lime);
        t1.moveTo(this.box.x, this.box.y);
        t1.lineTo(this.box.right, this.box.y);
        t1.lineTo(this.box.right, this.box.top);
        t1.lineTo(this.box.x, this.box.top);
        t1.moveTo(dart.notNull(this.box.x) + dart.notNull(this.padding.left), dart.notNull(this.box.y) + dart.notNull(this.padding.bottom));
        t1.lineTo(dart.notNull(this.box.x) + dart.notNull(this.padding.left), dart.notNull(this.box.top) - dart.notNull(this.padding.top));
        t1.lineTo(dart.notNull(this.box.right) - dart.notNull(this.padding.right), dart.notNull(this.box.top) - dart.notNull(this.padding.top));
        t1.lineTo(dart.notNull(this.box.right) - dart.notNull(this.padding.right), dart.notNull(this.box.y) + dart.notNull(this.padding.bottom));
        t1.fillPath();
        return t1;
      })();
    }
    paint(context) {
      let t1;
      super.paint(context);
      if (this.child != null) {
        let mat = vector_math_64.Matrix4.identity();
        mat.translate(dart.notNull(this.box.x) + dart.notNull(this.padding.left), dart.notNull(this.box.y) + dart.notNull(this.padding.bottom));
        t1 = context.canvas;
        (() => {
          t1.saveContext();
          t1.setTransform(mat);
          return t1;
        })();
        this.child.paint(context);
        context.canvas.restoreContext();
      }
    }
  };
  (basic.Padding.new = function(opts) {
    let padding = opts && 'padding' in opts ? opts.padding : null;
    let child = opts && 'child' in opts ? opts.child : null;
    this[padding$0] = padding;
    if (!(padding != null)) dart.assertFailed(null, L28, 82, 16, "padding != null");
    basic.Padding.__proto__.new.call(this, {child: child});
    ;
  }).prototype = basic.Padding.prototype;
  dart.addTypeTests(basic.Padding);
  dart.addTypeCaches(basic.Padding);
  dart.setLibraryUri(basic.Padding, L27);
  dart.setFieldSignature(basic.Padding, () => ({
    __proto__: dart.getFields(basic.Padding.__proto__),
    padding: dart.finalFieldType(dart.legacy(geometry.EdgeInsets))
  }));
  var _effectiveTransform = dart.privateName(basic, "_effectiveTransform");
  var transform$0 = dart.privateName(basic, "Transform.transform");
  var origin$ = dart.privateName(basic, "Transform.origin");
  var alignment$1 = dart.privateName(basic, "Transform.alignment");
  var adjustLayout$ = dart.privateName(basic, "Transform.adjustLayout");
  basic.Transform = class Transform extends widget$.SingleChildWidget {
    get transform() {
      return this[transform$0];
    }
    set transform(value) {
      super.transform = value;
    }
    get origin() {
      return this[origin$];
    }
    set origin(value) {
      super.origin = value;
    }
    get alignment() {
      return this[alignment$1];
    }
    set alignment(value) {
      super.alignment = value;
    }
    get adjustLayout() {
      return this[adjustLayout$];
    }
    set adjustLayout(value) {
      super.adjustLayout = value;
    }
    get [_effectiveTransform]() {
      let result = vector_math_64.Matrix4.identity();
      if (this.origin != null) {
        result.translate(this.origin.x, this.origin.y);
      }
      result.translate(this.box.x, this.box.y);
      let translation = null;
      if (this.alignment != null) {
        translation = this.alignment.alongSize(this.box.size);
        result.translate(translation.x, translation.y);
      }
      result.multiply(this.transform);
      if (this.alignment != null) {
        result.translate(-dart.notNull(translation.x), -dart.notNull(translation.y));
      }
      if (this.origin != null) {
        result.translate(-dart.notNull(this.origin.x), -dart.notNull(this.origin.y));
      }
      return result;
    }
    layout(context, constraints, opts) {
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      if (!dart.test(this.adjustLayout)) {
        return super.layout(context, constraints, {parentUsesSize: parentUsesSize});
      }
      if (this.child != null) {
        this.child.layout(context, constraints, {parentUsesSize: parentUsesSize});
        if (!(this.child.box != null)) dart.assertFailed(null, L28, 227, 14, "child.box != null");
        let mat = this.transform;
        let values = mat.applyToVector3Array(JSArrayOfdoubleL().of([this.child.box.left, this.child.box.top, 0.0, this.child.box.right, this.child.box.top, 0.0, this.child.box.right, this.child.box.bottom, 0.0, this.child.box.left, this.child.box.bottom, 0.0]));
        let dx = -math.min(doubleL(), math.min(doubleL(), math.min(doubleL(), values[$_get](0), values[$_get](3)), values[$_get](6)), values[$_get](9));
        let dy = -math.min(doubleL(), math.min(doubleL(), math.min(doubleL(), values[$_get](1), values[$_get](4)), values[$_get](7)), values[$_get](10));
        this.box = rect$.PdfRect.fromLTRB(0.0, 0.0, math.max(doubleL(), math.max(doubleL(), math.max(doubleL(), values[$_get](0), values[$_get](3)), values[$_get](6)), values[$_get](9)) + dx, math.max(doubleL(), math.max(doubleL(), math.max(doubleL(), values[$_get](1), values[$_get](4)), values[$_get](7)), values[$_get](10)) + dy);
        this.transform.leftTranslate(dx, dy);
      } else {
        this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, constraints.smallest);
      }
    }
    paint(context) {
      let t1;
      super.paint(context);
      if (this.child != null) {
        let mat = this[_effectiveTransform];
        t1 = context.canvas;
        (() => {
          t1.saveContext();
          t1.setTransform(mat);
          return t1;
        })();
        this.child.paint(context);
        context.canvas.restoreContext();
      }
    }
  };
  (basic.Transform.new = function(opts) {
    let transform = opts && 'transform' in opts ? opts.transform : null;
    let origin = opts && 'origin' in opts ? opts.origin : null;
    let alignment = opts && 'alignment' in opts ? opts.alignment : null;
    let adjustLayout = opts && 'adjustLayout' in opts ? opts.adjustLayout : false;
    let child = opts && 'child' in opts ? opts.child : null;
    this[transform$0] = transform;
    this[origin$] = origin;
    this[alignment$1] = alignment;
    this[adjustLayout$] = adjustLayout;
    if (!(transform != null)) dart.assertFailed(null, L28, 141, 16, "transform != null");
    basic.Transform.__proto__.new.call(this, {child: child});
    ;
  }).prototype = basic.Transform.prototype;
  (basic.Transform.rotate = function(opts) {
    let angle = opts && 'angle' in opts ? opts.angle : null;
    let origin = opts && 'origin' in opts ? opts.origin : null;
    let alignment = opts && 'alignment' in opts ? opts.alignment : C24 || CT.C24;
    let child = opts && 'child' in opts ? opts.child : null;
    this[origin$] = origin;
    this[alignment$1] = alignment;
    this[transform$0] = vector_math_64.Matrix4.rotationZ(angle);
    this[adjustLayout$] = false;
    basic.Transform.__proto__.new.call(this, {child: child});
    ;
  }).prototype = basic.Transform.prototype;
  (basic.Transform.rotateBox = function(opts) {
    let angle = opts && 'angle' in opts ? opts.angle : null;
    let child = opts && 'child' in opts ? opts.child : null;
    this[transform$0] = vector_math_64.Matrix4.rotationZ(angle);
    this[adjustLayout$] = true;
    this[alignment$1] = null;
    this[origin$] = null;
    basic.Transform.__proto__.new.call(this, {child: child});
    ;
  }).prototype = basic.Transform.prototype;
  (basic.Transform.translate = function(opts) {
    let offset = opts && 'offset' in opts ? opts.offset : null;
    let child = opts && 'child' in opts ? opts.child : null;
    this[transform$0] = vector_math_64.Matrix4.translationValues(offset.x, offset.y, 0.0);
    this[origin$] = null;
    this[alignment$1] = null;
    this[adjustLayout$] = false;
    basic.Transform.__proto__.new.call(this, {child: child});
    ;
  }).prototype = basic.Transform.prototype;
  (basic.Transform.scale = function(opts) {
    let scale = opts && 'scale' in opts ? opts.scale : null;
    let origin = opts && 'origin' in opts ? opts.origin : null;
    let alignment = opts && 'alignment' in opts ? opts.alignment : C24 || CT.C24;
    let child = opts && 'child' in opts ? opts.child : null;
    this[origin$] = origin;
    this[alignment$1] = alignment;
    this[transform$0] = vector_math_64.Matrix4.diagonal3Values(scale, scale, 1.0);
    this[adjustLayout$] = false;
    basic.Transform.__proto__.new.call(this, {child: child});
    ;
  }).prototype = basic.Transform.prototype;
  dart.addTypeTests(basic.Transform);
  dart.addTypeCaches(basic.Transform);
  dart.setGetterSignature(basic.Transform, () => ({
    __proto__: dart.getGetters(basic.Transform.__proto__),
    [_effectiveTransform]: dart.legacy(vector_math_64.Matrix4)
  }));
  dart.setLibraryUri(basic.Transform, L27);
  dart.setFieldSignature(basic.Transform, () => ({
    __proto__: dart.getFields(basic.Transform.__proto__),
    transform: dart.finalFieldType(dart.legacy(vector_math_64.Matrix4)),
    origin: dart.finalFieldType(dart.legacy(point$.PdfPoint)),
    alignment: dart.finalFieldType(dart.legacy(geometry.Alignment)),
    adjustLayout: dart.finalFieldType(dart.legacy(core.bool))
  }));
  var alignment$2 = dart.privateName(basic, "Align.alignment");
  var widthFactor$ = dart.privateName(basic, "Align.widthFactor");
  var heightFactor$ = dart.privateName(basic, "Align.heightFactor");
  basic.Align = class Align extends widget$.SingleChildWidget {
    get alignment() {
      return this[alignment$2];
    }
    set alignment(value) {
      super.alignment = value;
    }
    get widthFactor() {
      return this[widthFactor$];
    }
    set widthFactor(value) {
      super.widthFactor = value;
    }
    get heightFactor() {
      return this[heightFactor$];
    }
    set heightFactor(value) {
      super.heightFactor = value;
    }
    layout(context, constraints, opts) {
      let t1, t1$;
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      let shrinkWrapWidth = this.widthFactor != null || constraints.maxWidth === 1 / 0;
      let shrinkWrapHeight = this.heightFactor != null || constraints.maxHeight === 1 / 0;
      if (this.child != null) {
        this.child.layout(context, constraints.loosen(), {parentUsesSize: true});
        if (!(this.child.box != null)) dart.assertFailed(null, L28, 314, 14, "child.box != null");
        this.box = constraints.constrainRect({width: shrinkWrapWidth ? dart.notNull(this.child.box.width) * dart.notNull((t1 = this.widthFactor, t1 == null ? 1.0 : t1)) : 1 / 0, height: shrinkWrapHeight ? dart.notNull(this.child.box.height) * dart.notNull((t1$ = this.heightFactor, t1$ == null ? 1.0 : t1$)) : 1 / 0});
        this.child.box = this.alignment.inscribe(this.child.box.size, this.box);
      } else {
        this.box = constraints.constrainRect({width: shrinkWrapWidth ? 0.0 : 1 / 0, height: shrinkWrapHeight ? 0.0 : 1 / 0});
      }
    }
    debugPaint(context) {
      let t1, t1$, t1$0, t1$1, t1$2;
      t1 = context.canvas;
      (() => {
        t1.setStrokeColor(colors.PdfColors.green);
        t1.setLineWidth(1.0);
        t1.drawBox(this.box);
        return t1;
      })();
      if (this.child == null) {
        context.canvas.strokePath();
        return;
      }
      if (dart.notNull(this.child.box.bottom) > 0) {
        let headSize = math.min(numL(), dart.notNull(this.child.box.bottom) * 0.2, 10);
        t1$ = context.canvas;
        (() => {
          t1$.moveTo(dart.notNull(this.box.left) + dart.notNull(this.child.box.horizondalCenter), this.box.bottom);
          t1$.lineTo(dart.notNull(this.box.left) + dart.notNull(this.child.box.horizondalCenter), dart.notNull(this.box.bottom) + dart.notNull(this.child.box.bottom));
          t1$.lineTo(dart.notNull(this.box.left) + dart.notNull(this.child.box.horizondalCenter) - headSize, dart.notNull(this.box.bottom) + dart.notNull(this.child.box.bottom) - headSize);
          t1$.moveTo(dart.notNull(this.box.left) + dart.notNull(this.child.box.horizondalCenter), dart.notNull(this.box.bottom) + dart.notNull(this.child.box.bottom));
          t1$.lineTo(dart.notNull(this.box.left) + dart.notNull(this.child.box.horizondalCenter) + headSize, dart.notNull(this.box.bottom) + dart.notNull(this.child.box.bottom) - headSize);
          return t1$;
        })();
      }
      if (dart.notNull(this.box.bottom) + dart.notNull(this.child.box.top) < dart.notNull(this.box.top)) {
        let headSize = math.min(numL(), (dart.notNull(this.box.top) - dart.notNull(this.child.box.top) - dart.notNull(this.box.bottom)) * 0.2, 10);
        t1$0 = context.canvas;
        (() => {
          t1$0.moveTo(dart.notNull(this.box.left) + dart.notNull(this.child.box.horizondalCenter), this.box.top);
          t1$0.lineTo(dart.notNull(this.box.left) + dart.notNull(this.child.box.horizondalCenter), dart.notNull(this.box.bottom) + dart.notNull(this.child.box.top));
          t1$0.lineTo(dart.notNull(this.box.left) + dart.notNull(this.child.box.horizondalCenter) - headSize, dart.notNull(this.box.bottom) + dart.notNull(this.child.box.top) + headSize);
          t1$0.moveTo(dart.notNull(this.box.left) + dart.notNull(this.child.box.horizondalCenter), dart.notNull(this.box.bottom) + dart.notNull(this.child.box.top));
          t1$0.lineTo(dart.notNull(this.box.left) + dart.notNull(this.child.box.horizondalCenter) + headSize, dart.notNull(this.box.bottom) + dart.notNull(this.child.box.top) + headSize);
          return t1$0;
        })();
      }
      if (dart.notNull(this.child.box.left) > 0) {
        let headSize = math.min(numL(), dart.notNull(this.child.box.left) * 0.2, 10);
        t1$1 = context.canvas;
        (() => {
          t1$1.moveTo(this.box.left, dart.notNull(this.box.bottom) + dart.notNull(this.child.box.verticalCenter));
          t1$1.lineTo(dart.notNull(this.box.left) + dart.notNull(this.child.box.left), dart.notNull(this.box.bottom) + dart.notNull(this.child.box.verticalCenter));
          t1$1.lineTo(dart.notNull(this.box.left) + dart.notNull(this.child.box.left) - headSize, dart.notNull(this.box.bottom) + dart.notNull(this.child.box.verticalCenter) - headSize);
          t1$1.moveTo(dart.notNull(this.box.left) + dart.notNull(this.child.box.left), dart.notNull(this.box.bottom) + dart.notNull(this.child.box.verticalCenter));
          t1$1.lineTo(dart.notNull(this.box.left) + dart.notNull(this.child.box.left) - headSize, dart.notNull(this.box.bottom) + dart.notNull(this.child.box.verticalCenter) + headSize);
          return t1$1;
        })();
      }
      if (dart.notNull(this.box.left) + dart.notNull(this.child.box.right) < dart.notNull(this.box.right)) {
        let headSize = math.min(numL(), (dart.notNull(this.box.right) - dart.notNull(this.child.box.right) - dart.notNull(this.box.left)) * 0.2, 10);
        t1$2 = context.canvas;
        (() => {
          t1$2.moveTo(this.box.right, dart.notNull(this.box.bottom) + dart.notNull(this.child.box.verticalCenter));
          t1$2.lineTo(dart.notNull(this.box.left) + dart.notNull(this.child.box.right), dart.notNull(this.box.bottom) + dart.notNull(this.child.box.verticalCenter));
          t1$2.lineTo(dart.notNull(this.box.left) + dart.notNull(this.child.box.right) + headSize, dart.notNull(this.box.bottom) + dart.notNull(this.child.box.verticalCenter) - headSize);
          t1$2.moveTo(dart.notNull(this.box.left) + dart.notNull(this.child.box.right), dart.notNull(this.box.bottom) + dart.notNull(this.child.box.verticalCenter));
          t1$2.lineTo(dart.notNull(this.box.left) + dart.notNull(this.child.box.right) + headSize, dart.notNull(this.box.bottom) + dart.notNull(this.child.box.verticalCenter) + headSize);
          return t1$2;
        })();
      }
      context.canvas.strokePath();
    }
    paint(context) {
      super.paint(context);
      this.paintChild(context);
    }
  };
  (basic.Align.new = function(opts) {
    let alignment = opts && 'alignment' in opts ? opts.alignment : C24 || CT.C24;
    let widthFactor = opts && 'widthFactor' in opts ? opts.widthFactor : null;
    let heightFactor = opts && 'heightFactor' in opts ? opts.heightFactor : null;
    let child = opts && 'child' in opts ? opts.child : null;
    this[alignment$2] = alignment;
    this[widthFactor$] = widthFactor;
    this[heightFactor$] = heightFactor;
    if (!(alignment != null)) dart.assertFailed(null, L28, 290, 16, "alignment != null");
    if (!(widthFactor == null || dart.notNull(widthFactor) >= 0.0)) dart.assertFailed(null, L28, 291, 16, "widthFactor == null || widthFactor >= 0.0");
    if (!(heightFactor == null || dart.notNull(heightFactor) >= 0.0)) dart.assertFailed(null, L28, 292, 16, "heightFactor == null || heightFactor >= 0.0");
    basic.Align.__proto__.new.call(this, {child: child});
    ;
  }).prototype = basic.Align.prototype;
  dart.addTypeTests(basic.Align);
  dart.addTypeCaches(basic.Align);
  dart.setLibraryUri(basic.Align, L27);
  dart.setFieldSignature(basic.Align, () => ({
    __proto__: dart.getFields(basic.Align.__proto__),
    alignment: dart.finalFieldType(dart.legacy(geometry.Alignment)),
    widthFactor: dart.finalFieldType(dart.legacy(core.double)),
    heightFactor: dart.finalFieldType(dart.legacy(core.double))
  }));
  var constraints$0 = dart.privateName(basic, "ConstrainedBox.constraints");
  basic.ConstrainedBox = class ConstrainedBox extends widget$.SingleChildWidget {
    get constraints() {
      return this[constraints$0];
    }
    set constraints(value) {
      super.constraints = value;
    }
    layout(context, constraints, opts) {
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      if (this.child != null) {
        this.child.layout(context, this.constraints.enforce(constraints), {parentUsesSize: true});
        if (!(this.child.box != null)) dart.assertFailed(null, L28, 430, 14, "child.box != null");
        this.box = this.child.box;
      } else {
        this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, this.constraints.enforce(constraints).constrain(point$.PdfPoint.zero));
      }
    }
    paint(context) {
      super.paint(context);
      this.paintChild(context);
    }
  };
  (basic.ConstrainedBox.new = function(opts) {
    let constraints = opts && 'constraints' in opts ? opts.constraints : null;
    let child = opts && 'child' in opts ? opts.child : null;
    this[constraints$0] = constraints;
    if (!(constraints != null)) dart.assertFailed(null, L28, 418, 16, "constraints != null");
    basic.ConstrainedBox.__proto__.new.call(this, {child: child});
    ;
  }).prototype = basic.ConstrainedBox.prototype;
  dart.addTypeTests(basic.ConstrainedBox);
  dart.addTypeCaches(basic.ConstrainedBox);
  dart.setLibraryUri(basic.ConstrainedBox, L27);
  dart.setFieldSignature(basic.ConstrainedBox, () => ({
    __proto__: dart.getFields(basic.ConstrainedBox.__proto__),
    constraints: dart.finalFieldType(dart.legacy(geometry.BoxConstraints))
  }));
  basic.Center = class Center extends basic.Align {};
  (basic.Center.new = function(opts) {
    let widthFactor = opts && 'widthFactor' in opts ? opts.widthFactor : null;
    let heightFactor = opts && 'heightFactor' in opts ? opts.heightFactor : null;
    let child = opts && 'child' in opts ? opts.child : null;
    basic.Center.__proto__.new.call(this, {widthFactor: widthFactor, heightFactor: heightFactor, child: child});
    ;
  }).prototype = basic.Center.prototype;
  dart.addTypeTests(basic.Center);
  dart.addTypeCaches(basic.Center);
  dart.setLibraryUri(basic.Center, L27);
  var fit$0 = dart.privateName(basic, "FittedBox.fit");
  var alignment$3 = dart.privateName(basic, "FittedBox.alignment");
  basic.FittedBox = class FittedBox extends widget$.SingleChildWidget {
    get fit() {
      return this[fit$0];
    }
    set fit(value) {
      super.fit = value;
    }
    get alignment() {
      return this[alignment$3];
    }
    set alignment(value) {
      super.alignment = value;
    }
    layout(context, constraints, opts) {
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      let size = null;
      if (this.child != null) {
        this.child.layout(context, C1 || CT.C1, {parentUsesSize: true});
        if (!(this.child.box != null)) dart.assertFailed(null, L28, 473, 14, "child.box != null");
        size = constraints.constrainSizeAndAttemptToPreserveAspectRatio(this.child.box.size);
      } else {
        size = constraints.smallest;
      }
      this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, size);
    }
    paint(context) {
      let t1, t1$;
      super.paint(context);
      if (this.child != null) {
        let childSize = this.child.box.size;
        let sizes = geometry.applyBoxFit(this.fit, childSize, this.box.size);
        let scaleX = dart.notNull(sizes.destination.x) / dart.notNull(sizes.source.x);
        let scaleY = dart.notNull(sizes.destination.y) / dart.notNull(sizes.source.y);
        let sourceRect = this.alignment.inscribe(sizes.source, rect$.PdfRect.fromPoints(point$.PdfPoint.zero, childSize));
        let destinationRect = this.alignment.inscribe(sizes.destination, this.box);
        let mat = (t1 = vector_math_64.Matrix4.translationValues(destinationRect.x, destinationRect.y, 0.0), (() => {
          t1.scale(scaleX, scaleY, 1.0);
          t1.translate(-dart.notNull(sourceRect.x), -dart.notNull(sourceRect.y));
          return t1;
        })());
        t1$ = context.canvas;
        (() => {
          t1$.saveContext();
          t1$.drawBox(this.box);
          t1$.clipPath();
          t1$.setTransform(mat);
          return t1$;
        })();
        this.child.paint(context);
        context.canvas.restoreContext();
      }
    }
  };
  (basic.FittedBox.new = function(opts) {
    let fit = opts && 'fit' in opts ? opts.fit : C66 || CT.C66;
    let alignment = opts && 'alignment' in opts ? opts.alignment : C24 || CT.C24;
    let child = opts && 'child' in opts ? opts.child : null;
    this[fit$0] = fit;
    this[alignment$3] = alignment;
    if (!(fit != null)) dart.assertFailed(null, L28, 457, 16, "fit != null");
    if (!(alignment != null)) dart.assertFailed(null, L28, 458, 16, "alignment != null");
    basic.FittedBox.__proto__.new.call(this, {child: child});
    ;
  }).prototype = basic.FittedBox.prototype;
  dart.addTypeTests(basic.FittedBox);
  dart.addTypeCaches(basic.FittedBox);
  dart.setLibraryUri(basic.FittedBox, L27);
  dart.setFieldSignature(basic.FittedBox, () => ({
    __proto__: dart.getFields(basic.FittedBox.__proto__),
    fit: dart.finalFieldType(dart.legacy(basic.BoxFit)),
    alignment: dart.finalFieldType(dart.legacy(geometry.Alignment))
  }));
  var _applyAspectRatio = dart.privateName(basic, "_applyAspectRatio");
  var aspectRatio$ = dart.privateName(basic, "AspectRatio.aspectRatio");
  basic.AspectRatio = class AspectRatio extends widget$.SingleChildWidget {
    get aspectRatio() {
      return this[aspectRatio$];
    }
    set aspectRatio(value) {
      super.aspectRatio = value;
    }
    [_applyAspectRatio](constraints) {
      if (dart.test(constraints.isTight)) {
        return constraints.smallest;
      }
      let width = constraints.maxWidth;
      let height = null;
      if (width[$isFinite]) {
        height = dart.notNull(width) / dart.notNull(this.aspectRatio);
      } else {
        height = constraints.maxHeight;
        width = dart.notNull(height) * dart.notNull(this.aspectRatio);
      }
      if (dart.notNull(width) > dart.notNull(constraints.maxWidth)) {
        width = constraints.maxWidth;
        height = dart.notNull(width) / dart.notNull(this.aspectRatio);
      }
      if (dart.notNull(height) > dart.notNull(constraints.maxHeight)) {
        height = constraints.maxHeight;
        width = dart.notNull(height) * dart.notNull(this.aspectRatio);
      }
      if (dart.notNull(width) < dart.notNull(constraints.minWidth)) {
        width = constraints.minWidth;
        height = dart.notNull(width) / dart.notNull(this.aspectRatio);
      }
      if (dart.notNull(height) < dart.notNull(constraints.minHeight)) {
        height = constraints.minHeight;
        width = dart.notNull(height) * dart.notNull(this.aspectRatio);
      }
      return constraints.constrain(new point$.PdfPoint.new(width, height));
    }
    layout(context, constraints, opts) {
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, this[_applyAspectRatio](constraints));
      if (this.child != null) {
        this.child.layout(context, new geometry.BoxConstraints.tightFor({width: this.box.width, height: this.box.height}));
      }
      if (!(this.child.box != null)) dart.assertFailed(null, L28, 565, 12, "child.box != null");
    }
    paint(context) {
      super.paint(context);
      this.paintChild(context);
    }
  };
  (basic.AspectRatio.new = function(opts) {
    let aspectRatio = opts && 'aspectRatio' in opts ? opts.aspectRatio : null;
    let child = opts && 'child' in opts ? opts.child : null;
    this[aspectRatio$] = aspectRatio;
    if (!(aspectRatio != null)) dart.assertFailed(null, L28, 513, 16, "aspectRatio != null");
    basic.AspectRatio.__proto__.new.call(this, {child: child});
    ;
  }).prototype = basic.AspectRatio.prototype;
  dart.addTypeTests(basic.AspectRatio);
  dart.addTypeCaches(basic.AspectRatio);
  dart.setMethodSignature(basic.AspectRatio, () => ({
    __proto__: dart.getMethods(basic.AspectRatio.__proto__),
    [_applyAspectRatio]: dart.fnType(dart.legacy(point$.PdfPoint), [dart.legacy(geometry.BoxConstraints)])
  }));
  dart.setLibraryUri(basic.AspectRatio, L27);
  dart.setFieldSignature(basic.AspectRatio, () => ({
    __proto__: dart.getFields(basic.AspectRatio.__proto__),
    aspectRatio: dart.finalFieldType(dart.legacy(core.double))
  }));
  var painter$ = dart.privateName(basic, "CustomPaint.painter");
  var foregroundPainter$ = dart.privateName(basic, "CustomPaint.foregroundPainter");
  var size$1 = dart.privateName(basic, "CustomPaint.size");
  basic.CustomPaint = class CustomPaint extends widget$.SingleChildWidget {
    get painter() {
      return this[painter$];
    }
    set painter(value) {
      super.painter = value;
    }
    get foregroundPainter() {
      return this[foregroundPainter$];
    }
    set foregroundPainter(value) {
      super.foregroundPainter = value;
    }
    get size() {
      return this[size$1];
    }
    set size(value) {
      super.size = value;
    }
    layout(context, constraints, opts) {
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      if (this.child != null) {
        this.child.layout(context, constraints, {parentUsesSize: parentUsesSize});
        if (!(this.child.box != null)) dart.assertFailed(null, L28, 594, 14, "child.box != null");
        this.box = this.child.box;
      } else {
        this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, constraints.constrain(this.size));
      }
    }
    paint(context) {
      let t1, t2, t1$, t2$, t1$0;
      super.paint(context);
      let mat = vector_math_64.Matrix4.identity();
      mat.translate(this.box.x, this.box.y);
      t1 = context.canvas;
      (() => {
        t1.saveContext();
        t1.setTransform(mat);
        return t1;
      })();
      if (this.painter != null) {
        t1$ = context.canvas;
        t2 = this.box.size;
        this.painter(t1$, t2);
      }
      if (this.child != null) {
        this.child.paint(context);
      }
      if (this.foregroundPainter != null) {
        t1$0 = context.canvas;
        t2$ = this.box.size;
        this.foregroundPainter(t1$0, t2$);
      }
      context.canvas.restoreContext();
    }
  };
  (basic.CustomPaint.new = function(opts) {
    let painter = opts && 'painter' in opts ? opts.painter : null;
    let foregroundPainter = opts && 'foregroundPainter' in opts ? opts.foregroundPainter : null;
    let size = opts && 'size' in opts ? opts.size : C30 || CT.C30;
    let child = opts && 'child' in opts ? opts.child : null;
    this[painter$] = painter;
    this[foregroundPainter$] = foregroundPainter;
    this[size$1] = size;
    basic.CustomPaint.__proto__.new.call(this, {child: child});
    ;
  }).prototype = basic.CustomPaint.prototype;
  dart.addTypeTests(basic.CustomPaint);
  dart.addTypeCaches(basic.CustomPaint);
  dart.setLibraryUri(basic.CustomPaint, L27);
  dart.setFieldSignature(basic.CustomPaint, () => ({
    __proto__: dart.getFields(basic.CustomPaint.__proto__),
    painter: dart.finalFieldType(dart.legacy(dart.fnType(dart.dynamic, [dart.legacy(graphics.PdfGraphics), dart.legacy(point$.PdfPoint)]))),
    foregroundPainter: dart.finalFieldType(dart.legacy(dart.fnType(dart.dynamic, [dart.legacy(graphics.PdfGraphics), dart.legacy(point$.PdfPoint)]))),
    size: dart.finalFieldType(dart.legacy(point$.PdfPoint))
  }));
  var width$0 = dart.privateName(basic, "SizedBox.width");
  var height$0 = dart.privateName(basic, "SizedBox.height");
  var child$5 = dart.privateName(basic, "SizedBox.child");
  basic.SizedBox = class SizedBox extends widget$.StatelessWidget {
    get width() {
      return this[width$0];
    }
    set width(value) {
      super.width = value;
    }
    get height() {
      return this[height$0];
    }
    set height(value) {
      super.height = value;
    }
    get child() {
      return this[child$5];
    }
    set child(value) {
      super.child = value;
    }
    build(context) {
      return new basic.ConstrainedBox.new({child: this.child, constraints: new geometry.BoxConstraints.tightFor({width: this.width, height: this.height})});
    }
  };
  (basic.SizedBox.new = function(opts) {
    let width = opts && 'width' in opts ? opts.width : null;
    let height = opts && 'height' in opts ? opts.height : null;
    let child = opts && 'child' in opts ? opts.child : null;
    this[width$0] = width;
    this[height$0] = height;
    this[child$5] = child;
    basic.SizedBox.__proto__.new.call(this);
    ;
  }).prototype = basic.SizedBox.prototype;
  (basic.SizedBox.expand = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    this[child$5] = child;
    this[width$0] = 1 / 0;
    this[height$0] = 1 / 0;
    basic.SizedBox.__proto__.new.call(this);
    ;
  }).prototype = basic.SizedBox.prototype;
  (basic.SizedBox.shrink = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    this[child$5] = child;
    this[width$0] = 0.0;
    this[height$0] = 0.0;
    basic.SizedBox.__proto__.new.call(this);
    ;
  }).prototype = basic.SizedBox.prototype;
  (basic.SizedBox.fromSize = function(opts) {
    let t1, t1$;
    let child = opts && 'child' in opts ? opts.child : null;
    let size = opts && 'size' in opts ? opts.size : null;
    this[child$5] = child;
    this[width$0] = (t1 = size, t1 == null ? null : t1.x);
    this[height$0] = (t1$ = size, t1$ == null ? null : t1$.y);
    basic.SizedBox.__proto__.new.call(this);
    ;
  }).prototype = basic.SizedBox.prototype;
  dart.addTypeTests(basic.SizedBox);
  dart.addTypeCaches(basic.SizedBox);
  dart.setMethodSignature(basic.SizedBox, () => ({
    __proto__: dart.getMethods(basic.SizedBox.__proto__),
    build: dart.fnType(dart.legacy(widget$.Widget), [dart.legacy(widget$.Context)])
  }));
  dart.setLibraryUri(basic.SizedBox, L27);
  dart.setFieldSignature(basic.SizedBox, () => ({
    __proto__: dart.getFields(basic.SizedBox.__proto__),
    width: dart.finalFieldType(dart.legacy(core.double)),
    height: dart.finalFieldType(dart.legacy(core.double)),
    child: dart.finalFieldType(dart.legacy(widget$.Widget))
  }));
  var builder$ = dart.privateName(basic, "Builder.builder");
  basic.Builder = class Builder extends widget$.StatelessWidget {
    get builder() {
      return this[builder$];
    }
    set builder(value) {
      super.builder = value;
    }
    build(context) {
      let t1;
      t1 = context;
      return this.builder(t1);
    }
  };
  (basic.Builder.new = function(opts) {
    let builder = opts && 'builder' in opts ? opts.builder : null;
    this[builder$] = builder;
    if (!(builder != null)) dart.assertFailed(null, L28, 668, 16, "builder != null");
    basic.Builder.__proto__.new.call(this);
    ;
  }).prototype = basic.Builder.prototype;
  dart.addTypeTests(basic.Builder);
  dart.addTypeCaches(basic.Builder);
  dart.setMethodSignature(basic.Builder, () => ({
    __proto__: dart.getMethods(basic.Builder.__proto__),
    build: dart.fnType(dart.legacy(widget$.Widget), [dart.legacy(widget$.Context)])
  }));
  dart.setLibraryUri(basic.Builder, L27);
  dart.setFieldSignature(basic.Builder, () => ({
    __proto__: dart.getFields(basic.Builder.__proto__),
    builder: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(widget$.Widget), [dart.legacy(widget$.Context)])))
  }));
  var _constraints = dart.privateName(basic, "_constraints");
  var builder$0 = dart.privateName(basic, "LayoutBuilder.builder");
  basic.LayoutBuilder = class LayoutBuilder extends widget$.StatelessWidget {
    get builder() {
      return this[builder$0];
    }
    set builder(value) {
      super.builder = value;
    }
    layout(context, constraints, opts) {
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      this[_constraints] = constraints;
      super.layout(context, constraints);
    }
    build(context) {
      let t2, t1;
      t1 = context;
      t2 = this[_constraints];
      return this.builder(t1, t2);
    }
  };
  (basic.LayoutBuilder.new = function(opts) {
    let builder = opts && 'builder' in opts ? opts.builder : null;
    this[_constraints] = null;
    this[builder$0] = builder;
    if (!(builder != null)) dart.assertFailed(null, L28, 687, 15, "builder != null");
    basic.LayoutBuilder.__proto__.new.call(this);
    ;
  }).prototype = basic.LayoutBuilder.prototype;
  dart.addTypeTests(basic.LayoutBuilder);
  dart.addTypeCaches(basic.LayoutBuilder);
  dart.setMethodSignature(basic.LayoutBuilder, () => ({
    __proto__: dart.getMethods(basic.LayoutBuilder.__proto__),
    build: dart.fnType(dart.legacy(widget$.Widget), [dart.legacy(widget$.Context)])
  }));
  dart.setLibraryUri(basic.LayoutBuilder, L27);
  dart.setFieldSignature(basic.LayoutBuilder, () => ({
    __proto__: dart.getFields(basic.LayoutBuilder.__proto__),
    builder: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(widget$.Widget), [dart.legacy(widget$.Context), dart.legacy(geometry.BoxConstraints)]))),
    [_constraints]: dart.fieldType(dart.legacy(geometry.BoxConstraints))
  }));
  var _getConstraints = dart.privateName(basic, "_getConstraints");
  var _getBox$ = dart.privateName(basic, "_getBox");
  var ignoreMargins$ = dart.privateName(basic, "FullPage.ignoreMargins");
  basic.FullPage = class FullPage extends widget$.SingleChildWidget {
    get ignoreMargins() {
      return this[ignoreMargins$];
    }
    set ignoreMargins(value) {
      super.ignoreMargins = value;
    }
    [_getConstraints](context) {
      if (!(context.page.pageFormat.width !== 1 / 0)) dart.assertFailed(null, L28, 715, 12, "context.page.pageFormat.width != double.infinity");
      if (!(context.page.pageFormat.height !== 1 / 0)) dart.assertFailed(null, L28, 716, 12, "context.page.pageFormat.height != double.infinity");
      return dart.test(this.ignoreMargins) ? new geometry.BoxConstraints.tightFor({width: context.page.pageFormat.width, height: context.page.pageFormat.height}) : new geometry.BoxConstraints.tightFor({width: context.page.pageFormat.availableWidth, height: context.page.pageFormat.availableHeight});
    }
    [_getBox$](context) {
      let box = this[_getConstraints](context).constrainRect();
      if (dart.test(this.ignoreMargins)) {
        return box;
      }
      return rect$.PdfRect.fromPoints(new point$.PdfPoint.new(context.page.pageFormat.marginLeft, context.page.pageFormat.marginTop), box.size);
    }
    layout(context, constraints, opts) {
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      {
        let constraints = this[_getConstraints](context);
        if (this.child != null) {
          this.child.layout(context, constraints, {parentUsesSize: false});
          if (!(this.child.box != null)) dart.assertFailed(null, L28, 750, 14, "child.box != null");
        }
        this.box = this[_getBox$](context);
      }
    }
    debugPaint(context) {
    }
    paint(context) {
      let t1;
      super.paint(context);
      if (this.child == null) {
        return;
      }
      let box = this[_getBox$](context);
      let mat = vector_math_64.Matrix4.tryInvert(context.canvas.getTransform());
      mat.translate(box.x, box.y);
      t1 = context.canvas;
      (() => {
        t1.saveContext();
        t1.setTransform(mat);
        return t1;
      })();
      this.child.paint(context);
      context.canvas.restoreContext();
    }
  };
  (basic.FullPage.new = function(opts) {
    let ignoreMargins = opts && 'ignoreMargins' in opts ? opts.ignoreMargins : null;
    let child = opts && 'child' in opts ? opts.child : null;
    this[ignoreMargins$] = ignoreMargins;
    if (!(ignoreMargins != null)) dart.assertFailed(null, L28, 709, 16, "ignoreMargins != null");
    basic.FullPage.__proto__.new.call(this, {child: child});
    ;
  }).prototype = basic.FullPage.prototype;
  dart.addTypeTests(basic.FullPage);
  dart.addTypeCaches(basic.FullPage);
  dart.setMethodSignature(basic.FullPage, () => ({
    __proto__: dart.getMethods(basic.FullPage.__proto__),
    [_getConstraints]: dart.fnType(dart.legacy(geometry.BoxConstraints), [dart.legacy(widget$.Context)]),
    [_getBox$]: dart.fnType(dart.legacy(rect$.PdfRect), [dart.legacy(widget$.Context)])
  }));
  dart.setLibraryUri(basic.FullPage, L27);
  dart.setFieldSignature(basic.FullPage, () => ({
    __proto__: dart.getFields(basic.FullPage.__proto__),
    ignoreMargins: dart.finalFieldType(dart.legacy(core.bool))
  }));
  var opacity$0 = dart.privateName(basic, "Opacity.opacity");
  basic.Opacity = class Opacity extends widget$.SingleChildWidget {
    get opacity() {
      return this[opacity$0];
    }
    set opacity(value) {
      super.opacity = value;
    }
    paint(context) {
      let t1;
      super.paint(context);
      if (this.child != null) {
        let mat = vector_math_64.Matrix4.identity();
        mat.translate(this.box.x, this.box.y);
        t1 = context.canvas;
        (() => {
          t1.saveContext();
          t1.setTransform(mat);
          t1.setGraphicState(new graphic_state.PdfGraphicState.new({opacity: this.opacity}));
          return t1;
        })();
        this.child.paint(context);
        context.canvas.restoreContext();
      }
    }
  };
  (basic.Opacity.new = function(opts) {
    let opacity = opts && 'opacity' in opts ? opts.opacity : null;
    let child = opts && 'child' in opts ? opts.child : null;
    this[opacity$0] = opacity;
    if (!(opacity != null)) dart.assertFailed(null, L28, 782, 16, "opacity != null");
    basic.Opacity.__proto__.new.call(this, {child: child});
    ;
  }).prototype = basic.Opacity.prototype;
  dart.addTypeTests(basic.Opacity);
  dart.addTypeCaches(basic.Opacity);
  dart.setLibraryUri(basic.Opacity, L27);
  dart.setFieldSignature(basic.Opacity, () => ({
    __proto__: dart.getFields(basic.Opacity.__proto__),
    opacity: dart.finalFieldType(dart.legacy(core.double))
  }));
  var color$5 = dart.privateName(basic, "Divider.color");
  var endIndent$ = dart.privateName(basic, "Divider.endIndent");
  var height$1 = dart.privateName(basic, "Divider.height");
  var indent$ = dart.privateName(basic, "Divider.indent");
  var thickness$ = dart.privateName(basic, "Divider.thickness");
  basic.Divider = class Divider extends widget$.StatelessWidget {
    get color() {
      return this[color$5];
    }
    set color(value) {
      super.color = value;
    }
    get endIndent() {
      return this[endIndent$];
    }
    set endIndent(value) {
      super.endIndent = value;
    }
    get height() {
      return this[height$1];
    }
    set height(value) {
      super.height = value;
    }
    get indent() {
      return this[indent$];
    }
    set indent(value) {
      super.indent = value;
    }
    get thickness() {
      return this[thickness$];
    }
    set thickness(value) {
      super.thickness = value;
    }
    build(context) {
      let t1, t1$, t1$0, t1$1, t1$2;
      let height = (t1 = this.height, t1 == null ? 16.0 : t1);
      let thickness = (t1$ = this.thickness, t1$ == null ? 1.0 : t1$);
      let indent = (t1$0 = this.indent, t1$0 == null ? 0.0 : t1$0);
      let endIndent = (t1$1 = this.endIndent, t1$1 == null ? 0.0 : t1$1);
      let color = (t1$2 = this.color, t1$2 == null ? colors.PdfColors.black : t1$2);
      return new basic.SizedBox.new({height: height, child: new basic.Center.new({child: new container.Container.new({height: thickness, margin: new geometry.EdgeInsets.only({left: indent, right: endIndent}), decoration: new decoration$.BoxDecoration.new({border: new box_border.Border.new({bottom: new box_border.BorderSide.new({color: color, width: thickness})})})})})});
    }
  };
  (basic.Divider.new = function(opts) {
    let height = opts && 'height' in opts ? opts.height : null;
    let thickness = opts && 'thickness' in opts ? opts.thickness : null;
    let indent = opts && 'indent' in opts ? opts.indent : null;
    let endIndent = opts && 'endIndent' in opts ? opts.endIndent : null;
    let color = opts && 'color' in opts ? opts.color : null;
    this[height$1] = height;
    this[thickness$] = thickness;
    this[indent$] = indent;
    this[endIndent$] = endIndent;
    this[color$5] = color;
    if (!(height == null || dart.notNull(height) >= 0.0)) dart.assertFailed(null, L28, 811, 16, "height == null || height >= 0.0");
    if (!(thickness == null || dart.notNull(thickness) >= 0.0)) dart.assertFailed(null, L28, 812, 16, "thickness == null || thickness >= 0.0");
    if (!(indent == null || dart.notNull(indent) >= 0.0)) dart.assertFailed(null, L28, 813, 16, "indent == null || indent >= 0.0");
    if (!(endIndent == null || dart.notNull(endIndent) >= 0.0)) dart.assertFailed(null, L28, 814, 16, "endIndent == null || endIndent >= 0.0");
    basic.Divider.__proto__.new.call(this);
    ;
  }).prototype = basic.Divider.prototype;
  dart.addTypeTests(basic.Divider);
  dart.addTypeCaches(basic.Divider);
  dart.setMethodSignature(basic.Divider, () => ({
    __proto__: dart.getMethods(basic.Divider.__proto__),
    build: dart.fnType(dart.legacy(widget$.Widget), [dart.legacy(widget$.Context)])
  }));
  dart.setLibraryUri(basic.Divider, L27);
  dart.setFieldSignature(basic.Divider, () => ({
    __proto__: dart.getFields(basic.Divider.__proto__),
    color: dart.finalFieldType(dart.legacy(color.PdfColor)),
    endIndent: dart.finalFieldType(dart.legacy(core.double)),
    height: dart.finalFieldType(dart.legacy(core.double)),
    indent: dart.finalFieldType(dart.legacy(core.double)),
    thickness: dart.finalFieldType(dart.legacy(core.double))
  }));
  var color$6 = dart.privateName(basic, "VerticalDivider.color");
  var endIndent$0 = dart.privateName(basic, "VerticalDivider.endIndent");
  var width$1 = dart.privateName(basic, "VerticalDivider.width");
  var indent$0 = dart.privateName(basic, "VerticalDivider.indent");
  var thickness$0 = dart.privateName(basic, "VerticalDivider.thickness");
  basic.VerticalDivider = class VerticalDivider extends widget$.StatelessWidget {
    get color() {
      return this[color$6];
    }
    set color(value) {
      super.color = value;
    }
    get endIndent() {
      return this[endIndent$0];
    }
    set endIndent(value) {
      super.endIndent = value;
    }
    get width() {
      return this[width$1];
    }
    set width(value) {
      super.width = value;
    }
    get indent() {
      return this[indent$0];
    }
    set indent(value) {
      super.indent = value;
    }
    get thickness() {
      return this[thickness$0];
    }
    set thickness(value) {
      super.thickness = value;
    }
    build(context) {
      let t1, t1$, t1$0, t1$1, t1$2;
      let width = (t1 = this.width, t1 == null ? 16.0 : t1);
      let thickness = (t1$ = this.thickness, t1$ == null ? 1.0 : t1$);
      let indent = (t1$0 = this.indent, t1$0 == null ? 0.0 : t1$0);
      let endIndent = (t1$1 = this.endIndent, t1$1 == null ? 0.0 : t1$1);
      let color = (t1$2 = this.color, t1$2 == null ? colors.PdfColors.black : t1$2);
      return new basic.SizedBox.new({width: width, child: new basic.Center.new({child: new container.Container.new({width: thickness, margin: new geometry.EdgeInsets.only({top: indent, bottom: endIndent}), decoration: new decoration$.BoxDecoration.new({border: new box_border.Border.new({left: new box_border.BorderSide.new({color: color, width: thickness})})})})})});
    }
  };
  (basic.VerticalDivider.new = function(opts) {
    let width = opts && 'width' in opts ? opts.width : null;
    let thickness = opts && 'thickness' in opts ? opts.thickness : null;
    let indent = opts && 'indent' in opts ? opts.indent : null;
    let endIndent = opts && 'endIndent' in opts ? opts.endIndent : null;
    let color = opts && 'color' in opts ? opts.color : null;
    this[width$1] = width;
    this[thickness$0] = thickness;
    this[indent$0] = indent;
    this[endIndent$0] = endIndent;
    this[color$6] = color;
    if (!(width == null || dart.notNull(width) >= 0.0)) dart.assertFailed(null, L28, 866, 16, "width == null || width >= 0.0");
    if (!(thickness == null || dart.notNull(thickness) >= 0.0)) dart.assertFailed(null, L28, 867, 16, "thickness == null || thickness >= 0.0");
    if (!(indent == null || dart.notNull(indent) >= 0.0)) dart.assertFailed(null, L28, 868, 16, "indent == null || indent >= 0.0");
    if (!(endIndent == null || dart.notNull(endIndent) >= 0.0)) dart.assertFailed(null, L28, 869, 16, "endIndent == null || endIndent >= 0.0");
    basic.VerticalDivider.__proto__.new.call(this);
    ;
  }).prototype = basic.VerticalDivider.prototype;
  dart.addTypeTests(basic.VerticalDivider);
  dart.addTypeCaches(basic.VerticalDivider);
  dart.setMethodSignature(basic.VerticalDivider, () => ({
    __proto__: dart.getMethods(basic.VerticalDivider.__proto__),
    build: dart.fnType(dart.legacy(widget$.Widget), [dart.legacy(widget$.Context)])
  }));
  dart.setLibraryUri(basic.VerticalDivider, L27);
  dart.setFieldSignature(basic.VerticalDivider, () => ({
    __proto__: dart.getFields(basic.VerticalDivider.__proto__),
    color: dart.finalFieldType(dart.legacy(color.PdfColor)),
    endIndent: dart.finalFieldType(dart.legacy(core.double)),
    width: dart.finalFieldType(dart.legacy(core.double)),
    indent: dart.finalFieldType(dart.legacy(core.double)),
    thickness: dart.finalFieldType(dart.legacy(core.double))
  }));
  var name$ = dart.privateName(annotations, "Anchor.name");
  var description$ = dart.privateName(annotations, "Anchor.description");
  var zoom$ = dart.privateName(annotations, "Anchor.zoom");
  var setX$ = dart.privateName(annotations, "Anchor.setX");
  annotations.Anchor = class Anchor extends widget$.SingleChildWidget {
    get name() {
      return this[name$];
    }
    set name(value) {
      super.name = value;
    }
    get description() {
      return this[description$];
    }
    set description(value) {
      super.description = value;
    }
    get zoom() {
      return this[zoom$];
    }
    set zoom(value) {
      super.zoom = value;
    }
    get setX() {
      return this[setX$];
    }
    set setX(value) {
      super.setX = value;
    }
    paint(context) {
      super.paint(context);
      this.paintChild(context);
      let mat = context.canvas.getTransform();
      let lt = mat.transform3(vector_math_64.Vector3.new(this.box.left, this.box.top, 0.0));
      context.document.pdfNames.addDest(this.name, context.page, {posX: dart.test(this.setX) ? lt.x : null, posY: lt.y, posZ: this.zoom});
      if (this.description != null) {
        let rb = mat.transform3(vector_math_64.Vector3.new(this.box.right, this.box.top, 0.0));
        let ibox = rect$.PdfRect.fromLTRB(lt.x, lt.y, rb.x, rb.y);
        new annotation.PdfAnnot.new(context.page, new annotation.PdfAnnotText.new({rect: ibox, content: this.description}));
      }
    }
  };
  (annotations.Anchor.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    let name = opts && 'name' in opts ? opts.name : null;
    let description = opts && 'description' in opts ? opts.description : null;
    let zoom = opts && 'zoom' in opts ? opts.zoom : null;
    let setX = opts && 'setX' in opts ? opts.setX : false;
    this[name$] = name;
    this[description$] = description;
    this[zoom$] = zoom;
    this[setX$] = setX;
    if (!(name != null)) dart.assertFailed(null, L29, 34, 16, "name != null");
    if (!(setX != null)) dart.assertFailed(null, L29, 35, 16, "setX != null");
    annotations.Anchor.__proto__.new.call(this, {child: child});
    ;
  }).prototype = annotations.Anchor.prototype;
  dart.addTypeTests(annotations.Anchor);
  dart.addTypeCaches(annotations.Anchor);
  dart.setLibraryUri(annotations.Anchor, L30);
  dart.setFieldSignature(annotations.Anchor, () => ({
    __proto__: dart.getFields(annotations.Anchor.__proto__),
    name: dart.finalFieldType(dart.legacy(core.String)),
    description: dart.finalFieldType(dart.legacy(core.String)),
    zoom: dart.finalFieldType(dart.legacy(core.double)),
    setX: dart.finalFieldType(dart.legacy(core.bool))
  }));
  annotations.AnnotationBuilder = class AnnotationBuilder extends core.Object {};
  (annotations.AnnotationBuilder.new = function() {
    ;
  }).prototype = annotations.AnnotationBuilder.prototype;
  dart.addTypeTests(annotations.AnnotationBuilder);
  dart.addTypeCaches(annotations.AnnotationBuilder);
  dart.setLibraryUri(annotations.AnnotationBuilder, L30);
  var destination$0 = dart.privateName(annotations, "AnnotationLink.destination");
  annotations.AnnotationLink = class AnnotationLink extends annotations.AnnotationBuilder {
    get destination() {
      return this[destination$0];
    }
    set destination(value) {
      super.destination = value;
    }
    build(context, box) {
      new annotation.PdfAnnot.new(context.page, new annotation.PdfAnnotNamedLink.new({rect: context.localToGlobal(box), dest: this.destination}));
    }
  };
  (annotations.AnnotationLink.new = function(destination) {
    this[destination$0] = destination;
    if (!(destination != null)) dart.assertFailed(null, L29, 74, 45, "destination != null");
    ;
  }).prototype = annotations.AnnotationLink.prototype;
  dart.addTypeTests(annotations.AnnotationLink);
  dart.addTypeCaches(annotations.AnnotationLink);
  dart.setMethodSignature(annotations.AnnotationLink, () => ({
    __proto__: dart.getMethods(annotations.AnnotationLink.__proto__),
    build: dart.fnType(dart.void, [dart.legacy(widget$.Context), dart.legacy(rect$.PdfRect)])
  }));
  dart.setLibraryUri(annotations.AnnotationLink, L30);
  dart.setFieldSignature(annotations.AnnotationLink, () => ({
    __proto__: dart.getFields(annotations.AnnotationLink.__proto__),
    destination: dart.finalFieldType(dart.legacy(core.String))
  }));
  var destination$1 = dart.privateName(annotations, "AnnotationUrl.destination");
  annotations.AnnotationUrl = class AnnotationUrl extends annotations.AnnotationBuilder {
    get destination() {
      return this[destination$1];
    }
    set destination(value) {
      super.destination = value;
    }
    build(context, box) {
      new annotation.PdfAnnot.new(context.page, new annotation.PdfAnnotUrlLink.new({rect: context.localToGlobal(box), url: this.destination}));
    }
  };
  (annotations.AnnotationUrl.new = function(destination) {
    this[destination$1] = destination;
    if (!(destination != null)) dart.assertFailed(null, L29, 91, 44, "destination != null");
    ;
  }).prototype = annotations.AnnotationUrl.prototype;
  dart.addTypeTests(annotations.AnnotationUrl);
  dart.addTypeCaches(annotations.AnnotationUrl);
  dart.setMethodSignature(annotations.AnnotationUrl, () => ({
    __proto__: dart.getMethods(annotations.AnnotationUrl.__proto__),
    build: dart.fnType(dart.void, [dart.legacy(widget$.Context), dart.legacy(rect$.PdfRect)])
  }));
  dart.setLibraryUri(annotations.AnnotationUrl, L30);
  dart.setFieldSignature(annotations.AnnotationUrl, () => ({
    __proto__: dart.getFields(annotations.AnnotationUrl.__proto__),
    destination: dart.finalFieldType(dart.legacy(core.String))
  }));
  var signFlags$ = dart.privateName(annotations, "AnnotationSignature.signFlags");
  var crypto$ = dart.privateName(annotations, "AnnotationSignature.crypto");
  var name$0 = dart.privateName(annotations, "AnnotationSignature.name");
  var border$0 = dart.privateName(annotations, "AnnotationSignature.border");
  var flags$ = dart.privateName(annotations, "AnnotationSignature.flags");
  var date$ = dart.privateName(annotations, "AnnotationSignature.date");
  var color$7 = dart.privateName(annotations, "AnnotationSignature.color");
  var highlighting$ = dart.privateName(annotations, "AnnotationSignature.highlighting");
  annotations.AnnotationSignature = class AnnotationSignature extends annotations.AnnotationBuilder {
    get signFlags() {
      return this[signFlags$];
    }
    set signFlags(value) {
      super.signFlags = value;
    }
    get crypto() {
      return this[crypto$];
    }
    set crypto(value) {
      super.crypto = value;
    }
    get name() {
      return this[name$0];
    }
    set name(value) {
      super.name = value;
    }
    get border() {
      return this[border$0];
    }
    set border(value) {
      super.border = value;
    }
    get flags() {
      return this[flags$];
    }
    set flags(value) {
      super.flags = value;
    }
    get date() {
      return this[date$];
    }
    set date(value) {
      super.date = value;
    }
    get color() {
      return this[color$7];
    }
    set color(value) {
      super.color = value;
    }
    get highlighting() {
      return this[highlighting$];
    }
    set highlighting(value) {
      super.highlighting = value;
    }
    build(context, box) {
      let t1;
      t1 = context.document;
      t1.sign == null ? t1.sign = new signature.PdfSignature.new(context.document, {crypto: this.crypto, flags: this.signFlags}) : null;
      new annotation.PdfAnnot.new(context.page, new annotation.PdfAnnotSign.new({rect: context.localToGlobal(box), fieldName: this.name, border: this.border, flags: this.flags, date: this.date, color: this.color, highlighting: this.highlighting}));
    }
  };
  (annotations.AnnotationSignature.new = function(crypto, opts) {
    let name = opts && 'name' in opts ? opts.name : null;
    let signFlags = opts && 'signFlags' in opts ? opts.signFlags : null;
    let border = opts && 'border' in opts ? opts.border : null;
    let flags = opts && 'flags' in opts ? opts.flags : null;
    let date = opts && 'date' in opts ? opts.date : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let highlighting = opts && 'highlighting' in opts ? opts.highlighting : null;
    this[crypto$] = crypto;
    this[name$0] = name;
    this[signFlags$] = signFlags;
    this[border$0] = border;
    this[flags$] = flags;
    this[date$] = date;
    this[color$7] = color;
    this[highlighting$] = highlighting;
    if (!(crypto != null)) dart.assertFailed(null, L29, 117, 15, "crypto != null");
    ;
  }).prototype = annotations.AnnotationSignature.prototype;
  dart.addTypeTests(annotations.AnnotationSignature);
  dart.addTypeCaches(annotations.AnnotationSignature);
  dart.setMethodSignature(annotations.AnnotationSignature, () => ({
    __proto__: dart.getMethods(annotations.AnnotationSignature.__proto__),
    build: dart.fnType(dart.void, [dart.legacy(widget$.Context), dart.legacy(rect$.PdfRect)])
  }));
  dart.setLibraryUri(annotations.AnnotationSignature, L30);
  dart.setFieldSignature(annotations.AnnotationSignature, () => ({
    __proto__: dart.getFields(annotations.AnnotationSignature.__proto__),
    signFlags: dart.finalFieldType(dart.legacy(core.Set$(dart.legacy(signature.PdfSigFlags)))),
    crypto: dart.finalFieldType(dart.legacy(signature.PdfSignatureBase)),
    name: dart.finalFieldType(dart.legacy(core.String)),
    border: dart.finalFieldType(dart.legacy(border.PdfBorder)),
    flags: dart.finalFieldType(dart.legacy(core.Set$(dart.legacy(annotation.PdfAnnotFlags)))),
    date: dart.finalFieldType(dart.legacy(core.DateTime)),
    color: dart.finalFieldType(dart.legacy(color.PdfColor)),
    highlighting: dart.finalFieldType(dart.legacy(annotation.PdfAnnotHighlighting))
  }));
  var name$1 = dart.privateName(annotations, "AnnotationTextField.name");
  var border$1 = dart.privateName(annotations, "AnnotationTextField.border");
  var flags$0 = dart.privateName(annotations, "AnnotationTextField.flags");
  var date$0 = dart.privateName(annotations, "AnnotationTextField.date");
  var color$8 = dart.privateName(annotations, "AnnotationTextField.color");
  var backgroundColor$ = dart.privateName(annotations, "AnnotationTextField.backgroundColor");
  var highlighting$0 = dart.privateName(annotations, "AnnotationTextField.highlighting");
  var maxLength$ = dart.privateName(annotations, "AnnotationTextField.maxLength");
  var value$ = dart.privateName(annotations, "AnnotationTextField.value");
  var defaultValue$ = dart.privateName(annotations, "AnnotationTextField.defaultValue");
  var textStyle$ = dart.privateName(annotations, "AnnotationTextField.textStyle");
  var alternateName$ = dart.privateName(annotations, "AnnotationTextField.alternateName");
  var mappingName$ = dart.privateName(annotations, "AnnotationTextField.mappingName");
  var fieldFlags$ = dart.privateName(annotations, "AnnotationTextField.fieldFlags");
  annotations.AnnotationTextField = class AnnotationTextField extends annotations.AnnotationBuilder {
    get name() {
      return this[name$1];
    }
    set name(value) {
      super.name = value;
    }
    get border() {
      return this[border$1];
    }
    set border(value) {
      super.border = value;
    }
    get flags() {
      return this[flags$0];
    }
    set flags(value) {
      super.flags = value;
    }
    get date() {
      return this[date$0];
    }
    set date(value) {
      super.date = value;
    }
    get color() {
      return this[color$8];
    }
    set color(value) {
      super.color = value;
    }
    get backgroundColor() {
      return this[backgroundColor$];
    }
    set backgroundColor(value) {
      super.backgroundColor = value;
    }
    get highlighting() {
      return this[highlighting$0];
    }
    set highlighting(value) {
      super.highlighting = value;
    }
    get maxLength() {
      return this[maxLength$];
    }
    set maxLength(value) {
      super.maxLength = value;
    }
    get value() {
      return this[value$];
    }
    set value(value) {
      super.value = value;
    }
    get defaultValue() {
      return this[defaultValue$];
    }
    set defaultValue(value) {
      super.defaultValue = value;
    }
    get textStyle() {
      return this[textStyle$];
    }
    set textStyle(value) {
      super.textStyle = value;
    }
    get alternateName() {
      return this[alternateName$];
    }
    set alternateName(value) {
      super.alternateName = value;
    }
    get mappingName() {
      return this[mappingName$];
    }
    set mappingName(value) {
      super.mappingName = value;
    }
    get fieldFlags() {
      return this[fieldFlags$];
    }
    set fieldFlags(value) {
      super.fieldFlags = value;
    }
    build(context, box) {
      let _textStyle = theme$.Theme.of(context).defaultTextStyle.merge(this.textStyle);
      new annotation.PdfAnnot.new(context.page, new annotation.PdfTextField.new({rect: context.localToGlobal(box), fieldName: this.name, border: this.border, flags: this.flags, date: this.date, color: this.color, backgroundColor: this.backgroundColor, highlighting: this.highlighting, maxLength: this.maxLength, alternateName: this.alternateName, mappingName: this.mappingName, fieldFlags: this.fieldFlags, value: this.value, defaultValue: this.defaultValue, font: _textStyle.font.getFont(context), fontSize: _textStyle.fontSize, textColor: _textStyle.color}));
    }
  };
  (annotations.AnnotationTextField.new = function(opts) {
    let name = opts && 'name' in opts ? opts.name : null;
    let border = opts && 'border' in opts ? opts.border : null;
    let flags = opts && 'flags' in opts ? opts.flags : null;
    let date = opts && 'date' in opts ? opts.date : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let highlighting = opts && 'highlighting' in opts ? opts.highlighting : null;
    let maxLength = opts && 'maxLength' in opts ? opts.maxLength : null;
    let alternateName = opts && 'alternateName' in opts ? opts.alternateName : null;
    let mappingName = opts && 'mappingName' in opts ? opts.mappingName : null;
    let fieldFlags = opts && 'fieldFlags' in opts ? opts.fieldFlags : null;
    let value = opts && 'value' in opts ? opts.value : null;
    let defaultValue = opts && 'defaultValue' in opts ? opts.defaultValue : null;
    let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
    this[name$1] = name;
    this[border$1] = border;
    this[flags$0] = flags;
    this[date$0] = date;
    this[color$8] = color;
    this[backgroundColor$] = backgroundColor;
    this[highlighting$0] = highlighting;
    this[maxLength$] = maxLength;
    this[alternateName$] = alternateName;
    this[mappingName$] = mappingName;
    this[fieldFlags$] = fieldFlags;
    this[value$] = value;
    this[defaultValue$] = defaultValue;
    this[textStyle$] = textStyle;
    ;
  }).prototype = annotations.AnnotationTextField.prototype;
  dart.addTypeTests(annotations.AnnotationTextField);
  dart.addTypeCaches(annotations.AnnotationTextField);
  dart.setMethodSignature(annotations.AnnotationTextField, () => ({
    __proto__: dart.getMethods(annotations.AnnotationTextField.__proto__),
    build: dart.fnType(dart.void, [dart.legacy(widget$.Context), dart.legacy(rect$.PdfRect)])
  }));
  dart.setLibraryUri(annotations.AnnotationTextField, L30);
  dart.setFieldSignature(annotations.AnnotationTextField, () => ({
    __proto__: dart.getFields(annotations.AnnotationTextField.__proto__),
    name: dart.finalFieldType(dart.legacy(core.String)),
    border: dart.finalFieldType(dart.legacy(border.PdfBorder)),
    flags: dart.finalFieldType(dart.legacy(core.Set$(dart.legacy(annotation.PdfAnnotFlags)))),
    date: dart.finalFieldType(dart.legacy(core.DateTime)),
    color: dart.finalFieldType(dart.legacy(color.PdfColor)),
    backgroundColor: dart.finalFieldType(dart.legacy(color.PdfColor)),
    highlighting: dart.finalFieldType(dart.legacy(annotation.PdfAnnotHighlighting)),
    maxLength: dart.finalFieldType(dart.legacy(core.int)),
    value: dart.finalFieldType(dart.legacy(core.String)),
    defaultValue: dart.finalFieldType(dart.legacy(core.String)),
    textStyle: dart.finalFieldType(dart.legacy(text_style.TextStyle)),
    alternateName: dart.finalFieldType(dart.legacy(core.String)),
    mappingName: dart.finalFieldType(dart.legacy(core.String)),
    fieldFlags: dart.finalFieldType(dart.legacy(core.Set$(dart.legacy(annotation.PdfFieldFlags))))
  }));
  var builder$1 = dart.privateName(annotations, "Annotation.builder");
  annotations.Annotation = class Annotation extends widget$.SingleChildWidget {
    get builder() {
      return this[builder$1];
    }
    set builder(value) {
      super.builder = value;
    }
    debugPaint(context) {
      let t1;
      t1 = context.canvas;
      (() => {
        t1.setFillColor(colors.PdfColors.pink);
        t1.drawBox(this.box);
        t1.fillPath();
        return t1;
      })();
    }
    paint(context) {
      let t1;
      super.paint(context);
      this.paintChild(context);
      t1 = this.builder;
      t1 == null ? null : t1.build(context, this.box);
    }
  };
  (annotations.Annotation.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    let builder = opts && 'builder' in opts ? opts.builder : null;
    this[builder$1] = builder;
    annotations.Annotation.__proto__.new.call(this, {child: child});
    ;
  }).prototype = annotations.Annotation.prototype;
  dart.addTypeTests(annotations.Annotation);
  dart.addTypeCaches(annotations.Annotation);
  dart.setLibraryUri(annotations.Annotation, L30);
  dart.setFieldSignature(annotations.Annotation, () => ({
    __proto__: dart.getFields(annotations.Annotation.__proto__),
    builder: dart.finalFieldType(dart.legacy(annotations.AnnotationBuilder))
  }));
  annotations.Link = class Link extends annotations.Annotation {};
  (annotations.Link.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    let destination = opts && 'destination' in opts ? opts.destination : null;
    if (!(child != null)) dart.assertFailed(null, L29, 256, 16, "child != null");
    annotations.Link.__proto__.new.call(this, {child: child, builder: new annotations.AnnotationLink.new(destination)});
    ;
  }).prototype = annotations.Link.prototype;
  dart.addTypeTests(annotations.Link);
  dart.addTypeCaches(annotations.Link);
  dart.setLibraryUri(annotations.Link, L30);
  annotations.UrlLink = class UrlLink extends annotations.Annotation {};
  (annotations.UrlLink.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    let destination = opts && 'destination' in opts ? opts.destination : null;
    if (!(child != null)) dart.assertFailed(null, L29, 264, 16, "child != null");
    if (!(destination != null)) dart.assertFailed(null, L29, 265, 16, "destination != null");
    annotations.UrlLink.__proto__.new.call(this, {child: child, builder: new annotations.AnnotationUrl.new(destination)});
    ;
  }).prototype = annotations.UrlLink.prototype;
  dart.addTypeTests(annotations.UrlLink);
  dart.addTypeCaches(annotations.UrlLink);
  dart.setLibraryUri(annotations.UrlLink, L30);
  annotations.Signature = class Signature extends annotations.Annotation {};
  (annotations.Signature.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    let crypto = opts && 'crypto' in opts ? opts.crypto : null;
    let name = opts && 'name' in opts ? opts.name : null;
    let signFlags = opts && 'signFlags' in opts ? opts.signFlags : null;
    let border = opts && 'border' in opts ? opts.border : null;
    let flags = opts && 'flags' in opts ? opts.flags : null;
    let date = opts && 'date' in opts ? opts.date : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let highlighting = opts && 'highlighting' in opts ? opts.highlighting : null;
    if (!(child != null)) dart.assertFailed(null, L29, 280, 16, "child != null");
    if (!(crypto != null)) dart.assertFailed(null, L29, 281, 16, "crypto != null");
    if (!(name != null)) dart.assertFailed(null, L29, 282, 16, "name != null");
    annotations.Signature.__proto__.new.call(this, {child: child, builder: new annotations.AnnotationSignature.new(crypto, {signFlags: signFlags, name: name, border: border, flags: flags, date: date, color: color, highlighting: highlighting})});
    ;
  }).prototype = annotations.Signature.prototype;
  dart.addTypeTests(annotations.Signature);
  dart.addTypeCaches(annotations.Signature);
  dart.setLibraryUri(annotations.Signature, L30);
  annotations.TextField = class TextField extends annotations.Annotation {};
  (annotations.TextField.new = function(opts) {
    let t1;
    let child = opts && 'child' in opts ? opts.child : null;
    let width = opts && 'width' in opts ? opts.width : 120;
    let height = opts && 'height' in opts ? opts.height : 13;
    let name = opts && 'name' in opts ? opts.name : null;
    let border = opts && 'border' in opts ? opts.border : null;
    let flags = opts && 'flags' in opts ? opts.flags : null;
    let date = opts && 'date' in opts ? opts.date : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let highlighting = opts && 'highlighting' in opts ? opts.highlighting : null;
    let maxLength = opts && 'maxLength' in opts ? opts.maxLength : null;
    let alternateName = opts && 'alternateName' in opts ? opts.alternateName : null;
    let mappingName = opts && 'mappingName' in opts ? opts.mappingName : null;
    let fieldFlags = opts && 'fieldFlags' in opts ? opts.fieldFlags : null;
    let value = opts && 'value' in opts ? opts.value : null;
    let defaultValue = opts && 'defaultValue' in opts ? opts.defaultValue : null;
    let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
    annotations.TextField.__proto__.new.call(this, {child: (t1 = child, t1 == null ? new basic.SizedBox.new({width: width, height: height}) : t1), builder: new annotations.AnnotationTextField.new({name: name, border: border, flags: flags, date: date, color: color, backgroundColor: backgroundColor, highlighting: highlighting, maxLength: maxLength, alternateName: alternateName, mappingName: mappingName, fieldFlags: fieldFlags, value: value, defaultValue: defaultValue, textStyle: textStyle})});
    ;
  }).prototype = annotations.TextField.prototype;
  dart.addTypeTests(annotations.TextField);
  dart.addTypeCaches(annotations.TextField);
  dart.setLibraryUri(annotations.TextField, L30);
  var _name$6 = dart.privateName(outline, "_name");
  var C90;
  var _outline = dart.privateName(annotations, "_outline");
  var _buildOutline = dart.privateName(annotations, "_buildOutline");
  var title$ = dart.privateName(annotations, "Outline.title");
  var level$ = dart.privateName(annotations, "Outline.level");
  var color$9 = dart.privateName(annotations, "Outline.color");
  var style$2 = dart.privateName(annotations, "Outline.style");
  annotations.Outline = class Outline extends annotations.Anchor {
    get title() {
      return this[title$];
    }
    set title(value) {
      super.title = value;
    }
    get level() {
      return this[level$];
    }
    set level(value) {
      super.level = value;
    }
    get color() {
      return this[color$9];
    }
    set color(value) {
      super.color = value;
    }
    get style() {
      return this[style$2];
    }
    set style(value) {
      super.style = value;
    }
    layout(context, constraints, opts) {
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      super.layout(context, constraints, {parentUsesSize: parentUsesSize});
      this[_buildOutline](context);
    }
    debugPaint(context) {
      let t1;
      t1 = context.canvas;
      (() => {
        t1.setFillColor(colors.PdfColors.pink100);
        t1.drawBox(this.box);
        t1.fillPath();
        return t1;
      })();
    }
    [_buildOutline](context) {
      if (this[_outline] != null) {
        return;
      }
      this[_outline] = new outline.PdfOutline.new(context.document, {title: this.title, anchor: this.name, color: this.color, style: this.style});
      let parent = context.document.outline;
      let l = this.level;
      while (dart.notNull(l) > 0) {
        if (parent.effectiveLevel == l) {
          break;
        }
        if (dart.test(parent.outlines[$isEmpty])) {
          parent.effectiveLevel = this.level;
          break;
        }
        parent = parent.outlines[$last];
        l = dart.notNull(l) - 1;
      }
      parent.add(this[_outline]);
    }
  };
  (annotations.Outline.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    let name = opts && 'name' in opts ? opts.name : null;
    let title = opts && 'title' in opts ? opts.title : null;
    let level = opts && 'level' in opts ? opts.level : 0;
    let color = opts && 'color' in opts ? opts.color : null;
    let style = opts && 'style' in opts ? opts.style : C90 || CT.C90;
    this[_outline] = null;
    this[title$] = title;
    this[level$] = level;
    this[color$9] = color;
    this[style$2] = style;
    if (!(title != null)) dart.assertFailed(null, L29, 344, 16, "title != null");
    if (!(level != null && dart.notNull(level) >= 0)) dart.assertFailed(null, L29, 345, 16, "level != null && level >= 0");
    if (!(style != null)) dart.assertFailed(null, L29, 346, 16, "style != null");
    annotations.Outline.__proto__.new.call(this, {child: child, name: name, setX: true});
    ;
  }).prototype = annotations.Outline.prototype;
  dart.addTypeTests(annotations.Outline);
  dart.addTypeCaches(annotations.Outline);
  dart.setMethodSignature(annotations.Outline, () => ({
    __proto__: dart.getMethods(annotations.Outline.__proto__),
    [_buildOutline]: dart.fnType(dart.void, [dart.legacy(widget$.Context)])
  }));
  dart.setLibraryUri(annotations.Outline, L30);
  dart.setFieldSignature(annotations.Outline, () => ({
    __proto__: dart.getFields(annotations.Outline.__proto__),
    title: dart.finalFieldType(dart.legacy(core.String)),
    level: dart.finalFieldType(dart.legacy(core.int)),
    color: dart.finalFieldType(dart.legacy(color.PdfColor)),
    style: dart.finalFieldType(dart.legacy(outline.PdfOutlineStyle)),
    [_outline]: dart.fieldType(dart.legacy(outline.PdfOutline))
  }));
  dart.trackLibraries("packages/pdf/src/widgets/container.dart", {
    "package:pdf/src/widgets/container.dart": container,
    "package:pdf/src/widgets/icon.dart": icon$,
    "package:pdf/src/widgets/theme.dart": theme$,
    "package:pdf/src/widgets/font.dart": font$,
    "package:pdf/src/widgets/image_provider.dart": image_provider,
    "package:pdf/src/widgets/decoration.dart": decoration$,
    "package:pdf/src/widgets/text_style.dart": text_style,
    "package:pdf/src/widgets/text.dart": text$,
    "package:pdf/src/widgets/page_theme.dart": page_theme,
    "package:pdf/src/widgets/geometry.dart": geometry,
    "package:pdf/src/widgets/page.dart": page$,
    "package:pdf/src/widgets/document.dart": document$,
    "package:pdf/src/widgets/widget.dart": widget$,
    "package:pdf/src/widgets/border_radius.dart": border_radius,
    "package:pdf/src/widgets/box_border.dart": box_border,
    "package:pdf/src/widgets/basic.dart": basic,
    "package:pdf/src/widgets/annotations.dart": annotations
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["widget.dart","container.dart","icon.dart","theme.dart","font.dart","image_provider.dart","decoration.dart","text_style.dart","text.dart","page_theme.dart","geometry.dart","page.dart","document.dart","border_radius.dart","box_border.dart","basic.dart","annotations.dart"],"names":[],"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","file":"../../../../../../../../../packages/pdf/src/widgets/container.dart.lib.js"}');
  // Exports:
  return {
    src__widgets__container: container,
    src__widgets__icon: icon$,
    src__widgets__theme: theme$,
    src__widgets__font: font$,
    src__widgets__image_provider: image_provider,
    src__widgets__decoration: decoration$,
    src__widgets__text_style: text_style,
    src__widgets__text: text$,
    src__widgets__page_theme: page_theme,
    src__widgets__geometry: geometry,
    src__widgets__page: page$,
    src__widgets__document: document$,
    src__widgets__widget: widget$,
    src__widgets__border_radius: border_radius,
    src__widgets__box_border: box_border,
    src__widgets__basic: basic,
    src__widgets__annotations: annotations
  };
}));

//# sourceMappingURL=container.dart.lib.js.map
