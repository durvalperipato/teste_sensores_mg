define(['dart_sdk', 'packages/image/src/util/output_buffer.dart', 'packages/image/src/util/neural_quantizer.dart', 'packages/image/src/formats/encoder.dart', 'packages/image/src/image.dart'], (function load__packages__image__src__formats__gif_encoder_dart(dart_sdk, packages__image__src__util__output_buffer$46dart, packages__image__src__util__neural_quantizer$46dart, packages__image__src__formats__encoder$46dart, packages__image__src__image$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _native_typed_data = dart_sdk._native_typed_data;
  const _interceptors = dart_sdk._interceptors;
  const typed_data = dart_sdk.typed_data;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const output_buffer = packages__image__src__util__output_buffer$46dart.src__util__output_buffer;
  const neural_quantizer = packages__image__src__util__neural_quantizer$46dart.src__util__neural_quantizer;
  const encoder = packages__image__src__formats__encoder$46dart.src__formats__encoder;
  const image = packages__image__src__image$46dart.src__image;
  var gif_encoder = Object.create(dart.library);
  var $truncate = dartx.truncate;
  var $leftShift = dartx['<<'];
  var $_get = dartx._get;
  var $_set = dartx._set;
  var $rightShift = dartx['>>'];
  var $codeUnits = dartx.codeUnits;
  var intL = () => (intL = dart.constFn(dart.legacy(core.int)))();
  var VoidTointL = () => (VoidTointL = dart.constFn(dart.fnType(intL(), [])))();
  var JSArrayOfintL = () => (JSArrayOfintL = dart.constFn(_interceptors.JSArray$(intL())))();
  const CT = Object.create(null);
  var L0 = "package:image/src/formats/gif_encoder.dart";
  dart.defineLazy(CT, {
    get C0() {
      return C0 = dart.constList([0, 1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383, 32767, 65535], intL());
    }
  }, false);
  var _lastImage = dart.privateName(gif_encoder, "_lastImage");
  var _lastImageDuration = dart.privateName(gif_encoder, "_lastImageDuration");
  var _lastColorMap = dart.privateName(gif_encoder, "_lastColorMap");
  var _width = dart.privateName(gif_encoder, "_width");
  var _height = dart.privateName(gif_encoder, "_height");
  var _curAccum = dart.privateName(gif_encoder, "_curAccum");
  var _curBits = dart.privateName(gif_encoder, "_curBits");
  var _nBits = dart.privateName(gif_encoder, "_nBits");
  var _initBits = dart.privateName(gif_encoder, "_initBits");
  var _EOFCode = dart.privateName(gif_encoder, "_EOFCode");
  var _maxCode = dart.privateName(gif_encoder, "_maxCode");
  var _clearCode = dart.privateName(gif_encoder, "_clearCode");
  var _freeEnt = dart.privateName(gif_encoder, "_freeEnt");
  var _clearFlag = dart.privateName(gif_encoder, "_clearFlag");
  var _block = dart.privateName(gif_encoder, "_block");
  var _blockSize = dart.privateName(gif_encoder, "_blockSize");
  var _encodedFrames = dart.privateName(gif_encoder, "_encodedFrames");
  var _writeHeader = dart.privateName(gif_encoder, "_writeHeader");
  var _writeApplicationExt = dart.privateName(gif_encoder, "_writeApplicationExt");
  var _writeGraphicsCtrlExt = dart.privateName(gif_encoder, "_writeGraphicsCtrlExt");
  var _addImage = dart.privateName(gif_encoder, "_addImage");
  var _encodeLZW = dart.privateName(gif_encoder, "_encodeLZW");
  var _output = dart.privateName(gif_encoder, "_output");
  var _addToBlock = dart.privateName(gif_encoder, "_addToBlock");
  var _writeBlock = dart.privateName(gif_encoder, "_writeBlock");
  var delay$ = dart.privateName(gif_encoder, "GifEncoder.delay");
  var repeat$ = dart.privateName(gif_encoder, "GifEncoder.repeat");
  var samplingFactor$ = dart.privateName(gif_encoder, "GifEncoder.samplingFactor");
  var output = dart.privateName(gif_encoder, "GifEncoder.output");
  var C0;
  gif_encoder.GifEncoder = class GifEncoder extends encoder.Encoder {
    get delay() {
      return this[delay$];
    }
    set delay(value) {
      this[delay$] = value;
    }
    get repeat() {
      return this[repeat$];
    }
    set repeat(value) {
      this[repeat$] = value;
    }
    get samplingFactor() {
      return this[samplingFactor$];
    }
    set samplingFactor(value) {
      this[samplingFactor$] = value;
    }
    get output() {
      return this[output];
    }
    set output(value) {
      this[output] = value;
    }
    addFrame(image, opts) {
      let duration = opts && 'duration' in opts ? opts.duration : null;
      if (this.output == null) {
        this.output = new output_buffer.OutputBuffer.new();
        this[_lastColorMap] = new neural_quantizer.NeuralQuantizer.new(image, {samplingFactor: this.samplingFactor});
        this[_lastImage] = this[_lastColorMap].getIndexMap(image);
        this[_lastImageDuration] = duration;
        this[_width] = image.width;
        this[_height] = image.height;
        return;
      }
      if (this[_encodedFrames] === 0) {
        this[_writeHeader](this[_width], this[_height]);
        this[_writeApplicationExt]();
      }
      this[_writeGraphicsCtrlExt]();
      this[_addImage](this[_lastImage], this[_width], this[_height], this[_lastColorMap].colorMap, 256);
      this[_encodedFrames] = dart.notNull(this[_encodedFrames]) + 1;
      this[_lastColorMap] = new neural_quantizer.NeuralQuantizer.new(image, {samplingFactor: this.samplingFactor});
      this[_lastImage] = this[_lastColorMap].getIndexMap(image);
      this[_lastImageDuration] = duration;
    }
    finish() {
      let bytes = null;
      if (this.output == null) {
        return bytes;
      }
      if (this[_encodedFrames] === 0) {
        this[_writeHeader](this[_width], this[_height]);
        this[_writeApplicationExt]();
      } else {
        this[_writeGraphicsCtrlExt]();
      }
      this[_addImage](this[_lastImage], this[_width], this[_height], this[_lastColorMap].colorMap, 256);
      this.output.writeByte(59);
      this[_lastImage] = null;
      this[_lastColorMap] = null;
      this[_encodedFrames] = 0;
      bytes = this.output.getBytes();
      this.output = null;
      return bytes;
    }
    encodeImage(image) {
      this.addFrame(image);
      return this.finish();
    }
    get supportsAnimation() {
      return true;
    }
    encodeAnimation(anim) {
      this.repeat = anim.loopCount;
      for (let f of anim) {
        this.addFrame(f, {duration: (dart.notNull(f.duration) / 10)[$truncate]()});
      }
      return this.finish();
    }
    [_addImage](image, width, height, colorMap, numColors) {
      this.output.writeByte(44);
      this.output.writeUint16(0);
      this.output.writeUint16(0);
      this.output.writeUint16(width);
      this.output.writeUint16(height);
      this.output.writeByte(135);
      this.output.writeBytes(colorMap);
      for (let i = numColors; dart.notNull(i) < 256; i = dart.notNull(i) + 1) {
        this.output.writeByte(0);
        this.output.writeByte(0);
        this.output.writeByte(0);
      }
      this[_encodeLZW](image, width, height);
    }
    [_encodeLZW](image, width, height) {
      let t0;
      this[_curAccum] = 0;
      this[_curBits] = 0;
      this[_blockSize] = 0;
      this[_block] = _native_typed_data.NativeUint8List.new(256);
      this.output.writeByte(8);
      let hTab = _native_typed_data.NativeInt32List.new(5003);
      let codeTab = _native_typed_data.NativeInt32List.new(5003);
      let remaining = dart.notNull(width) * dart.notNull(height);
      let curPixel = 0;
      this[_initBits] = 8 + 1;
      this[_nBits] = this[_initBits];
      this[_maxCode] = (1)[$leftShift](this[_nBits]) - 1;
      this[_clearCode] = (1)[$leftShift](dart.notNull(this[_initBits]) - 1);
      this[_EOFCode] = dart.notNull(this[_clearCode]) + 1;
      this[_clearFlag] = false;
      this[_freeEnt] = dart.notNull(this[_clearCode]) + 2;
      function _nextPixel() {
        let t0;
        if (remaining === 0) {
          return -1;
        }
        remaining = remaining - 1;
        return dart.notNull(image[$_get]((t0 = curPixel, curPixel = t0 + 1, t0))) & 255;
      }
      dart.fn(_nextPixel, VoidTointL());
      let ent = _nextPixel();
      let hshift = 0;
      for (let fcode = 5003; fcode < 65536; fcode = fcode * 2) {
        hshift = hshift + 1;
      }
      hshift = 8 - hshift;
      let hSizeReg = 5003;
      for (let i = 0; i < hSizeReg; i = i + 1) {
        hTab[$_set](i, -1);
      }
      this[_output](this[_clearCode]);
      let outerLoop = true;
      while (outerLoop) {
        outerLoop = false;
        let c = _nextPixel();
        while (c !== -1) {
          let fcode = c[$leftShift](12) + dart.notNull(ent);
          let i = (c[$leftShift](hshift) ^ dart.notNull(ent)) >>> 0;
          if (hTab[$_get](i) === fcode) {
            ent = codeTab[$_get](i);
            c = _nextPixel();
            continue;
          } else if (dart.notNull(hTab[$_get](i)) >= 0) {
            let disp = hSizeReg - i;
            if (i === 0) {
              disp = 1;
            }
            do {
              if ((i = i - disp) < 0) {
                i = i + hSizeReg;
              }
              if (hTab[$_get](i) === fcode) {
                ent = codeTab[$_get](i);
                outerLoop = true;
                break;
              }
            } while (dart.notNull(hTab[$_get](i)) >= 0);
            if (outerLoop) {
              break;
            }
          }
          this[_output](ent);
          ent = c;
          if (dart.notNull(this[_freeEnt]) < (1)[$leftShift](12)) {
            codeTab[$_set](i, (t0 = this[_freeEnt], this[_freeEnt] = dart.notNull(t0) + 1, t0));
            hTab[$_set](i, fcode);
          } else {
            for (let i = 0; i < 5003; i = i + 1) {
              hTab[$_set](i, -1);
            }
            this[_freeEnt] = dart.notNull(this[_clearCode]) + 2;
            this[_clearFlag] = true;
            this[_output](this[_clearCode]);
          }
          c = _nextPixel();
        }
      }
      this[_output](ent);
      this[_output](this[_EOFCode]);
      this.output.writeByte(0);
    }
    [_output](code) {
      this[_curAccum] = (dart.notNull(this[_curAccum]) & dart.notNull(gif_encoder.GifEncoder.MASKS[$_get](this[_curBits]))) >>> 0;
      if (dart.notNull(this[_curBits]) > 0) {
        this[_curAccum] = (dart.notNull(this[_curAccum]) | code[$leftShift](this[_curBits])) >>> 0;
      } else {
        this[_curAccum] = code;
      }
      this[_curBits] = dart.notNull(this[_curBits]) + dart.notNull(this[_nBits]);
      while (dart.notNull(this[_curBits]) >= 8) {
        this[_addToBlock](dart.notNull(this[_curAccum]) & 255);
        this[_curAccum] = this[_curAccum][$rightShift](8);
        this[_curBits] = dart.notNull(this[_curBits]) - 8;
      }
      if (dart.notNull(this[_freeEnt]) > dart.notNull(this[_maxCode]) || dart.test(this[_clearFlag])) {
        if (dart.test(this[_clearFlag])) {
          this[_nBits] = this[_initBits];
          this[_maxCode] = (1)[$leftShift](this[_nBits]) - 1;
          this[_clearFlag] = false;
        } else {
          this[_nBits] = dart.notNull(this[_nBits]) + 1;
          if (this[_nBits] === 12) {
            this[_maxCode] = (1)[$leftShift](12);
          } else {
            this[_maxCode] = (1)[$leftShift](this[_nBits]) - 1;
          }
        }
      }
      if (code == this[_EOFCode]) {
        while (dart.notNull(this[_curBits]) > 0) {
          this[_addToBlock](dart.notNull(this[_curAccum]) & 255);
          this[_curAccum] = this[_curAccum][$rightShift](8);
          this[_curBits] = dart.notNull(this[_curBits]) - 8;
        }
        this[_writeBlock]();
      }
    }
    [_writeBlock]() {
      if (dart.notNull(this[_blockSize]) > 0) {
        this.output.writeByte(this[_blockSize]);
        this.output.writeBytes(this[_block], this[_blockSize]);
        this[_blockSize] = 0;
      }
    }
    [_addToBlock](c) {
      let t0;
      this[_block][$_set]((t0 = this[_blockSize], this[_blockSize] = dart.notNull(t0) + 1, t0), c);
      if (dart.notNull(this[_blockSize]) >= 254) {
        this[_writeBlock]();
      }
    }
    [_writeApplicationExt]() {
      this.output.writeByte(33);
      this.output.writeByte(255);
      this.output.writeByte(11);
      this.output.writeBytes("NETSCAPE2.0"[$codeUnits]);
      this.output.writeBytes(JSArrayOfintL().of([3, 1]));
      this.output.writeUint16(this.repeat);
      this.output.writeByte(0);
    }
    [_writeGraphicsCtrlExt]() {
      let t0;
      this.output.writeByte(33);
      this.output.writeByte(249);
      this.output.writeByte(4);
      let transparency = 0;
      let dispose = 0;
      this.output.writeByte((0 | dispose | 0 | transparency) >>> 0);
      this.output.writeUint16((t0 = this[_lastImageDuration], t0 == null ? this.delay : t0));
      this.output.writeByte(0);
      this.output.writeByte(0);
    }
    [_writeHeader](width, height) {
      this.output.writeBytes("GIF89a"[$codeUnits]);
      this.output.writeUint16(width);
      this.output.writeUint16(height);
      this.output.writeByte(0);
      this.output.writeByte(0);
      this.output.writeByte(0);
    }
  };
  (gif_encoder.GifEncoder.new = function(opts) {
    let delay = opts && 'delay' in opts ? opts.delay : 80;
    let repeat = opts && 'repeat' in opts ? opts.repeat : 0;
    let samplingFactor = opts && 'samplingFactor' in opts ? opts.samplingFactor : 10;
    this[_lastImage] = null;
    this[_lastImageDuration] = null;
    this[_lastColorMap] = null;
    this[_width] = null;
    this[_height] = null;
    this[_curAccum] = null;
    this[_curBits] = null;
    this[_nBits] = null;
    this[_initBits] = null;
    this[_EOFCode] = null;
    this[_maxCode] = null;
    this[_clearCode] = null;
    this[_freeEnt] = null;
    this[_clearFlag] = null;
    this[_block] = null;
    this[_blockSize] = null;
    this[output] = null;
    this[delay$] = delay;
    this[repeat$] = repeat;
    this[samplingFactor$] = samplingFactor;
    this[_encodedFrames] = 0;
    ;
  }).prototype = gif_encoder.GifEncoder.prototype;
  dart.addTypeTests(gif_encoder.GifEncoder);
  dart.addTypeCaches(gif_encoder.GifEncoder);
  dart.setMethodSignature(gif_encoder.GifEncoder, () => ({
    __proto__: dart.getMethods(gif_encoder.GifEncoder.__proto__),
    addFrame: dart.fnType(dart.void, [dart.legacy(image.Image)], {duration: dart.legacy(core.int)}, {}),
    finish: dart.fnType(dart.legacy(core.List$(dart.legacy(core.int))), []),
    encodeImage: dart.fnType(dart.legacy(core.List$(dart.legacy(core.int))), [dart.legacy(image.Image)]),
    [_addImage]: dart.fnType(dart.void, [dart.legacy(typed_data.Uint8List), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(typed_data.Uint8List), dart.legacy(core.int)]),
    [_encodeLZW]: dart.fnType(dart.void, [dart.legacy(typed_data.Uint8List), dart.legacy(core.int), dart.legacy(core.int)]),
    [_output]: dart.fnType(dart.void, [dart.legacy(core.int)]),
    [_writeBlock]: dart.fnType(dart.void, []),
    [_addToBlock]: dart.fnType(dart.void, [dart.legacy(core.int)]),
    [_writeApplicationExt]: dart.fnType(dart.void, []),
    [_writeGraphicsCtrlExt]: dart.fnType(dart.void, []),
    [_writeHeader]: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int)])
  }));
  dart.setLibraryUri(gif_encoder.GifEncoder, L0);
  dart.setFieldSignature(gif_encoder.GifEncoder, () => ({
    __proto__: dart.getFields(gif_encoder.GifEncoder.__proto__),
    delay: dart.fieldType(dart.legacy(core.int)),
    repeat: dart.fieldType(dart.legacy(core.int)),
    samplingFactor: dart.fieldType(dart.legacy(core.int)),
    [_lastImage]: dart.fieldType(dart.legacy(typed_data.Uint8List)),
    [_lastImageDuration]: dart.fieldType(dart.legacy(core.int)),
    [_lastColorMap]: dart.fieldType(dart.legacy(neural_quantizer.NeuralQuantizer)),
    [_width]: dart.fieldType(dart.legacy(core.int)),
    [_height]: dart.fieldType(dart.legacy(core.int)),
    [_encodedFrames]: dart.fieldType(dart.legacy(core.int)),
    [_curAccum]: dart.fieldType(dart.legacy(core.int)),
    [_curBits]: dart.fieldType(dart.legacy(core.int)),
    [_nBits]: dart.fieldType(dart.legacy(core.int)),
    [_initBits]: dart.fieldType(dart.legacy(core.int)),
    [_EOFCode]: dart.fieldType(dart.legacy(core.int)),
    [_maxCode]: dart.fieldType(dart.legacy(core.int)),
    [_clearCode]: dart.fieldType(dart.legacy(core.int)),
    [_freeEnt]: dart.fieldType(dart.legacy(core.int)),
    [_clearFlag]: dart.fieldType(dart.legacy(core.bool)),
    [_block]: dart.fieldType(dart.legacy(typed_data.Uint8List)),
    [_blockSize]: dart.fieldType(dart.legacy(core.int)),
    output: dart.fieldType(dart.legacy(output_buffer.OutputBuffer))
  }));
  dart.defineLazy(gif_encoder.GifEncoder, {
    /*gif_encoder.GifEncoder.GIF89_STAMP*/get GIF89_STAMP() {
      return "GIF89a";
    },
    /*gif_encoder.GifEncoder.IMAGE_DESC_RECORD_TYPE*/get IMAGE_DESC_RECORD_TYPE() {
      return 44;
    },
    /*gif_encoder.GifEncoder.EXTENSION_RECORD_TYPE*/get EXTENSION_RECORD_TYPE() {
      return 33;
    },
    /*gif_encoder.GifEncoder.TERMINATE_RECORD_TYPE*/get TERMINATE_RECORD_TYPE() {
      return 59;
    },
    /*gif_encoder.GifEncoder.APPLICATION_EXT*/get APPLICATION_EXT() {
      return 255;
    },
    /*gif_encoder.GifEncoder.GRAPHIC_CONTROL_EXT*/get GRAPHIC_CONTROL_EXT() {
      return 249;
    },
    /*gif_encoder.GifEncoder.EOF*/get EOF() {
      return -1;
    },
    /*gif_encoder.GifEncoder.BITS*/get BITS() {
      return 12;
    },
    /*gif_encoder.GifEncoder.HSIZE*/get HSIZE() {
      return 5003;
    },
    /*gif_encoder.GifEncoder.MASKS*/get MASKS() {
      return C0 || CT.C0;
    }
  }, true);
  dart.trackLibraries("packages/image/src/formats/gif_encoder.dart", {
    "package:image/src/formats/gif_encoder.dart": gif_encoder
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["gif_encoder.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IASM;;;;;;IAAO;;;;;;IAAQ;;;;;;IAkVN;;;;;;aA1UO;UAAY;AAC9B,UAAI,AAAO,eAAG;AACW,QAAvB,cAAS;AAE6D,QAAtE,sBAAgB,yCAAgB,KAAK,mBAAkB;AACV,QAA7C,mBAAa,AAAc,gCAAY,KAAK;AACf,QAA7B,2BAAqB,QAAQ;AAET,QAApB,eAAS,AAAM,KAAD;AACQ,QAAtB,gBAAU,AAAM,KAAD;AACf;;AAGF,UAAI,AAAe,yBAAG;AACS,QAA7B,mBAAa,cAAQ;AACC,QAAtB;;AAGqB,MAAvB;AAEmE,MAAnE,gBAAU,kBAAY,cAAQ,eAAS,AAAc,8BAAU;AAC/C,MAAhB,uBAAc,aAAd,wBAAc;AAEwD,MAAtE,sBAAgB,yCAAgB,KAAK,mBAAkB;AACV,MAA7C,mBAAa,AAAc,gCAAY,KAAK;AACf,MAA7B,2BAAqB,QAAQ;IAC/B;;AAUY;AACV,UAAI,AAAO,eAAG;AACZ,cAAO,MAAK;;AAGd,UAAI,AAAe,yBAAG;AACS,QAA7B,mBAAa,cAAQ;AACC,QAAtB;;AAEuB,QAAvB;;AAGiE,MAAnE,gBAAU,kBAAY,cAAQ,eAAS,AAAc,8BAAU;AAExB,MAAvC,AAAO;AAEU,MAAjB,mBAAa;AACO,MAApB,sBAAgB;AACE,MAAlB,uBAAiB;AAEQ,MAAzB,QAAQ,AAAO;AACF,MAAb,cAAS;AACT,YAAO,MAAK;IACd;gBAI4B;AACX,MAAf,cAAS,KAAK;AACd,YAAO;IACT;;AAI8B;IAAI;oBAIE;AACX,MAAvB,cAAS,AAAK,IAAD;AACb,eAAS,IAAK,KAAI;AAIf,QAHD,cACE,CAAC,aACoB,cAAX,AAAE,CAAD,aAAa;;AAG5B,YAAO;IACT;gBAEyB,OAAW,OAAW,QAAkB,UACzD;AAEkC,MAAxC,AAAO;AACc,MAArB,AAAO,wBAAY;AACE,MAArB,AAAO,wBAAY;AACM,MAAzB,AAAO,wBAAY,KAAK;AACE,MAA1B,AAAO,wBAAY,MAAM;AAIH,MAAtB,AAAO,sBAAU;AACU,MAA3B,AAAO,uBAAW,QAAQ;AAC1B,eAAS,IAAI,SAAS,EAAI,aAAF,CAAC,IAAG,KAAO,IAAF,aAAE,CAAC,IAAH;AACZ,QAAnB,AAAO,sBAAU;AACE,QAAnB,AAAO,sBAAU;AACE,QAAnB,AAAO,sBAAU;;AAGa,MAAhC,iBAAW,KAAK,EAAE,KAAK,EAAE,MAAM;IACjC;iBAE0B,OAAW,OAAW;;AACjC,MAAb,kBAAY;AACA,MAAZ,iBAAW;AACG,MAAd,mBAAa;AACU,MAAvB,eAAS,uCAAU;AAGW,MAA9B,AAAO;AAEH,iBAAO;AACP,oBAAU;AACV,sBAAkB,aAAN,KAAK,iBAAG,MAAM;AAC1B,qBAAW;AAEa,MAA5B,kBAAyB,IAAE;AACT,MAAlB,eAAS;AACmB,MAA5B,iBAAc,AAAW,CAAb,eAAK,gBAAU;AACM,MAAjC,mBAAe,CAAF,eAAgB,aAAV,mBAAY;AACN,MAAzB,iBAAsB,aAAX,oBAAa;AACN,MAAlB,mBAAa;AACY,MAAzB,iBAAsB,aAAX,oBAAa;AAExB,eAAI;;AACF,YAAI,AAAU,SAAD,KAAI;AACf;;AAES,QAAT,YAAF,AAAE,SAAS,GAAX;AACA,cAAyB,cAAlB,AAAK,KAAA,SAAS,KAAR,QAAQ,6BAAM;;;AAGzB,gBAAM,AAAU,UAAA;AAEhB,mBAAS;AACb,eAAS,cAAe,AAAM,KAAD,GAAG,OAAO,QAAA,AAAM,KAAD,GAAI;AACtC,QAAR,SAAA,AAAM,MAAA;;AAEW,MAAnB,SAAS,AAAE,IAAE,MAAM;AAEf;AACJ,eAAS,IAAI,GAAG,AAAE,CAAD,GAAG,QAAQ,EAAI,IAAF,AAAE,CAAC,GAAH;AAChB,QAAZ,AAAI,IAAA,QAAC,CAAC,EAAI,CAAC;;AAGM,MAAnB,cAAQ;AAEJ,sBAAY;AAChB,aAAO,SAAS;AACG,QAAjB,YAAY;AAER,gBAAI,AAAU,UAAA;AAClB,eAAO,CAAC;AACF,sBAAS,AAAE,AAAS,CAAV,gCAAY,GAAG;AACzB,kBAAkB,CAAb,AAAE,CAAD,aAAI,MAAM,iBAAI,GAAG;AAE3B,cAAI,AAAI,AAAI,IAAJ,QAAC,CAAC,MAAK,KAAK;AACF,YAAhB,MAAM,AAAO,OAAA,QAAC,CAAC;AACC,YAAhB,IAAI,AAAU,UAAA;AACd;gBACK,KAAY,aAAR,AAAI,IAAA,QAAC,CAAC,MAAK;AAEhB,uBAAO,AAAS,QAAD,GAAG,CAAC;AACvB,gBAAI,AAAE,CAAD,KAAI;AACC,cAAR,OAAO;;AAET;AACE,kBAAgB,CAAX,IAAA,AAAE,CAAD,GAAI,IAAI,IAAI;AACH,gBAAb,IAAA,AAAE,CAAD,GAAI,QAAQ;;AAGf,kBAAI,AAAI,AAAI,IAAJ,QAAC,CAAC,MAAK,KAAK;AACF,gBAAhB,MAAM,AAAO,OAAA,QAAC,CAAC;AACC,gBAAhB,YAAY;AACZ;;qBAEa,aAAR,AAAI,IAAA,QAAC,CAAC,MAAK;AACpB,gBAAI,SAAS;AACX;;;AAIQ,UAAZ,cAAQ,GAAG;AACJ,UAAP,MAAM,CAAC;AAEP,cAAa,aAAT,kBAAc,CAAF;AACS,YAAvB,AAAO,OAAA,QAAC,CAAC,GAAY,qBAAR,oCAAQ;AACN,YAAf,AAAI,IAAA,QAAC,CAAC,EAAI,KAAK;;AAEf,qBAAS,IAAI,GAAG,AAAE,CAAD,SAAY,IAAF,AAAE,CAAC,GAAH;AACb,cAAZ,AAAI,IAAA,QAAC,CAAC,EAAI,CAAC;;AAEY,YAAzB,iBAAsB,aAAX,oBAAa;AACP,YAAjB,mBAAa;AACM,YAAnB,cAAQ;;AAGM,UAAhB,IAAI,AAAU,UAAA;;;AAIN,MAAZ,cAAQ,GAAG;AACM,MAAjB,cAAQ;AAEW,MAAnB,AAAO,sBAAU;IACnB;cAEiB;AACa,MAA5B,kBAAU,cAAV,gCAAa,AAAK,oCAAC;AAEnB,UAAa,aAAT,kBAAW;AACkB,QAA/B,kBAAU,cAAV,mBAAc,AAAK,IAAD,aAAI;;AAEN,QAAhB,kBAAY,IAAI;;AAGA,MAAlB,iBAAS,aAAT,+BAAY;AAEZ,aAAgB,aAAT,mBAAY;AACY,QAA7B,kBAAsB,aAAV,mBAAY;AACT,QAAf,kBAAA,AAAU,6BAAI;AACD,QAAb,iBAAS,aAAT,kBAAY;;AAKd,UAAa,aAAT,+BAAW,6BAAY;AACzB,sBAAI;AACgB,UAAlB,eAAS;AACmB,UAA5B,iBAAc,AAAW,CAAb,eAAK,gBAAU;AACT,UAAlB,mBAAa;;AAEL,UAAN,eAAF,aAAE,gBAAF;AACA,cAAI,AAAO;AACW,YAApB,iBAAa,CAAF;;AAEiB,YAA5B,iBAAc,AAAW,CAAb,eAAK,gBAAU;;;;AAKjC,UAAI,AAAK,IAAD,IAAI;AAEV,eAAgB,aAAT,kBAAW;AACa,UAA7B,kBAAsB,aAAV,mBAAY;AACT,UAAf,kBAAA,AAAU,6BAAI;AACD,UAAb,iBAAS,aAAT,kBAAY;;AAED,QAAb;;IAEJ;;AAGE,UAAe,aAAX,oBAAa;AACa,QAA5B,AAAO,sBAAU;AACoB,QAArC,AAAO,uBAAW,cAAQ;AACZ,QAAd,mBAAa;;IAEjB;kBAEqB;;AACK,MAAxB,AAAM,qBAAW,uBAAV,sCAAU,QAAM,CAAC;AACxB,UAAe,aAAX,qBAAc;AACH,QAAb;;IAEJ;;AAGyC,MAAvC,AAAO;AAC0B,MAAjC,AAAO;AACa,MAApB,AAAO,sBAAU;AACyB,MAA1C,AAAO,uBAAW,AAAc;AACD,MAA/B,AAAO,uBAAW,oBAAC,GAAM;AACC,MAA1B,AAAO,wBAAY;AACA,MAAnB,AAAO,sBAAU;IACnB;;;AAGyC,MAAvC,AAAO;AAC8B,MAArC,AAAO;AACY,MAAnB,AAAO,sBAAU;AAEb,yBAAe;AACf,oBAAU;AAMG,MAHjB,AAAO,sBAED,CAFW,AAAE,AACP,IAAR,OAAO,GACP,IACA,YAAY;AAE+B,MAA/C,AAAO,yBAA+B,qCAAnB,OAAsB;AACtB,MAAnB,AAAO,sBAAU;AACE,MAAnB,AAAO,sBAAU;IACnB;mBAGsB,OAAW;AACS,MAAxC,AAAO,uBAAuB;AACL,MAAzB,AAAO,wBAAY,KAAK;AACE,MAA1B,AAAO,wBAAY,MAAM;AACN,MAAnB,AAAO,sBAAU;AACE,MAAnB,AAAO,sBAAU;AACE,MAAnB,AAAO,sBAAU;IACnB;;;QA3TiB;QAAiB;QAAiB;IA6TzC;IACN;IACY;IACZ;IACA;IAGA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACC;IACK;IACN;IAES;IAhVI;IAAiB;IAAiB;IAC9B,uBAAE;;EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAiVJ,kCAAW;;;MAElB,6CAAsB;;;MACtB,4CAAqB;;;MACrB,4CAAqB;;;MAErB,sCAAe;;;MACf,0CAAmB;;;MAEnB,0BAAG;;;MACH,2BAAI;;;MACJ,4BAAK;;;MACK,4BAAK","file":"../../../../../../../../../packages/image/src/formats/gif_encoder.dart.lib.js"}');
  // Exports:
  return {
    src__formats__gif_encoder: gif_encoder
  };
}));

//# sourceMappingURL=gif_encoder.dart.lib.js.map
