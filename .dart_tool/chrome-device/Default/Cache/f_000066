define(['dart_sdk', 'packages/pdf/src/widgets/container.dart', 'packages/pdf/src/pdf/rect.dart', 'packages/vector_math/vector_math_64.dart', 'packages/pdf/src/pdf/signature.dart', 'packages/pdf/src/pdf/point.dart'], (function load__packages__pdf__src__widgets__multi_page_dart(dart_sdk, packages__pdf__src__widgets__container$46dart, packages__pdf__src__pdf__rect$46dart, packages__vector_math__vector_math_64$46dart, packages__pdf__src__pdf__signature$46dart, packages__pdf__src__pdf__point$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _interceptors = dart_sdk._interceptors;
  const math = dart_sdk.math;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const widget = packages__pdf__src__widgets__container$46dart.src__widgets__widget;
  const geometry = packages__pdf__src__widgets__container$46dart.src__widgets__geometry;
  const theme = packages__pdf__src__widgets__container$46dart.src__widgets__theme;
  const text_style = packages__pdf__src__widgets__container$46dart.src__widgets__text_style;
  const document$ = packages__pdf__src__widgets__container$46dart.src__widgets__document;
  const page = packages__pdf__src__widgets__container$46dart.src__widgets__page;
  const basic = packages__pdf__src__widgets__container$46dart.src__widgets__basic;
  const rect = packages__pdf__src__pdf__rect$46dart.src__pdf__rect;
  const vector_math_64 = packages__vector_math__vector_math_64$46dart.vector_math_64;
  const page$ = packages__pdf__src__pdf__signature$46dart.src__pdf__page;
  const point = packages__pdf__src__pdf__point$46dart.src__pdf__point;
  var multi_page = Object.create(dart.library);
  var flex$ = Object.create(dart.library);
  var $length = dartx.length;
  var $_get = dartx._get;
  var $add = dartx.add;
  var $last = dartx.last;
  var $toString = dartx.toString;
  var $sublist = dartx.sublist;
  var _MultiPageWidgetL = () => (_MultiPageWidgetL = dart.constFn(dart.legacy(multi_page._MultiPageWidget)))();
  var JSArrayOf_MultiPageWidgetL = () => (JSArrayOf_MultiPageWidgetL = dart.constFn(_interceptors.JSArray$(_MultiPageWidgetL())))();
  var _MultiPageInstanceL = () => (_MultiPageInstanceL = dart.constFn(dart.legacy(multi_page._MultiPageInstance)))();
  var JSArrayOf_MultiPageInstanceL = () => (JSArrayOf_MultiPageInstanceL = dart.constFn(_interceptors.JSArray$(_MultiPageInstanceL())))();
  var InheritedL = () => (InheritedL = dart.constFn(dart.legacy(widget.Inherited)))();
  var JSArrayOfInheritedL = () => (JSArrayOfInheritedL = dart.constFn(_interceptors.JSArray$(InheritedL())))();
  var SpanningWidgetL = () => (SpanningWidgetL = dart.constFn(dart.legacy(multi_page.SpanningWidget)))();
  var boolL = () => (boolL = dart.constFn(dart.legacy(core.bool)))();
  var VoidToboolL = () => (VoidToboolL = dart.constFn(dart.fnType(boolL(), [])))();
  var NewPageL = () => (NewPageL = dart.constFn(dart.legacy(multi_page.NewPage)))();
  var FlexibleL = () => (FlexibleL = dart.constFn(dart.legacy(flex$.Flexible)))();
  var numL = () => (numL = dart.constFn(dart.legacy(core.num)))();
  var FlexFitL = () => (FlexFitL = dart.constFn(dart.legacy(flex$.FlexFit)))();
  var AxisL = () => (AxisL = dart.constFn(dart.legacy(flex$.Axis)))();
  var MainAxisSizeL = () => (MainAxisSizeL = dart.constFn(dart.legacy(flex$.MainAxisSize)))();
  var MainAxisAlignmentL = () => (MainAxisAlignmentL = dart.constFn(dart.legacy(flex$.MainAxisAlignment)))();
  var CrossAxisAlignmentL = () => (CrossAxisAlignmentL = dart.constFn(dart.legacy(flex$.CrossAxisAlignment)))();
  var VerticalDirectionL = () => (VerticalDirectionL = dart.constFn(dart.legacy(flex$.VerticalDirection)))();
  var _FlexContextL = () => (_FlexContextL = dart.constFn(dart.legacy(flex$._FlexContext)))();
  var WidgetL = () => (WidgetL = dart.constFn(dart.legacy(widget.Widget)))();
  var doubleL = () => (doubleL = dart.constFn(dart.legacy(core.double)))();
  var WidgetLAnddoubleLTodoubleL = () => (WidgetLAnddoubleLTodoubleL = dart.constFn(dart.fnType(doubleL(), [WidgetL(), doubleL()])))();
  var JSArrayOfWidgetL = () => (JSArrayOfWidgetL = dart.constFn(_interceptors.JSArray$(WidgetL())))();
  const CT = Object.create(null);
  var L2 = "package:pdf/src/widgets/flex.dart";
  var L0 = "package:pdf/src/widgets/multi_page.dart";
  var L3 = "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-2.0.0/lib/src/widgets/flex.dart";
  var L1 = "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/pdf-2.0.0/lib/src/widgets/multi_page.dart";
  dart.defineLazy(CT, {
    get C0() {
      return C0 = dart.const({
        __proto__: flex$.MainAxisAlignment.prototype,
        [_name$]: "MainAxisAlignment.start",
        index: 0
      });
    },
    get C1() {
      return C1 = dart.const({
        __proto__: flex$.CrossAxisAlignment.prototype,
        [_name$]: "CrossAxisAlignment.start",
        index: 0
      });
    },
    get C2() {
      return C2 = dart.const({
        __proto__: flex$.MainAxisAlignment.prototype,
        [_name$]: "MainAxisAlignment.end",
        index: 1
      });
    },
    get C3() {
      return C3 = dart.const({
        __proto__: flex$.MainAxisAlignment.prototype,
        [_name$]: "MainAxisAlignment.center",
        index: 2
      });
    },
    get C4() {
      return C4 = dart.const({
        __proto__: flex$.MainAxisAlignment.prototype,
        [_name$]: "MainAxisAlignment.spaceBetween",
        index: 3
      });
    },
    get C5() {
      return C5 = dart.const({
        __proto__: flex$.MainAxisAlignment.prototype,
        [_name$]: "MainAxisAlignment.spaceAround",
        index: 4
      });
    },
    get C6() {
      return C6 = dart.const({
        __proto__: flex$.MainAxisAlignment.prototype,
        [_name$]: "MainAxisAlignment.spaceEvenly",
        index: 5
      });
    },
    get C7() {
      return C7 = dart.const({
        __proto__: flex$.FlexFit.prototype,
        [_name$]: "FlexFit.tight",
        index: 0
      });
    },
    get C8() {
      return C8 = dart.const({
        __proto__: flex$.FlexFit.prototype,
        [_name$]: "FlexFit.loose",
        index: 1
      });
    },
    get C9() {
      return C9 = dart.const({
        __proto__: flex$.CrossAxisAlignment.prototype,
        [_name$]: "CrossAxisAlignment.end",
        index: 1
      });
    },
    get C10() {
      return C10 = dart.const({
        __proto__: flex$.CrossAxisAlignment.prototype,
        [_name$]: "CrossAxisAlignment.center",
        index: 2
      });
    },
    get C11() {
      return C11 = dart.const({
        __proto__: flex$.CrossAxisAlignment.prototype,
        [_name$]: "CrossAxisAlignment.stretch",
        index: 3
      });
    },
    get C12() {
      return C12 = dart.constList([C7 || CT.C7, C8 || CT.C8], FlexFitL());
    },
    get C13() {
      return C13 = dart.const({
        __proto__: flex$.Axis.prototype,
        [_name$]: "Axis.horizontal",
        index: 0
      });
    },
    get C14() {
      return C14 = dart.const({
        __proto__: flex$.Axis.prototype,
        [_name$]: "Axis.vertical",
        index: 1
      });
    },
    get C15() {
      return C15 = dart.constList([C13 || CT.C13, C14 || CT.C14], AxisL());
    },
    get C16() {
      return C16 = dart.const({
        __proto__: flex$.MainAxisSize.prototype,
        [_name$]: "MainAxisSize.min",
        index: 0
      });
    },
    get C17() {
      return C17 = dart.const({
        __proto__: flex$.MainAxisSize.prototype,
        [_name$]: "MainAxisSize.max",
        index: 1
      });
    },
    get C18() {
      return C18 = dart.constList([C16 || CT.C16, C17 || CT.C17], MainAxisSizeL());
    },
    get C19() {
      return C19 = dart.constList([C0 || CT.C0, C2 || CT.C2, C3 || CT.C3, C4 || CT.C4, C5 || CT.C5, C6 || CT.C6], MainAxisAlignmentL());
    },
    get C20() {
      return C20 = dart.constList([C1 || CT.C1, C9 || CT.C9, C10 || CT.C10, C11 || CT.C11], CrossAxisAlignmentL());
    },
    get C21() {
      return C21 = dart.const({
        __proto__: flex$.VerticalDirection.prototype,
        [_name$]: "VerticalDirection.up",
        index: 0
      });
    },
    get C22() {
      return C22 = dart.const({
        __proto__: flex$.VerticalDirection.prototype,
        [_name$]: "VerticalDirection.down",
        index: 1
      });
    },
    get C23() {
      return C23 = dart.constList([C21 || CT.C21, C22 || CT.C22], VerticalDirectionL());
    },
    get C24() {
      return C24 = dart.constList([], WidgetL());
    }
  }, false);
  multi_page.WidgetContext = class WidgetContext extends core.Object {};
  (multi_page.WidgetContext.new = function() {
    ;
  }).prototype = multi_page.WidgetContext.prototype;
  dart.addTypeTests(multi_page.WidgetContext);
  dart.addTypeCaches(multi_page.WidgetContext);
  dart.setLibraryUri(multi_page.WidgetContext, L0);
  multi_page.SpanningWidget = class SpanningWidget extends widget.Widget {};
  (multi_page.SpanningWidget.new = function() {
    multi_page.SpanningWidget.__proto__.new.call(this);
    ;
  }).prototype = multi_page.SpanningWidget.prototype;
  dart.addTypeTests(multi_page.SpanningWidget);
  dart.addTypeCaches(multi_page.SpanningWidget);
  dart.setLibraryUri(multi_page.SpanningWidget, L0);
  multi_page.NewPage = class NewPage extends widget.Widget {
    layout(context, constraints, opts) {
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      this.box = rect.PdfRect.zero;
    }
  };
  (multi_page.NewPage.new = function() {
    multi_page.NewPage.__proto__.new.call(this);
    ;
  }).prototype = multi_page.NewPage.prototype;
  dart.addTypeTests(multi_page.NewPage);
  dart.addTypeCaches(multi_page.NewPage);
  dart.setMethodSignature(multi_page.NewPage, () => ({
    __proto__: dart.getMethods(multi_page.NewPage.__proto__),
    layout: dart.fnType(dart.void, [dart.legacy(widget.Context), dart.legacy(geometry.BoxConstraints)], {parentUsesSize: dart.legacy(core.bool)}, {})
  }));
  dart.setLibraryUri(multi_page.NewPage, L0);
  var child$ = dart.privateName(multi_page, "_MultiPageWidget.child");
  var constraints$ = dart.privateName(multi_page, "_MultiPageWidget.constraints");
  var widgetContext$ = dart.privateName(multi_page, "_MultiPageWidget.widgetContext");
  multi_page._MultiPageWidget = class _MultiPageWidget extends core.Object {
    get child() {
      return this[child$];
    }
    set child(value) {
      super.child = value;
    }
    get constraints() {
      return this[constraints$];
    }
    set constraints(value) {
      super.constraints = value;
    }
    get widgetContext() {
      return this[widgetContext$];
    }
    set widgetContext(value) {
      super.widgetContext = value;
    }
  };
  (multi_page._MultiPageWidget.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    let constraints = opts && 'constraints' in opts ? opts.constraints : null;
    let widgetContext = opts && 'widgetContext' in opts ? opts.widgetContext : null;
    this[child$] = child;
    this[constraints$] = constraints;
    this[widgetContext$] = widgetContext;
    ;
  }).prototype = multi_page._MultiPageWidget.prototype;
  dart.addTypeTests(multi_page._MultiPageWidget);
  dart.addTypeCaches(multi_page._MultiPageWidget);
  dart.setLibraryUri(multi_page._MultiPageWidget, L0);
  dart.setFieldSignature(multi_page._MultiPageWidget, () => ({
    __proto__: dart.getFields(multi_page._MultiPageWidget.__proto__),
    child: dart.finalFieldType(dart.legacy(widget.Widget)),
    constraints: dart.finalFieldType(dart.legacy(geometry.BoxConstraints)),
    widgetContext: dart.finalFieldType(dart.legacy(multi_page.WidgetContext))
  }));
  multi_page._MultiPageInstance = class _MultiPageInstance extends core.Object {};
  (multi_page._MultiPageInstance.new = function(opts) {
    let context = opts && 'context' in opts ? opts.context : null;
    let constraints = opts && 'constraints' in opts ? opts.constraints : null;
    let fullConstraints = opts && 'fullConstraints' in opts ? opts.fullConstraints : null;
    let offsetStart = opts && 'offsetStart' in opts ? opts.offsetStart : null;
    this.widgets = JSArrayOf_MultiPageWidgetL().of([]);
    this.context = context;
    this.constraints = constraints;
    this.fullConstraints = fullConstraints;
    this.offsetStart = offsetStart;
    ;
  }).prototype = multi_page._MultiPageInstance.prototype;
  dart.addTypeTests(multi_page._MultiPageInstance);
  dart.addTypeCaches(multi_page._MultiPageInstance);
  dart.setLibraryUri(multi_page._MultiPageInstance, L0);
  dart.setFieldSignature(multi_page._MultiPageInstance, () => ({
    __proto__: dart.getFields(multi_page._MultiPageInstance.__proto__),
    context: dart.finalFieldType(dart.legacy(widget.Context)),
    constraints: dart.finalFieldType(dart.legacy(geometry.BoxConstraints)),
    fullConstraints: dart.finalFieldType(dart.legacy(geometry.BoxConstraints)),
    offsetStart: dart.finalFieldType(dart.legacy(core.double)),
    widgets: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(multi_page._MultiPageWidget))))
  }));
  var _name$ = dart.privateName(flex$, "_name");
  var C0;
  var C1;
  var _pages = dart.privateName(multi_page, "_pages");
  var _buildList = dart.privateName(multi_page, "_buildList");
  var _paintChild = dart.privateName(multi_page, "_paintChild");
  var C2;
  var C3;
  var C4;
  var C5;
  var C6;
  var C7;
  var C8;
  var C9;
  var C10;
  var C11;
  var crossAxisAlignment$ = dart.privateName(multi_page, "MultiPage.crossAxisAlignment");
  var header$ = dart.privateName(multi_page, "MultiPage.header");
  var footer$ = dart.privateName(multi_page, "MultiPage.footer");
  var mainAxisAlignment$ = dart.privateName(multi_page, "MultiPage.mainAxisAlignment");
  var maxPages$ = dart.privateName(multi_page, "MultiPage.maxPages");
  multi_page.MultiPage = class MultiPage extends page.Page {
    get crossAxisAlignment() {
      return this[crossAxisAlignment$];
    }
    set crossAxisAlignment(value) {
      super.crossAxisAlignment = value;
    }
    get header() {
      return this[header$];
    }
    set header(value) {
      super.header = value;
    }
    get footer() {
      return this[footer$];
    }
    set footer(value) {
      super.footer = value;
    }
    get mainAxisAlignment() {
      return this[mainAxisAlignment$];
    }
    set mainAxisAlignment(value) {
      super.mainAxisAlignment = value;
    }
    get maxPages() {
      return this[maxPages$];
    }
    set maxPages(value) {
      super.maxPages = value;
    }
    [_paintChild](context, child, x, y, pageHeight) {
      let t1, t0;
      if (dart.test(this.mustRotate)) {
        let _margin = this.margin;
        t0 = context.canvas;
        (() => {
          t0.saveContext();
          t0.setTransform((t1 = vector_math_64.Matrix4.identity(), (() => {
            t1.rotateZ(-3.141592653589793 / 2);
            t1.translate(dart.notNull(x) - dart.notNull(pageHeight) + dart.notNull(_margin.top) - dart.notNull(_margin.left), dart.notNull(y) + dart.notNull(_margin.left) - dart.notNull(_margin.bottom));
            return t1;
          })()));
          return t0;
        })();
        child.paint(context);
        context.canvas.restoreContext();
      } else {
        child.box = new rect.PdfRect.new(x, y, child.box.width, child.box.height);
        child.paint(context);
      }
    }
    generate(document, opts) {
      let t0, t0$, t1, t1$, t1$0, t1$1, t1$2;
      let insert = opts && 'insert' in opts ? opts.insert : true;
      let index = opts && 'index' in opts ? opts.index : null;
      if (this[_buildList] == null) {
        return;
      }
      if (!(dart.notNull(this.pageFormat.width) > 0 && dart.notNull(this.pageFormat.width) < 1 / 0)) dart.assertFailed(null, L1, 158, 12, "pageFormat.width > 0 && pageFormat.width < double.infinity");
      if (!(dart.notNull(this.pageFormat.height) > 0 && dart.notNull(this.pageFormat.height) < 1 / 0)) dart.assertFailed(null, L1, 159, 12, "pageFormat.height > 0 && pageFormat.height < double.infinity");
      let _margin = this.margin;
      let _mustRotate = this.mustRotate;
      let pageHeight = dart.test(_mustRotate) ? this.pageFormat.width : this.pageFormat.height;
      let pageHeightMargin = dart.test(_mustRotate) ? _margin.horizontal : _margin.vertical;
      let constraints = new geometry.BoxConstraints.new({maxWidth: dart.test(_mustRotate) ? dart.notNull(this.pageFormat.height) - dart.notNull(_margin.vertical) : dart.notNull(this.pageFormat.width) - dart.notNull(_margin.horizontal)});
      let fullConstraints = dart.test(this.mustRotate) ? new geometry.BoxConstraints.new({maxWidth: dart.notNull(this.pageFormat.height) - dart.notNull(_margin.vertical), maxHeight: dart.notNull(this.pageFormat.width) - dart.notNull(_margin.horizontal)}) : new geometry.BoxConstraints.new({maxWidth: dart.notNull(this.pageFormat.width) - dart.notNull(_margin.horizontal), maxHeight: dart.notNull(this.pageFormat.height) - dart.notNull(_margin.vertical)});
      let calculatedTheme = (t0$ = (t0 = this.theme, t0 == null ? document.theme : t0), t0$ == null ? theme.ThemeData.base() : t0$);
      let context = null;
      let offsetEnd = null;
      let offsetStart = null;
      let _index = 0;
      let sameCount = 0;
      let baseContext = widget.Context.new({document: document.document}).inheritFromAll((() => {
        let t0 = JSArrayOfInheritedL().of([calculatedTheme]);
        if (this.pageTheme.textDirection != null) t0.push(new text_style.InheritedDirectionality.new(this.pageTheme.textDirection));
        return t0;
      })());
      let children = (t1 = baseContext, this[_buildList](t1));
      let widgetContext = null;
      while (_index < dart.notNull(children[$length])) {
        let child = children[$_get](_index);
        let canSpan = false;
        if (SpanningWidgetL().is(child)) {
          canSpan = child.canSpan;
        }
        if (!dart.test(dart.fn(() => {
          let t1;
          if ((t1 = sameCount, sameCount = t1 + 1, t1) > dart.notNull(this.maxPages)) {
            dart.throw(core.Exception.new("This widget created more than " + dart.str(this.maxPages) + " pages. This may be an issue in the widget or the document."));
          }
          return true;
        }, VoidToboolL())())) dart.assertFailed(null, L1, 199, 14, "() {\n        // Detect too big widgets\n        if (sameCount++ > maxPages) {\n          throw Exception(\n              'This widget created more than $maxPages pages. This may be an issue in the widget or the document.');\n        }\n        return true;\n      }()");
        if (context == null || NewPageL().is(child)) {
          let pdfPage = new page$.PdfPage.new(document.document, {pageFormat: this.pageFormat, index: index == null ? null : (t1$ = index, index = dart.notNull(t1$) + 1, t1$)});
          let canvas = pdfPage.getGraphics();
          canvas.reset();
          context = baseContext.copyWith({page: pdfPage, canvas: canvas});
          if (!dart.test(dart.fn(() => {
            if (dart.test(document$.Document.debug)) {
              this.debugPaint(context);
            }
            return true;
          }, VoidToboolL())())) dart.assertFailed(null, L1, 219, 16, "() {\n          if (Document.debug) {\n            debugPaint(context);\n          }\n          return true;\n        }()");
          offsetStart = dart.notNull(pageHeight) - dart.notNull(dart.test(_mustRotate) ? dart.notNull(pageHeightMargin) - dart.notNull(_margin.bottom) : _margin.top);
          offsetEnd = dart.test(_mustRotate) ? dart.notNull(pageHeightMargin) - dart.notNull(_margin.left) : _margin.bottom;
          this[_pages][$add](new multi_page._MultiPageInstance.new({context: context, constraints: constraints, fullConstraints: fullConstraints, offsetStart: offsetStart}));
          if (this.header != null) {
            let headerWidget = (t1$0 = context, this.header(t1$0));
            if (headerWidget != null) {
              headerWidget.layout(context, constraints, {parentUsesSize: false});
              if (!(headerWidget.box != null)) dart.assertFailed(null, L1, 242, 20, "headerWidget.box != null");
              offsetStart = dart.notNull(offsetStart) - dart.notNull(headerWidget.box.height);
            }
          }
          if (this.footer != null) {
            let footerWidget = (t1$1 = context, this.footer(t1$1));
            if (footerWidget != null) {
              footerWidget.layout(context, constraints, {parentUsesSize: false});
              if (!(footerWidget.box != null)) dart.assertFailed(null, L1, 251, 20, "footerWidget.box != null");
              offsetEnd = dart.notNull(offsetEnd) + dart.notNull(footerWidget.box.height);
            }
          }
        }
        if (widgetContext != null && dart.test(canSpan) && SpanningWidgetL().is(child)) {
          child.restoreContext(widgetContext);
          widgetContext = null;
        }
        child.layout(context, constraints, {parentUsesSize: false});
        if (!(child.box != null)) dart.assertFailed(null, L1, 264, 14, "child.box != null");
        if (dart.notNull(offsetStart) - dart.notNull(child.box.height) < dart.notNull(offsetEnd)) {
          if (dart.notNull(child.box.height) <= dart.notNull(pageHeight) - dart.notNull(pageHeightMargin) && !dart.test(canSpan)) {
            context = null;
            continue;
          }
          if (!dart.test(canSpan)) {
            dart.throw(core.Exception.new("Widget won't fit into the page as its height (" + dart.str(child.box.height) + ") " + "exceed a page height (" + dart.str(dart.notNull(pageHeight) - dart.notNull(pageHeightMargin)) + "). " + "You probably need a SpanningWidget or use a single page layout"));
          }
          let span = SpanningWidgetL().as(child);
          let localConstraints = constraints.copyWith({maxHeight: dart.notNull(offsetStart) - dart.notNull(offsetEnd)});
          child.layout(context, localConstraints, {parentUsesSize: false});
          if (!(child.box != null)) dart.assertFailed(null, L1, 288, 16, "child.box != null");
          widgetContext = span.saveContext();
          this[_pages][$last].widgets[$add](new multi_page._MultiPageWidget.new({child: child, constraints: localConstraints, widgetContext: (t1$2 = widgetContext, t1$2 == null ? null : t1$2.clone())}));
          if (!dart.test(span.hasMoreWidgets)) {
            sameCount = 0;
            _index = _index + 1;
          }
          context = null;
          continue;
        }
        this[_pages][$last].widgets[$add](new multi_page._MultiPageWidget.new({child: child, constraints: constraints, widgetContext: SpanningWidgetL().is(child) && dart.test(canSpan) ? child.saveContext().clone() : null}));
        offsetStart = dart.notNull(offsetStart) - dart.notNull(child.box.height);
        sameCount = 0;
        _index = _index + 1;
      }
    }
    postProcess(document) {
      let t2, t1, t1$, t1$0, t2$, t1$1;
      let _margin = this.margin;
      let _mustRotate = this.mustRotate;
      let pageHeight = dart.test(_mustRotate) ? this.pageFormat.width : this.pageFormat.height;
      let pageWidth = dart.test(_mustRotate) ? this.pageFormat.height : this.pageFormat.width;
      let pageHeightMargin = dart.test(_mustRotate) ? _margin.horizontal : _margin.vertical;
      let pageWidthMargin = dart.test(_mustRotate) ? _margin.vertical : _margin.horizontal;
      let availableWidth = dart.notNull(pageWidth) - dart.notNull(pageWidthMargin);
      for (let page of this[_pages]) {
        let offsetStart = dart.notNull(pageHeight) - dart.notNull(dart.test(_mustRotate) ? dart.notNull(pageHeightMargin) - dart.notNull(_margin.bottom) : _margin.top);
        let offsetEnd = dart.test(_mustRotate) ? dart.notNull(pageHeightMargin) - dart.notNull(_margin.left) : _margin.bottom;
        if (this.pageTheme.buildBackground != null) {
          let child = (t1 = this.pageTheme, t2 = page.context, t1.buildBackground(t2));
          if (child != null) {
            child.layout(page.context, page.fullConstraints, {parentUsesSize: false});
            if (!(child.box != null)) dart.assertFailed(null, L1, 347, 18, "child.box != null");
            this[_paintChild](page.context, child, _margin.left, _margin.bottom, this.pageFormat.height);
          }
        }
        let totalFlex = 0;
        let allocatedSize = 0.0;
        let lastFlexChild = null;
        for (let widget of page.widgets) {
          let child = widget.child;
          let flex = FlexibleL().is(child) ? child.flex : 0;
          if (dart.notNull(flex) > 0) {
            totalFlex = totalFlex + dart.notNull(flex);
            lastFlexChild = child;
          } else {
            if (SpanningWidgetL().is(child) && dart.test(child.canSpan)) {
              let context = child.saveContext();
              context.apply(widget.widgetContext);
            }
            child.layout(page.context, widget.constraints, {parentUsesSize: false});
            if (!(child.box != null)) dart.assertFailed(null, L1, 369, 18, "child.box != null");
            allocatedSize = allocatedSize + dart.notNull(child.box.height);
          }
        }
        if (this.header != null) {
          let headerWidget = (t1$ = page.context, this.header(t1$));
          if (headerWidget != null) {
            headerWidget.layout(page.context, page.constraints, {parentUsesSize: false});
            if (!(headerWidget.box != null)) dart.assertFailed(null, L1, 379, 18, "headerWidget.box != null");
            offsetStart = offsetStart - dart.notNull(headerWidget.box.height);
            this[_paintChild](page.context, headerWidget, _margin.left, dart.notNull(page.offsetStart) - dart.notNull(headerWidget.box.height), this.pageFormat.height);
          }
        }
        if (this.footer != null) {
          let footerWidget = (t1$0 = page.context, this.footer(t1$0));
          if (footerWidget != null) {
            footerWidget.layout(page.context, page.constraints, {parentUsesSize: false});
            if (!(footerWidget.box != null)) dart.assertFailed(null, L1, 391, 18, "footerWidget.box != null");
            offsetEnd = dart.notNull(offsetEnd) + dart.notNull(footerWidget.box.height);
            this[_paintChild](page.context, footerWidget, _margin.left, _margin.bottom, this.pageFormat.height);
          }
        }
        let freeSpace = math.max(numL(), 0, offsetStart - dart.notNull(offsetEnd) - allocatedSize);
        let spacePerFlex = totalFlex > 0 ? freeSpace / totalFlex : 0 / 0;
        let allocatedFlexSpace = 0.0;
        let leadingSpace = 0.0;
        let betweenSpace = 0.0;
        if (totalFlex === 0) {
          let totalChildren = page.widgets[$length];
          switch (this.mainAxisAlignment) {
            case C0 || CT.C0:
            {
              leadingSpace = 0.0;
              betweenSpace = 0.0;
              break;
            }
            case C2 || CT.C2:
            {
              leadingSpace = freeSpace;
              betweenSpace = 0.0;
              break;
            }
            case C3 || CT.C3:
            {
              leadingSpace = freeSpace / 2.0;
              betweenSpace = 0.0;
              break;
            }
            case C4 || CT.C4:
            {
              leadingSpace = 0.0;
              betweenSpace = dart.notNull(totalChildren) > 1 ? freeSpace / (dart.notNull(totalChildren) - 1) : 0.0;
              break;
            }
            case C5 || CT.C5:
            {
              betweenSpace = dart.notNull(totalChildren) > 0 ? freeSpace / dart.notNull(totalChildren) : 0.0;
              leadingSpace = betweenSpace / 2.0;
              break;
            }
            case C6 || CT.C6:
            {
              betweenSpace = dart.notNull(totalChildren) > 0 ? freeSpace / (dart.notNull(totalChildren) + 1) : 0.0;
              leadingSpace = betweenSpace;
              break;
            }
          }
        }
        for (let widget of page.widgets) {
          let child = widget.child;
          let flex = FlexibleL().is(child) ? child.flex : 0;
          let fit = FlexibleL().is(child) ? child.fit : flex$.FlexFit.loose;
          if (dart.notNull(flex) > 0) {
            if (!!SpanningWidgetL().is(child)) dart.assertFailed(null, L1, 445, 18, "child is! SpanningWidget");
            let maxChildExtent = dart.equals(child, lastFlexChild) ? freeSpace - allocatedFlexSpace : spacePerFlex * dart.notNull(flex);
            let minChildExtent = null;
            switch (fit) {
              case C7 || CT.C7:
              {
                if (!(maxChildExtent < 1 / 0)) dart.assertFailed(null, L1, 452, 22, "maxChildExtent < double.infinity");
                minChildExtent = maxChildExtent;
                break;
              }
              case C8 || CT.C8:
              {
                minChildExtent = 0.0;
                break;
              }
            }
            if (!(minChildExtent != null)) dart.assertFailed(null, L1, 459, 18, "minChildExtent != null");
            let innerConstraints = new geometry.BoxConstraints.new({minWidth: widget.constraints.maxWidth, maxWidth: widget.constraints.maxWidth, minHeight: minChildExtent, maxHeight: maxChildExtent});
            child.layout(page.context, innerConstraints, {parentUsesSize: false});
            if (!(child.box != null)) dart.assertFailed(null, L1, 467, 18, "child.box != null");
            let childSize = child.box.height;
            if (!(dart.notNull(childSize) <= maxChildExtent)) dart.assertFailed(null, L1, 469, 18, "childSize <= maxChildExtent");
            allocatedSize = allocatedSize + dart.notNull(childSize);
            allocatedFlexSpace = allocatedFlexSpace + maxChildExtent;
          }
        }
        let pos = offsetStart - leadingSpace;
        for (let widget of page.widgets) {
          pos = pos - dart.notNull(widget.child.box.height);
          let x = null;
          switch (this.crossAxisAlignment) {
            case C1 || CT.C1:
            {
              x = 0.0;
              break;
            }
            case C9 || CT.C9:
            {
              x = availableWidth - dart.notNull(widget.child.box.width);
              break;
            }
            case C10 || CT.C10:
            {
              x = availableWidth / 2 - dart.notNull(widget.child.box.width) / 2;
              break;
            }
            case C11 || CT.C11:
            {
              x = 0.0;
              break;
            }
          }
          this[_paintChild](page.context, widget.child, dart.notNull(_margin.left) + dart.notNull(x), pos, this.pageFormat.height);
          pos = pos - betweenSpace;
        }
        if (this.pageTheme.buildForeground != null) {
          let child = (t1$1 = this.pageTheme, t2$ = page.context, t1$1.buildForeground(t2$));
          if (child != null) {
            child.layout(page.context, page.fullConstraints, {parentUsesSize: false});
            if (!(child.box != null)) dart.assertFailed(null, L1, 503, 18, "child.box != null");
            this[_paintChild](page.context, child, _margin.left, _margin.bottom, this.pageFormat.height);
          }
        }
      }
    }
  };
  (multi_page.MultiPage.new = function(opts) {
    let pageTheme = opts && 'pageTheme' in opts ? opts.pageTheme : null;
    let pageFormat = opts && 'pageFormat' in opts ? opts.pageFormat : null;
    let build = opts && 'build' in opts ? opts.build : null;
    let mainAxisAlignment = opts && 'mainAxisAlignment' in opts ? opts.mainAxisAlignment : C0 || CT.C0;
    let crossAxisAlignment = opts && 'crossAxisAlignment' in opts ? opts.crossAxisAlignment : C1 || CT.C1;
    let header = opts && 'header' in opts ? opts.header : null;
    let footer = opts && 'footer' in opts ? opts.footer : null;
    let theme = opts && 'theme' in opts ? opts.theme : null;
    let maxPages = opts && 'maxPages' in opts ? opts.maxPages : 20;
    let orientation = opts && 'orientation' in opts ? opts.orientation : null;
    let margin = opts && 'margin' in opts ? opts.margin : null;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    this[_pages] = JSArrayOf_MultiPageInstanceL().of([]);
    this[mainAxisAlignment$] = mainAxisAlignment;
    this[crossAxisAlignment$] = crossAxisAlignment;
    this[header$] = header;
    this[footer$] = footer;
    this[maxPages$] = maxPages;
    this[_buildList] = build;
    if (!(mainAxisAlignment != null)) dart.assertFailed(null, L1, 105, 16, "mainAxisAlignment != null");
    if (!(crossAxisAlignment != null)) dart.assertFailed(null, L1, 106, 16, "crossAxisAlignment != null");
    if (!(maxPages != null && dart.notNull(maxPages) > 0)) dart.assertFailed(null, L1, 107, 16, "maxPages != null && maxPages > 0");
    multi_page.MultiPage.__proto__.new.call(this, {pageTheme: pageTheme, pageFormat: pageFormat, margin: margin, theme: theme, orientation: orientation, textDirection: textDirection});
    ;
  }).prototype = multi_page.MultiPage.prototype;
  dart.addTypeTests(multi_page.MultiPage);
  dart.addTypeCaches(multi_page.MultiPage);
  dart.setMethodSignature(multi_page.MultiPage, () => ({
    __proto__: dart.getMethods(multi_page.MultiPage.__proto__),
    [_paintChild]: dart.fnType(dart.void, [dart.legacy(widget.Context), dart.legacy(widget.Widget), dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double)])
  }));
  dart.setLibraryUri(multi_page.MultiPage, L0);
  dart.setFieldSignature(multi_page.MultiPage, () => ({
    __proto__: dart.getFields(multi_page.MultiPage.__proto__),
    [_buildList]: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(core.List$(dart.legacy(widget.Widget))), [dart.legacy(widget.Context)]))),
    crossAxisAlignment: dart.finalFieldType(dart.legacy(flex$.CrossAxisAlignment)),
    header: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(widget.Widget), [dart.legacy(widget.Context)]))),
    footer: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(widget.Widget), [dart.legacy(widget.Context)]))),
    mainAxisAlignment: dart.finalFieldType(dart.legacy(flex$.MainAxisAlignment)),
    [_pages]: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(multi_page._MultiPageInstance)))),
    maxPages: dart.finalFieldType(dart.legacy(core.int))
  }));
  var C12;
  flex$.FlexFit = class FlexFit extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (flex$.FlexFit.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = flex$.FlexFit.prototype;
  dart.addTypeTests(flex$.FlexFit);
  dart.addTypeCaches(flex$.FlexFit);
  dart.setMethodSignature(flex$.FlexFit, () => ({
    __proto__: dart.getMethods(flex$.FlexFit.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(flex$.FlexFit, L2);
  dart.setFieldSignature(flex$.FlexFit, () => ({
    __proto__: dart.getFields(flex$.FlexFit.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(flex$.FlexFit, ['toString']);
  flex$.FlexFit.tight = C7 || CT.C7;
  flex$.FlexFit.loose = C8 || CT.C8;
  flex$.FlexFit.values = C12 || CT.C12;
  var C13;
  var C14;
  var C15;
  flex$.Axis = class Axis extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (flex$.Axis.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = flex$.Axis.prototype;
  dart.addTypeTests(flex$.Axis);
  dart.addTypeCaches(flex$.Axis);
  dart.setMethodSignature(flex$.Axis, () => ({
    __proto__: dart.getMethods(flex$.Axis.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(flex$.Axis, L2);
  dart.setFieldSignature(flex$.Axis, () => ({
    __proto__: dart.getFields(flex$.Axis.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(flex$.Axis, ['toString']);
  flex$.Axis.horizontal = C13 || CT.C13;
  flex$.Axis.vertical = C14 || CT.C14;
  flex$.Axis.values = C15 || CT.C15;
  var C16;
  var C17;
  var C18;
  flex$.MainAxisSize = class MainAxisSize extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (flex$.MainAxisSize.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = flex$.MainAxisSize.prototype;
  dart.addTypeTests(flex$.MainAxisSize);
  dart.addTypeCaches(flex$.MainAxisSize);
  dart.setMethodSignature(flex$.MainAxisSize, () => ({
    __proto__: dart.getMethods(flex$.MainAxisSize.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(flex$.MainAxisSize, L2);
  dart.setFieldSignature(flex$.MainAxisSize, () => ({
    __proto__: dart.getFields(flex$.MainAxisSize.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(flex$.MainAxisSize, ['toString']);
  flex$.MainAxisSize.min = C16 || CT.C16;
  flex$.MainAxisSize.max = C17 || CT.C17;
  flex$.MainAxisSize.values = C18 || CT.C18;
  var C19;
  flex$.MainAxisAlignment = class MainAxisAlignment extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (flex$.MainAxisAlignment.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = flex$.MainAxisAlignment.prototype;
  dart.addTypeTests(flex$.MainAxisAlignment);
  dart.addTypeCaches(flex$.MainAxisAlignment);
  dart.setMethodSignature(flex$.MainAxisAlignment, () => ({
    __proto__: dart.getMethods(flex$.MainAxisAlignment.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(flex$.MainAxisAlignment, L2);
  dart.setFieldSignature(flex$.MainAxisAlignment, () => ({
    __proto__: dart.getFields(flex$.MainAxisAlignment.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(flex$.MainAxisAlignment, ['toString']);
  flex$.MainAxisAlignment.start = C0 || CT.C0;
  flex$.MainAxisAlignment.end = C2 || CT.C2;
  flex$.MainAxisAlignment.center = C3 || CT.C3;
  flex$.MainAxisAlignment.spaceBetween = C4 || CT.C4;
  flex$.MainAxisAlignment.spaceAround = C5 || CT.C5;
  flex$.MainAxisAlignment.spaceEvenly = C6 || CT.C6;
  flex$.MainAxisAlignment.values = C19 || CT.C19;
  var C20;
  flex$.CrossAxisAlignment = class CrossAxisAlignment extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (flex$.CrossAxisAlignment.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = flex$.CrossAxisAlignment.prototype;
  dart.addTypeTests(flex$.CrossAxisAlignment);
  dart.addTypeCaches(flex$.CrossAxisAlignment);
  dart.setMethodSignature(flex$.CrossAxisAlignment, () => ({
    __proto__: dart.getMethods(flex$.CrossAxisAlignment.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(flex$.CrossAxisAlignment, L2);
  dart.setFieldSignature(flex$.CrossAxisAlignment, () => ({
    __proto__: dart.getFields(flex$.CrossAxisAlignment.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(flex$.CrossAxisAlignment, ['toString']);
  flex$.CrossAxisAlignment.start = C1 || CT.C1;
  flex$.CrossAxisAlignment.end = C9 || CT.C9;
  flex$.CrossAxisAlignment.center = C10 || CT.C10;
  flex$.CrossAxisAlignment.stretch = C11 || CT.C11;
  flex$.CrossAxisAlignment.values = C20 || CT.C20;
  var C21;
  var C22;
  var C23;
  flex$.VerticalDirection = class VerticalDirection extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (flex$.VerticalDirection.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = flex$.VerticalDirection.prototype;
  dart.addTypeTests(flex$.VerticalDirection);
  dart.addTypeCaches(flex$.VerticalDirection);
  dart.setMethodSignature(flex$.VerticalDirection, () => ({
    __proto__: dart.getMethods(flex$.VerticalDirection.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(flex$.VerticalDirection, L2);
  dart.setFieldSignature(flex$.VerticalDirection, () => ({
    __proto__: dart.getFields(flex$.VerticalDirection.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(flex$.VerticalDirection, ['toString']);
  flex$.VerticalDirection.up = C21 || CT.C21;
  flex$.VerticalDirection.down = C22 || CT.C22;
  flex$.VerticalDirection.values = C23 || CT.C23;
  flex$._FlexContext = class _FlexContext extends multi_page.WidgetContext {
    apply(other) {
      if (_FlexContextL().is(other)) {
        this.firstChild = other.firstChild;
        this.lastChild = other.lastChild;
      }
    }
    clone() {
      let t1;
      t1 = new flex$._FlexContext.new();
      return (() => {
        t1.apply(this);
        return t1;
      })();
    }
    toString() {
      return dart.str(this.runtimeType) + " first:" + dart.str(this.firstChild) + " last:" + dart.str(this.lastChild);
    }
  };
  (flex$._FlexContext.new = function() {
    this.firstChild = 0;
    this.lastChild = 0;
    ;
  }).prototype = flex$._FlexContext.prototype;
  dart.addTypeTests(flex$._FlexContext);
  dart.addTypeCaches(flex$._FlexContext);
  dart.setMethodSignature(flex$._FlexContext, () => ({
    __proto__: dart.getMethods(flex$._FlexContext.__proto__),
    apply: dart.fnType(dart.void, [dart.legacy(multi_page.WidgetContext)]),
    clone: dart.fnType(dart.legacy(multi_page.WidgetContext), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(flex$._FlexContext, L2);
  dart.setFieldSignature(flex$._FlexContext, () => ({
    __proto__: dart.getFields(flex$._FlexContext.__proto__),
    firstChild: dart.fieldType(dart.legacy(core.int)),
    lastChild: dart.fieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(flex$._FlexContext, ['toString']);
  var C24;
  var _context = dart.privateName(flex$, "_context");
  var _getIntrinsicSize = dart.privateName(flex$, "_getIntrinsicSize");
  var _getCrossSize = dart.privateName(flex$, "_getCrossSize");
  var _getMainSize = dart.privateName(flex$, "_getMainSize");
  var direction$ = dart.privateName(flex$, "Flex.direction");
  var mainAxisAlignment$0 = dart.privateName(flex$, "Flex.mainAxisAlignment");
  var mainAxisSize$ = dart.privateName(flex$, "Flex.mainAxisSize");
  var crossAxisAlignment$0 = dart.privateName(flex$, "Flex.crossAxisAlignment");
  var verticalDirection$ = dart.privateName(flex$, "Flex.verticalDirection");
  flex$.Flex = class Flex extends widget.MultiChildWidget {
    get direction() {
      return this[direction$];
    }
    set direction(value) {
      super.direction = value;
    }
    get mainAxisAlignment() {
      return this[mainAxisAlignment$0];
    }
    set mainAxisAlignment(value) {
      super.mainAxisAlignment = value;
    }
    get mainAxisSize() {
      return this[mainAxisSize$];
    }
    set mainAxisSize(value) {
      super.mainAxisSize = value;
    }
    get crossAxisAlignment() {
      return this[crossAxisAlignment$0];
    }
    set crossAxisAlignment(value) {
      super.crossAxisAlignment = value;
    }
    get verticalDirection() {
      return this[verticalDirection$];
    }
    set verticalDirection(value) {
      super.verticalDirection = value;
    }
    [_getIntrinsicSize](opts) {
      let sizingDirection = opts && 'sizingDirection' in opts ? opts.sizingDirection : null;
      let extent = opts && 'extent' in opts ? opts.extent : null;
      let childSize = opts && 'childSize' in opts ? opts.childSize : null;
      if (this.direction == sizingDirection) {
        let totalFlex = 0.0;
        let inflexibleSpace = 0.0;
        let maxFlexFractionSoFar = 0.0;
        for (let child of this.children) {
          let flex = FlexibleL().is(child) ? child.flex : 0;
          totalFlex = totalFlex + dart.notNull(flex);
          if (dart.notNull(flex) > 0) {
            let flexFraction = dart.notNull(childSize(child, extent)) / dart.notNull(flex);
            maxFlexFractionSoFar = math.max(doubleL(), maxFlexFractionSoFar, flexFraction);
          } else {
            inflexibleSpace = inflexibleSpace + dart.notNull(childSize(child, extent));
          }
        }
        return maxFlexFractionSoFar * totalFlex + inflexibleSpace;
      } else {
        let availableMainSpace = extent;
        let totalFlex = 0;
        let inflexibleSpace = 0.0;
        let maxCrossSize = 0.0;
        for (let child of this.children) {
          let flex = FlexibleL().is(child) ? child.flex : 0;
          totalFlex = totalFlex + dart.notNull(flex);
          let mainSize = null;
          let crossSize = null;
          if (flex === 0) {
            switch (this.direction) {
              case C13 || CT.C13:
              {
                mainSize = child.box.width;
                crossSize = childSize(child, mainSize);
                break;
              }
              case C14 || CT.C14:
              {
                mainSize = child.box.height;
                crossSize = childSize(child, mainSize);
                break;
              }
            }
            inflexibleSpace = inflexibleSpace + dart.notNull(mainSize);
            maxCrossSize = math.max(doubleL(), maxCrossSize, crossSize);
          }
        }
        let spacePerFlex = math.max(doubleL(), 0.0, (dart.notNull(availableMainSpace) - inflexibleSpace) / totalFlex);
        for (let child of this.children) {
          let flex = FlexibleL().is(child) ? child.flex : 0;
          if (dart.notNull(flex) > 0) {
            maxCrossSize = math.max(doubleL(), maxCrossSize, childSize(child, spacePerFlex * dart.notNull(flex)));
          }
        }
        return maxCrossSize;
      }
    }
    computeMinIntrinsicWidth(height) {
      return this[_getIntrinsicSize]({sizingDirection: flex$.Axis.horizontal, extent: height, childSize: dart.fn((child, extent) => child.box.width, WidgetLAnddoubleLTodoubleL())});
    }
    computeMaxIntrinsicWidth(height) {
      return this[_getIntrinsicSize]({sizingDirection: flex$.Axis.horizontal, extent: height, childSize: dart.fn((child, extent) => child.box.width, WidgetLAnddoubleLTodoubleL())});
    }
    computeMinIntrinsicHeight(width) {
      return this[_getIntrinsicSize]({sizingDirection: flex$.Axis.vertical, extent: width, childSize: dart.fn((child, extent) => child.box.height, WidgetLAnddoubleLTodoubleL())});
    }
    computeMaxIntrinsicHeight(width) {
      return this[_getIntrinsicSize]({sizingDirection: flex$.Axis.vertical, extent: width, childSize: dart.fn((child, extent) => child.box.height, WidgetLAnddoubleLTodoubleL())});
    }
    [_getCrossSize](child) {
      switch (this.direction) {
        case C13 || CT.C13:
        {
          return child.box.height;
        }
        case C14 || CT.C14:
        {
          return child.box.width;
        }
      }
      return null;
    }
    [_getMainSize](child) {
      switch (this.direction) {
        case C13 || CT.C13:
        {
          return child.box.width;
        }
        case C14 || CT.C14:
        {
          return child.box.height;
        }
      }
      return null;
    }
    layout(context, constraints, opts) {
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      let totalFlex = 0;
      let lastFlexChild = null;
      if (!(constraints != null)) dart.assertFailed(null, L3, 243, 12, "constraints != null");
      let maxMainSize = this.direction == flex$.Axis.horizontal ? constraints.maxWidth : constraints.maxHeight;
      let canFlex = dart.notNull(maxMainSize) < 1 / 0;
      let crossSize = 0.0;
      let allocatedSize = 0.0;
      let index = this[_context].firstChild;
      for (let child of this.children[$sublist](this[_context].firstChild)) {
        let flex = FlexibleL().is(child) ? child.flex : 0;
        let fit = FlexibleL().is(child) ? child.fit : flex$.FlexFit.loose;
        if (dart.notNull(flex) > 0) {
          if (!dart.test(dart.fn(() => {
            let dimension = this.direction == flex$.Axis.horizontal ? "width" : "height";
            if (!canFlex && (this.mainAxisSize == flex$.MainAxisSize.max || fit == flex$.FlexFit.tight)) {
              dart.throw(core.Exception.new("Flex children have non-zero flex but incoming " + dimension + " constraints are unbounded."));
            } else {
              return true;
            }
          }, VoidToboolL())())) dart.assertFailed(null, L3, 257, 16, "() {\n          final dimension = direction == Axis.horizontal ? 'width' : 'height';\n          if (!canFlex &&\n              (mainAxisSize == MainAxisSize.max || fit == FlexFit.tight)) {\n            throw Exception(\n                'Flex children have non-zero flex but incoming $dimension constraints are unbounded.');\n          } else {\n            return true;\n          }\n        }()");
          totalFlex = totalFlex + dart.notNull(flex);
        } else {
          let innerConstraints = null;
          if (this.crossAxisAlignment == flex$.CrossAxisAlignment.stretch) {
            switch (this.direction) {
              case C13 || CT.C13:
              {
                innerConstraints = new geometry.BoxConstraints.new({minHeight: constraints.maxHeight, maxHeight: constraints.maxHeight});
                break;
              }
              case C14 || CT.C14:
              {
                innerConstraints = new geometry.BoxConstraints.new({minWidth: constraints.maxWidth, maxWidth: constraints.maxWidth});
                break;
              }
            }
          } else {
            switch (this.direction) {
              case C13 || CT.C13:
              {
                innerConstraints = new geometry.BoxConstraints.new({maxHeight: constraints.maxHeight});
                break;
              }
              case C14 || CT.C14:
              {
                innerConstraints = new geometry.BoxConstraints.new({maxWidth: constraints.maxWidth});
                break;
              }
            }
          }
          child.layout(context, innerConstraints, {parentUsesSize: true});
          if (!(child.box != null)) dart.assertFailed(null, L3, 295, 16, "child.box != null");
          allocatedSize = allocatedSize + dart.notNull(this[_getMainSize](child));
          crossSize = math.max(doubleL(), crossSize, this[_getCrossSize](child));
          if (this.direction == flex$.Axis.vertical && allocatedSize > dart.notNull(constraints.maxHeight)) {
            break;
          }
        }
        lastFlexChild = child;
        index = dart.notNull(index) + 1;
      }
      this[_context].lastChild = index;
      let totalChildren = dart.notNull(this[_context].lastChild) - dart.notNull(this[_context].firstChild);
      let freeSpace = math.max(doubleL(), 0.0, dart.notNull(canFlex ? maxMainSize : 0.0) - allocatedSize);
      let allocatedFlexSpace = 0.0;
      if (totalFlex > 0) {
        let spacePerFlex = canFlex && totalFlex > 0 ? freeSpace / totalFlex : 0 / 0;
        for (let child of this.children) {
          let flex = FlexibleL().is(child) ? child.flex : 0;
          let fit = FlexibleL().is(child) ? child.fit : flex$.FlexFit.loose;
          if (dart.notNull(flex) > 0) {
            let maxChildExtent = canFlex ? dart.equals(child, lastFlexChild) ? freeSpace - allocatedFlexSpace : spacePerFlex * dart.notNull(flex) : 1 / 0;
            let minChildExtent = null;
            switch (fit) {
              case C7 || CT.C7:
              {
                if (!(maxChildExtent < 1 / 0)) dart.assertFailed(null, L3, 329, 22, "maxChildExtent < double.infinity");
                minChildExtent = maxChildExtent;
                break;
              }
              case C8 || CT.C8:
              {
                minChildExtent = 0.0;
                break;
              }
            }
            if (!(minChildExtent != null)) dart.assertFailed(null, L3, 336, 18, "minChildExtent != null");
            let innerConstraints = null;
            if (this.crossAxisAlignment == flex$.CrossAxisAlignment.stretch) {
              switch (this.direction) {
                case C13 || CT.C13:
                {
                  innerConstraints = new geometry.BoxConstraints.new({minWidth: minChildExtent, maxWidth: maxChildExtent, minHeight: constraints.maxHeight, maxHeight: constraints.maxHeight});
                  break;
                }
                case C14 || CT.C14:
                {
                  innerConstraints = new geometry.BoxConstraints.new({minWidth: constraints.maxWidth, maxWidth: constraints.maxWidth, minHeight: minChildExtent, maxHeight: maxChildExtent});
                  break;
                }
              }
            } else {
              switch (this.direction) {
                case C13 || CT.C13:
                {
                  innerConstraints = new geometry.BoxConstraints.new({minWidth: minChildExtent, maxWidth: maxChildExtent, maxHeight: constraints.maxHeight});
                  break;
                }
                case C14 || CT.C14:
                {
                  innerConstraints = new geometry.BoxConstraints.new({maxWidth: constraints.maxWidth, minHeight: minChildExtent, maxHeight: maxChildExtent});
                  break;
                }
              }
            }
            child.layout(context, innerConstraints, {parentUsesSize: true});
            if (!(child.box != null)) dart.assertFailed(null, L3, 372, 18, "child.box != null");
            let childSize = this[_getMainSize](child);
            if (!(dart.notNull(childSize) <= maxChildExtent)) dart.assertFailed(null, L3, 374, 18, "childSize <= maxChildExtent");
            allocatedSize = allocatedSize + dart.notNull(childSize);
            allocatedFlexSpace = allocatedFlexSpace + maxChildExtent;
            crossSize = math.max(doubleL(), crossSize, this[_getCrossSize](child));
          }
        }
      }
      let idealSize = canFlex && this.mainAxisSize == flex$.MainAxisSize.max ? maxMainSize : allocatedSize;
      let actualSize = null;
      let actualSizeDelta = null;
      let size = null;
      switch (this.direction) {
        case C13 || CT.C13:
        {
          size = constraints.constrain(new point.PdfPoint.new(idealSize, crossSize));
          actualSize = size.x;
          crossSize = size.y;
          break;
        }
        case C14 || CT.C14:
        {
          size = constraints.constrain(new point.PdfPoint.new(crossSize, idealSize));
          actualSize = size.y;
          crossSize = size.x;
          break;
        }
      }
      this.box = rect.PdfRect.fromPoints(point.PdfPoint.zero, size);
      actualSizeDelta = dart.notNull(actualSize) - allocatedSize;
      let remainingSpace = math.max(doubleL(), 0.0, actualSizeDelta);
      let leadingSpace = null;
      let betweenSpace = null;
      let flipMainAxis = this.verticalDirection == flex$.VerticalDirection.down && this.direction == flex$.Axis.vertical || this.verticalDirection == flex$.VerticalDirection.up && this.direction == flex$.Axis.horizontal;
      switch (this.mainAxisAlignment) {
        case C0 || CT.C0:
        {
          leadingSpace = 0.0;
          betweenSpace = 0.0;
          break;
        }
        case C2 || CT.C2:
        {
          leadingSpace = remainingSpace;
          betweenSpace = 0.0;
          break;
        }
        case C3 || CT.C3:
        {
          leadingSpace = remainingSpace / 2.0;
          betweenSpace = 0.0;
          break;
        }
        case C4 || CT.C4:
        {
          leadingSpace = 0.0;
          betweenSpace = totalChildren > 1 ? remainingSpace / (totalChildren - 1) : 0.0;
          break;
        }
        case C5 || CT.C5:
        {
          betweenSpace = totalChildren > 0 ? remainingSpace / totalChildren : 0.0;
          leadingSpace = dart.notNull(betweenSpace) / 2.0;
          break;
        }
        case C6 || CT.C6:
        {
          betweenSpace = totalChildren > 0 ? remainingSpace / (totalChildren + 1) : 0.0;
          leadingSpace = betweenSpace;
          break;
        }
      }
      let flipCrossAxis = this.verticalDirection == flex$.VerticalDirection.down && this.direction == flex$.Axis.horizontal || this.verticalDirection == flex$.VerticalDirection.up && this.direction == flex$.Axis.vertical;
      let childMainPosition = flipMainAxis ? dart.notNull(actualSize) - dart.notNull(leadingSpace) : leadingSpace;
      for (let child of this.children[$sublist](this[_context].firstChild, this[_context].lastChild)) {
        let childCrossPosition = null;
        switch (this.crossAxisAlignment) {
          case C1 || CT.C1:
          {
            childCrossPosition = flipCrossAxis ? dart.notNull(crossSize) - dart.notNull(this[_getCrossSize](child)) : 0.0;
            break;
          }
          case C9 || CT.C9:
          {
            childCrossPosition = !flipCrossAxis ? dart.notNull(crossSize) - dart.notNull(this[_getCrossSize](child)) : 0.0;
            break;
          }
          case C10 || CT.C10:
          {
            childCrossPosition = dart.notNull(crossSize) / 2.0 - dart.notNull(this[_getCrossSize](child)) / 2.0;
            break;
          }
          case C11 || CT.C11:
          {
            childCrossPosition = 0.0;
            break;
          }
        }
        if (flipMainAxis) {
          childMainPosition = dart.notNull(childMainPosition) - dart.notNull(this[_getMainSize](child));
        }
        switch (this.direction) {
          case C13 || CT.C13:
          {
            child.box = new rect.PdfRect.new(dart.notNull(this.box.x) + dart.notNull(childMainPosition), dart.notNull(this.box.y) + dart.notNull(childCrossPosition), child.box.width, child.box.height);
            break;
          }
          case C14 || CT.C14:
          {
            child.box = new rect.PdfRect.new(childCrossPosition, childMainPosition, child.box.width, child.box.height);
            break;
          }
        }
        if (flipMainAxis) {
          childMainPosition = dart.notNull(childMainPosition) - dart.notNull(betweenSpace);
        } else {
          childMainPosition = dart.notNull(childMainPosition) + (dart.notNull(this[_getMainSize](child)) + dart.notNull(betweenSpace));
        }
      }
    }
    paint(context) {
      let t1;
      super.paint(context);
      let mat = vector_math_64.Matrix4.identity();
      mat.translate(this.box.x, this.box.y);
      t1 = context.canvas;
      (() => {
        t1.saveContext();
        t1.setTransform(mat);
        return t1;
      })();
      for (let child of this.children[$sublist](this[_context].firstChild, this[_context].lastChild)) {
        child.paint(context);
      }
      context.canvas.restoreContext();
    }
    get canSpan() {
      return this.direction == flex$.Axis.vertical;
    }
    get hasMoreWidgets() {
      return true;
    }
    restoreContext(context) {
      if (_FlexContextL().is(context)) {
        this[_context].firstChild = context.lastChild;
      }
    }
    saveContext() {
      return this[_context];
    }
  };
  (flex$.Flex.new = function(opts) {
    let direction = opts && 'direction' in opts ? opts.direction : null;
    let mainAxisAlignment = opts && 'mainAxisAlignment' in opts ? opts.mainAxisAlignment : C0 || CT.C0;
    let mainAxisSize = opts && 'mainAxisSize' in opts ? opts.mainAxisSize : C17 || CT.C17;
    let crossAxisAlignment = opts && 'crossAxisAlignment' in opts ? opts.crossAxisAlignment : C10 || CT.C10;
    let verticalDirection = opts && 'verticalDirection' in opts ? opts.verticalDirection : C22 || CT.C22;
    let children = opts && 'children' in opts ? opts.children : C24 || CT.C24;
    this[_context] = new flex$._FlexContext.new();
    this[direction$] = direction;
    this[mainAxisAlignment$0] = mainAxisAlignment;
    this[mainAxisSize$] = mainAxisSize;
    this[crossAxisAlignment$0] = crossAxisAlignment;
    this[verticalDirection$] = verticalDirection;
    if (!(direction != null)) dart.assertFailed(null, L3, 95, 16, "direction != null");
    if (!(mainAxisAlignment != null)) dart.assertFailed(null, L3, 96, 16, "mainAxisAlignment != null");
    if (!(mainAxisSize != null)) dart.assertFailed(null, L3, 97, 16, "mainAxisSize != null");
    if (!(crossAxisAlignment != null)) dart.assertFailed(null, L3, 98, 16, "crossAxisAlignment != null");
    flex$.Flex.__proto__.new.call(this, {children: children});
    ;
  }).prototype = flex$.Flex.prototype;
  dart.addTypeTests(flex$.Flex);
  dart.addTypeCaches(flex$.Flex);
  flex$.Flex[dart.implements] = () => [multi_page.SpanningWidget];
  dart.setMethodSignature(flex$.Flex, () => ({
    __proto__: dart.getMethods(flex$.Flex.__proto__),
    [_getIntrinsicSize]: dart.fnType(dart.legacy(core.double), [], {childSize: dart.legacy(dart.fnType(dart.legacy(core.double), [dart.legacy(widget.Widget), dart.legacy(core.double)])), extent: dart.legacy(core.double), sizingDirection: dart.legacy(flex$.Axis)}, {}),
    computeMinIntrinsicWidth: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double)]),
    computeMaxIntrinsicWidth: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double)]),
    computeMinIntrinsicHeight: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double)]),
    computeMaxIntrinsicHeight: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double)]),
    [_getCrossSize]: dart.fnType(dart.legacy(core.double), [dart.legacy(widget.Widget)]),
    [_getMainSize]: dart.fnType(dart.legacy(core.double), [dart.legacy(widget.Widget)]),
    layout: dart.fnType(dart.void, [dart.legacy(widget.Context), dart.legacy(geometry.BoxConstraints)], {parentUsesSize: dart.legacy(core.bool)}, {}),
    restoreContext: dart.fnType(dart.void, [dart.legacy(multi_page.WidgetContext)]),
    saveContext: dart.fnType(dart.legacy(multi_page.WidgetContext), [])
  }));
  dart.setGetterSignature(flex$.Flex, () => ({
    __proto__: dart.getGetters(flex$.Flex.__proto__),
    canSpan: dart.legacy(core.bool),
    hasMoreWidgets: dart.legacy(core.bool)
  }));
  dart.setLibraryUri(flex$.Flex, L2);
  dart.setFieldSignature(flex$.Flex, () => ({
    __proto__: dart.getFields(flex$.Flex.__proto__),
    direction: dart.finalFieldType(dart.legacy(flex$.Axis)),
    mainAxisAlignment: dart.finalFieldType(dart.legacy(flex$.MainAxisAlignment)),
    mainAxisSize: dart.finalFieldType(dart.legacy(flex$.MainAxisSize)),
    crossAxisAlignment: dart.finalFieldType(dart.legacy(flex$.CrossAxisAlignment)),
    verticalDirection: dart.finalFieldType(dart.legacy(flex$.VerticalDirection)),
    [_context]: dart.finalFieldType(dart.legacy(flex$._FlexContext))
  }));
  flex$.Row = class Row extends flex$.Flex {};
  (flex$.Row.new = function(opts) {
    let mainAxisAlignment = opts && 'mainAxisAlignment' in opts ? opts.mainAxisAlignment : C0 || CT.C0;
    let mainAxisSize = opts && 'mainAxisSize' in opts ? opts.mainAxisSize : C17 || CT.C17;
    let crossAxisAlignment = opts && 'crossAxisAlignment' in opts ? opts.crossAxisAlignment : C10 || CT.C10;
    let verticalDirection = opts && 'verticalDirection' in opts ? opts.verticalDirection : C22 || CT.C22;
    let children = opts && 'children' in opts ? opts.children : C24 || CT.C24;
    flex$.Row.__proto__.new.call(this, {children: children, direction: flex$.Axis.horizontal, mainAxisAlignment: mainAxisAlignment, mainAxisSize: mainAxisSize, crossAxisAlignment: crossAxisAlignment, verticalDirection: verticalDirection});
    ;
  }).prototype = flex$.Row.prototype;
  dart.addTypeTests(flex$.Row);
  dart.addTypeCaches(flex$.Row);
  dart.setLibraryUri(flex$.Row, L2);
  flex$.Column = class Column extends flex$.Flex {};
  (flex$.Column.new = function(opts) {
    let mainAxisAlignment = opts && 'mainAxisAlignment' in opts ? opts.mainAxisAlignment : C0 || CT.C0;
    let mainAxisSize = opts && 'mainAxisSize' in opts ? opts.mainAxisSize : C17 || CT.C17;
    let crossAxisAlignment = opts && 'crossAxisAlignment' in opts ? opts.crossAxisAlignment : C10 || CT.C10;
    let verticalDirection = opts && 'verticalDirection' in opts ? opts.verticalDirection : C22 || CT.C22;
    let children = opts && 'children' in opts ? opts.children : C24 || CT.C24;
    flex$.Column.__proto__.new.call(this, {children: children, direction: flex$.Axis.vertical, mainAxisAlignment: mainAxisAlignment, mainAxisSize: mainAxisSize, crossAxisAlignment: crossAxisAlignment, verticalDirection: verticalDirection});
    ;
  }).prototype = flex$.Column.prototype;
  dart.addTypeTests(flex$.Column);
  dart.addTypeCaches(flex$.Column);
  dart.setLibraryUri(flex$.Column, L2);
  var flex$0 = dart.privateName(flex$, "Flexible.flex");
  var fit$ = dart.privateName(flex$, "Flexible.fit");
  flex$.Flexible = class Flexible extends widget.SingleChildWidget {
    get flex() {
      return this[flex$0];
    }
    set flex(value) {
      super.flex = value;
    }
    get fit() {
      return this[fit$];
    }
    set fit(value) {
      super.fit = value;
    }
    paint(context) {
      super.paint(context);
      this.paintChild(context);
    }
  };
  (flex$.Flexible.new = function(opts) {
    let flex = opts && 'flex' in opts ? opts.flex : 1;
    let fit = opts && 'fit' in opts ? opts.fit : C8 || CT.C8;
    let child = opts && 'child' in opts ? opts.child : null;
    this[flex$0] = flex;
    this[fit$] = fit;
    flex$.Flexible.__proto__.new.call(this, {child: child});
    ;
  }).prototype = flex$.Flexible.prototype;
  dart.addTypeTests(flex$.Flexible);
  dart.addTypeCaches(flex$.Flexible);
  dart.setLibraryUri(flex$.Flexible, L2);
  dart.setFieldSignature(flex$.Flexible, () => ({
    __proto__: dart.getFields(flex$.Flexible.__proto__),
    flex: dart.finalFieldType(dart.legacy(core.int)),
    fit: dart.finalFieldType(dart.legacy(flex$.FlexFit))
  }));
  flex$.Expanded = class Expanded extends flex$.Flexible {};
  (flex$.Expanded.new = function(opts) {
    let flex = opts && 'flex' in opts ? opts.flex : 1;
    let fit = opts && 'fit' in opts ? opts.fit : C7 || CT.C7;
    let child = opts && 'child' in opts ? opts.child : null;
    flex$.Expanded.__proto__.new.call(this, {child: child, flex: flex, fit: fit});
    ;
  }).prototype = flex$.Expanded.prototype;
  dart.addTypeTests(flex$.Expanded);
  dart.addTypeCaches(flex$.Expanded);
  dart.setLibraryUri(flex$.Expanded, L2);
  flex$.Spacer = class Spacer extends flex$.Flexible {};
  (flex$.Spacer.new = function(opts) {
    let flex = opts && 'flex' in opts ? opts.flex : 1;
    if (!(flex != null)) dart.assertFailed(null, L3, 593, 16, "flex != null");
    if (!(dart.notNull(flex) > 0)) dart.assertFailed(null, L3, 594, 16, "flex > 0");
    flex$.Spacer.__proto__.new.call(this, {flex: flex, fit: flex$.FlexFit.tight, child: new basic.SizedBox.shrink()});
    ;
  }).prototype = flex$.Spacer.prototype;
  dart.addTypeTests(flex$.Spacer);
  dart.addTypeCaches(flex$.Spacer);
  dart.setLibraryUri(flex$.Spacer, L2);
  var _getItem = dart.privateName(flex$, "_getItem");
  var _getSeparator = dart.privateName(flex$, "_getSeparator");
  var direction$0 = dart.privateName(flex$, "ListView.direction");
  var padding$ = dart.privateName(flex$, "ListView.padding");
  var spacing$ = dart.privateName(flex$, "ListView.spacing");
  var reverse$ = dart.privateName(flex$, "ListView.reverse");
  var itemBuilder$ = dart.privateName(flex$, "ListView.itemBuilder");
  var separatorBuilder$ = dart.privateName(flex$, "ListView.separatorBuilder");
  var children$ = dart.privateName(flex$, "ListView.children");
  var itemCount$ = dart.privateName(flex$, "ListView.itemCount");
  flex$.ListView = class ListView extends widget.StatelessWidget {
    get direction() {
      return this[direction$0];
    }
    set direction(value) {
      super.direction = value;
    }
    get padding() {
      return this[padding$];
    }
    set padding(value) {
      super.padding = value;
    }
    get spacing() {
      return this[spacing$];
    }
    set spacing(value) {
      super.spacing = value;
    }
    get reverse() {
      return this[reverse$];
    }
    set reverse(value) {
      super.reverse = value;
    }
    get itemBuilder() {
      return this[itemBuilder$];
    }
    set itemBuilder(value) {
      super.itemBuilder = value;
    }
    get separatorBuilder() {
      return this[separatorBuilder$];
    }
    set separatorBuilder(value) {
      super.separatorBuilder = value;
    }
    get children() {
      return this[children$];
    }
    set children(value) {
      super.children = value;
    }
    get itemCount() {
      return this[itemCount$];
    }
    set itemCount(value) {
      super.itemCount = value;
    }
    [_getItem](context, index) {
      let t2, t1;
      return this.children == null ? (t1 = context, t2 = index, this.itemBuilder(t1, t2)) : this.children[$_get](index);
    }
    [_getSeparator](context, index) {
      let t2, t1;
      return this.spacing == null ? (t1 = context, t2 = index, this.separatorBuilder(t1, t2)) : this.direction == flex$.Axis.vertical ? new basic.SizedBox.new({height: this.spacing}) : new basic.SizedBox.new({width: this.spacing});
    }
    build(context) {
      let _children = JSArrayOfWidgetL().of([]);
      if (dart.test(this.reverse)) {
        for (let index = dart.notNull(this.itemCount) - 1; index >= 0; index = index - 1) {
          _children[$add](this[_getItem](context, index));
          if (this.spacing !== 0 && index > 0) {
            _children[$add](this[_getSeparator](context, index));
          }
        }
      } else {
        for (let index = 0; index < dart.notNull(this.itemCount); index = index + 1) {
          _children[$add](this[_getItem](context, index));
          if (this.spacing !== 0 && index < dart.notNull(this.itemCount) - 1) {
            _children[$add](this[_getSeparator](context, index));
          }
        }
      }
      let widget = new flex$.Flex.new({direction: this.direction, mainAxisAlignment: flex$.MainAxisAlignment.start, mainAxisSize: flex$.MainAxisSize.max, crossAxisAlignment: flex$.CrossAxisAlignment.center, verticalDirection: flex$.VerticalDirection.down, children: _children});
      if (this.padding != null) {
        return new basic.Padding.new({padding: this.padding, child: widget});
      }
      return widget;
    }
  };
  (flex$.ListView.new = function(opts) {
    let direction = opts && 'direction' in opts ? opts.direction : C14 || CT.C14;
    let reverse = opts && 'reverse' in opts ? opts.reverse : false;
    let spacing = opts && 'spacing' in opts ? opts.spacing : 0;
    let padding = opts && 'padding' in opts ? opts.padding : null;
    let children = opts && 'children' in opts ? opts.children : C24 || CT.C24;
    this[direction$0] = direction;
    this[reverse$] = reverse;
    this[spacing$] = spacing;
    this[padding$] = padding;
    this[children$] = children;
    this[itemBuilder$] = null;
    this[separatorBuilder$] = null;
    this[itemCount$] = children[$length];
    flex$.ListView.__proto__.new.call(this);
    ;
  }).prototype = flex$.ListView.prototype;
  (flex$.ListView.builder = function(opts) {
    let direction = opts && 'direction' in opts ? opts.direction : C14 || CT.C14;
    let reverse = opts && 'reverse' in opts ? opts.reverse : false;
    let spacing = opts && 'spacing' in opts ? opts.spacing : 0;
    let padding = opts && 'padding' in opts ? opts.padding : null;
    let itemBuilder = opts && 'itemBuilder' in opts ? opts.itemBuilder : null;
    let itemCount = opts && 'itemCount' in opts ? opts.itemCount : null;
    this[direction$0] = direction;
    this[reverse$] = reverse;
    this[spacing$] = spacing;
    this[padding$] = padding;
    this[itemBuilder$] = itemBuilder;
    this[itemCount$] = itemCount;
    this[children$] = null;
    this[separatorBuilder$] = null;
    flex$.ListView.__proto__.new.call(this);
    ;
  }).prototype = flex$.ListView.prototype;
  (flex$.ListView.separated = function(opts) {
    let direction = opts && 'direction' in opts ? opts.direction : C14 || CT.C14;
    let reverse = opts && 'reverse' in opts ? opts.reverse : false;
    let padding = opts && 'padding' in opts ? opts.padding : null;
    let itemBuilder = opts && 'itemBuilder' in opts ? opts.itemBuilder : null;
    let separatorBuilder = opts && 'separatorBuilder' in opts ? opts.separatorBuilder : null;
    let itemCount = opts && 'itemCount' in opts ? opts.itemCount : null;
    this[direction$0] = direction;
    this[reverse$] = reverse;
    this[padding$] = padding;
    this[itemBuilder$] = itemBuilder;
    this[separatorBuilder$] = separatorBuilder;
    this[itemCount$] = itemCount;
    this[children$] = null;
    this[spacing$] = null;
    flex$.ListView.__proto__.new.call(this);
    ;
  }).prototype = flex$.ListView.prototype;
  dart.addTypeTests(flex$.ListView);
  dart.addTypeCaches(flex$.ListView);
  dart.setMethodSignature(flex$.ListView, () => ({
    __proto__: dart.getMethods(flex$.ListView.__proto__),
    [_getItem]: dart.fnType(dart.legacy(widget.Widget), [dart.legacy(widget.Context), dart.legacy(core.int)]),
    [_getSeparator]: dart.fnType(dart.legacy(widget.Widget), [dart.legacy(widget.Context), dart.legacy(core.int)]),
    build: dart.fnType(dart.legacy(widget.Widget), [dart.legacy(widget.Context)])
  }));
  dart.setLibraryUri(flex$.ListView, L2);
  dart.setFieldSignature(flex$.ListView, () => ({
    __proto__: dart.getFields(flex$.ListView.__proto__),
    direction: dart.finalFieldType(dart.legacy(flex$.Axis)),
    padding: dart.finalFieldType(dart.legacy(geometry.EdgeInsets)),
    spacing: dart.finalFieldType(dart.legacy(core.double)),
    reverse: dart.finalFieldType(dart.legacy(core.bool)),
    itemBuilder: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(widget.Widget), [dart.legacy(widget.Context), dart.legacy(core.int)]))),
    separatorBuilder: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(widget.Widget), [dart.legacy(widget.Context), dart.legacy(core.int)]))),
    children: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(widget.Widget)))),
    itemCount: dart.finalFieldType(dart.legacy(core.int))
  }));
  dart.trackLibraries("packages/pdf/src/widgets/multi_page.dart", {
    "package:pdf/src/widgets/multi_page.dart": multi_page,
    "package:pdf/src/widgets/flex.dart": flex$
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["multi_page.dart","flex.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../packages/pdf/src/widgets/multi_page.dart.lib.js"}');
  // Exports:
  return {
    src__widgets__multi_page: multi_page,
    src__widgets__flex: flex$
  };
}));

//# sourceMappingURL=multi_page.dart.lib.js.map
