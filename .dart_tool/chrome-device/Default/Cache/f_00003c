define(['dart_sdk', 'packages/flutter/src/services/system_channels.dart', 'packages/pdf/src/pdf/page_format.dart', 'packages/printing/src/raster.dart', 'packages/printing/src/printing_info.dart', 'packages/printing/src/print_job.dart', 'packages/printing/src/printer.dart', 'packages/plugin_platform_interface/plugin_platform_interface.dart'], (function load__packages__printing__src__method_channel_dart(dart_sdk, packages__flutter__src__services__system_channels$46dart, packages__pdf__src__pdf__page_format$46dart, packages__printing__src__raster$46dart, packages__printing__src__printing_info$46dart, packages__printing__src__print_job$46dart, packages__printing__src__printer$46dart, packages__plugin_platform_interface__plugin_platform_interface$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _native_typed_data = dart_sdk._native_typed_data;
  const typed_data = dart_sdk.typed_data;
  const _js_helper = dart_sdk._js_helper;
  const _interceptors = dart_sdk._interceptors;
  const ui = dart_sdk.ui;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const message_codec = packages__flutter__src__services__system_channels$46dart.src__services__message_codec;
  const platform_channel = packages__flutter__src__services__system_channels$46dart.src__services__platform_channel;
  const message_codecs = packages__flutter__src__services__system_channels$46dart.src__services__message_codecs;
  const page_format = packages__pdf__src__pdf__page_format$46dart.src__pdf__page_format;
  const raster$ = packages__printing__src__raster$46dart.src__raster;
  const printing_info = packages__printing__src__printing_info$46dart.src__printing_info;
  const print_job = packages__printing__src__print_job$46dart.src__print_job;
  const printer$ = packages__printing__src__printer$46dart.src__printer;
  const plugin_platform_interface = packages__plugin_platform_interface__plugin_platform_interface$46dart.plugin_platform_interface;
  var method_channel = Object.create(dart.library);
  var $interface = Object.create(dart.library);
  var $_get = dartx._get;
  var $remove = dartx.remove;
  var $_set = dartx._set;
  var $add = dartx.add;
  var FutureL = () => (FutureL = dart.constFn(dart.legacy(async.Future)))();
  var MethodCallL = () => (MethodCallL = dart.constFn(dart.legacy(message_codec.MethodCall)))();
  var MethodCallLToFutureL = () => (MethodCallLToFutureL = dart.constFn(dart.fnType(FutureL(), [MethodCallL()])))();
  var doubleL = () => (doubleL = dart.constFn(dart.legacy(core.double)))();
  var boolL = () => (boolL = dart.constFn(dart.legacy(core.bool)))();
  var StringL = () => (StringL = dart.constFn(dart.legacy(core.String)))();
  var Uint8ListL = () => (Uint8ListL = dart.constFn(dart.legacy(typed_data.Uint8List)))();
  var FutureOrOfUint8ListL = () => (FutureOrOfUint8ListL = dart.constFn(async.FutureOr$(Uint8ListL())))();
  var FutureOrNOfUint8ListL = () => (FutureOrNOfUint8ListL = dart.constFn(dart.nullable(FutureOrOfUint8ListL())))();
  var intL = () => (intL = dart.constFn(dart.legacy(core.int)))();
  var MapL = () => (MapL = dart.constFn(dart.legacy(core.Map)))();
  var IdentityMapOfStringL$dynamic = () => (IdentityMapOfStringL$dynamic = dart.constFn(_js_helper.IdentityMap$(StringL(), dart.dynamic)))();
  var PrintingInfoL = () => (PrintingInfoL = dart.constFn(dart.legacy(printing_info.PrintingInfo)))();
  var CompleterOfboolL = () => (CompleterOfboolL = dart.constFn(async.Completer$(boolL())))();
  var ListL = () => (ListL = dart.constFn(dart.legacy(core.List)))();
  var PrinterL = () => (PrinterL = dart.constFn(dart.legacy(printer$.Printer)))();
  var JSArrayOfPrinterL = () => (JSArrayOfPrinterL = dart.constFn(_interceptors.JSArray$(PrinterL())))();
  var ListOfPrinterL = () => (ListOfPrinterL = dart.constFn(core.List$(PrinterL())))();
  var ListLOfPrinterL = () => (ListLOfPrinterL = dart.constFn(dart.legacy(ListOfPrinterL())))();
  var CompleterOfUint8ListL = () => (CompleterOfUint8ListL = dart.constFn(async.Completer$(Uint8ListL())))();
  var PdfRasterL = () => (PdfRasterL = dart.constFn(dart.legacy(raster$.PdfRaster)))();
  var StreamControllerOfPdfRasterL = () => (StreamControllerOfPdfRasterL = dart.constFn(async.StreamController$(PdfRasterL())))();
  var PrintJobL = () => (PrintJobL = dart.constFn(dart.legacy(print_job.PrintJob)))();
  var IdentityMapOfintL$PrintJobL = () => (IdentityMapOfintL$PrintJobL = dart.constFn(_js_helper.IdentityMap$(intL(), PrintJobL())))();
  const CT = Object.create(null);
  var L0 = "package:printing/src/interface.dart";
  var L1 = "package:printing/src/method_channel.dart";
  dart.defineLazy(CT, {
    get C0() {
      return C0 = dart.fn(method_channel.MethodChannelPrinting._handleMethod, MethodCallLToFutureL());
    },
    get C3() {
      return C3 = dart.const({
        __proto__: message_codecs.StandardMessageCodec.prototype
      });
    },
    get C2() {
      return C2 = dart.const({
        __proto__: message_codecs.StandardMethodCodec.prototype,
        [StandardMethodCodec_messageCodec]: C3 || CT.C3
      });
    },
    get C1() {
      return C1 = dart.const({
        __proto__: platform_channel.MethodChannel.prototype,
        [MethodChannel__binaryMessenger]: null,
        [MethodChannel_codec]: C2 || CT.C2,
        [MethodChannel_name]: "net.nfet.printing"
      });
    }
  }, false);
  var C0;
  $interface.PrintingPlatform = class PrintingPlatform extends plugin_platform_interface.PlatformInterface {
    static get instance() {
      return $interface.PrintingPlatform._instance;
    }
    static set instance(instance) {
      plugin_platform_interface.PlatformInterface.verifyToken(instance, $interface.PrintingPlatform._token);
      $interface.PrintingPlatform._instance = instance;
    }
  };
  ($interface.PrintingPlatform.new = function() {
    $interface.PrintingPlatform.__proto__.new.call(this, {token: $interface.PrintingPlatform._token});
    ;
  }).prototype = $interface.PrintingPlatform.prototype;
  dart.addTypeTests($interface.PrintingPlatform);
  dart.addTypeCaches($interface.PrintingPlatform);
  dart.setLibraryUri($interface.PrintingPlatform, L0);
  dart.defineLazy($interface.PrintingPlatform, {
    /*$interface.PrintingPlatform._token*/get _token() {
      return new core.Object.new();
    },
    /*$interface.PrintingPlatform._instance*/get _instance() {
      return new method_channel.MethodChannelPrinting.new();
    },
    set _instance(_) {}
  }, true);
  method_channel.MethodChannelPrinting = class MethodChannelPrinting extends $interface.PrintingPlatform {
    static _handleMethod(call) {
      return async.async(dart.dynamic, function* _handleMethod() {
        let t1, t0;
        switch (call.method) {
          case "onLayout":
          {
            let job = method_channel.MethodChannelPrinting._printJobs[$_get](dart.dsend(call.arguments, '_get', ["job"]));
            let format = new page_format.PdfPageFormat.new(doubleL().as(dart.dsend(call.arguments, '_get', ["width"])), doubleL().as(dart.dsend(call.arguments, '_get', ["height"])), {marginLeft: doubleL().as(dart.dsend(call.arguments, '_get', ["marginLeft"])), marginTop: doubleL().as(dart.dsend(call.arguments, '_get', ["marginTop"])), marginRight: doubleL().as(dart.dsend(call.arguments, '_get', ["marginRight"])), marginBottom: doubleL().as(dart.dsend(call.arguments, '_get', ["marginBottom"]))});
            let bytes = (yield (t0 = job, t1 = format, t0.onLayout(t1)));
            if (bytes == null) {
              dart.throw("onLayout returned null");
            }
            return _native_typed_data.NativeUint8List.fromList(bytes);
            break;
          }
          case "onCompleted":
          {
            let completed = boolL().as(dart.dsend(call.arguments, '_get', ["completed"]));
            let error = StringL().as(dart.dsend(call.arguments, '_get', ["error"]));
            let job = method_channel.MethodChannelPrinting._printJobs[$_get](dart.dsend(call.arguments, '_get', ["job"]));
            if (dart.equals(completed, false) && error != null) {
              job.onCompleted.completeError(error);
            } else {
              job.onCompleted.complete(completed);
            }
            break;
          }
          case "onHtmlRendered":
          {
            let job = method_channel.MethodChannelPrinting._printJobs[$_get](dart.dsend(call.arguments, '_get', ["job"]));
            job.onHtmlRendered.complete(FutureOrNOfUint8ListL().as(dart.dsend(call.arguments, '_get', ["doc"])));
            break;
          }
          case "onHtmlError":
          {
            let job = method_channel.MethodChannelPrinting._printJobs[$_get](dart.dsend(call.arguments, '_get', ["job"]));
            job.onHtmlRendered.completeError(dart.dsend(call.arguments, '_get', ["error"]));
            break;
          }
          case "onPageRasterized":
          {
            let job = method_channel.MethodChannelPrinting._printJobs[$_get](dart.dsend(call.arguments, '_get', ["job"]));
            let raster = new raster$.PdfRaster.new(intL().as(dart.dsend(call.arguments, '_get', ["width"])), intL().as(dart.dsend(call.arguments, '_get', ["height"])), Uint8ListL().as(dart.dsend(call.arguments, '_get', ["image"])));
            job.onPageRasterized.add(raster);
            break;
          }
          case "onPageRasterEnd":
          {
            let job = method_channel.MethodChannelPrinting._printJobs[$_get](dart.dsend(call.arguments, '_get', ["job"]));
            yield job.onPageRasterized.close();
            method_channel.MethodChannelPrinting._printJobs[$remove](job.index);
            break;
          }
        }
      });
    }
    static _newPrintJob(job) {
      let t0;
      job.index = (t0 = method_channel.MethodChannelPrinting._jobIndex, method_channel.MethodChannelPrinting._jobIndex = dart.notNull(t0) + 1, t0);
      method_channel.MethodChannelPrinting._printJobs[$_set](job.index, job);
      return job;
    }
    info() {
      return async.async(PrintingInfoL(), function* info() {
        method_channel._channel.setMethodCallHandler(C0 || CT.C0);
        let result = null;
        try {
          result = (yield method_channel._channel.invokeMethod(MapL(), "printingInfo", new (IdentityMapOfStringL$dynamic()).new()));
        } catch (e$) {
          let e = dart.getThrown(e$);
          core.print("Error getting printing info: " + dart.str(e));
          return printing_info.PrintingInfo.unavailable;
        }
        return printing_info.PrintingInfo.fromMap(result);
      });
    }
    layoutPdf(onLayout, name, format) {
      return async.async(boolL(), function* layoutPdf() {
        let job = method_channel.MethodChannelPrinting._newPrintJob(new print_job.PrintJob.new({onCompleted: CompleterOfboolL().new(), onLayout: onLayout}));
        let params = new (IdentityMapOfStringL$dynamic()).from(["name", name, "job", job.index, "width", format.width, "height", format.height, "marginLeft", format.marginLeft, "marginTop", format.marginTop, "marginRight", format.marginRight, "marginBottom", format.marginBottom]);
        yield method_channel._channel.invokeMethod(intL(), "printPdf", params);
        try {
          return yield job.onCompleted.future;
        } finally {
          method_channel.MethodChannelPrinting._printJobs[$remove](job.index);
        }
      });
    }
    listPrinters() {
      return async.async(ListLOfPrinterL(), function* listPrinters() {
        let params = new (IdentityMapOfStringL$dynamic()).new();
        let list = (yield method_channel._channel.invokeMethod(ListL(), "listPrinters", params));
        let printers = JSArrayOfPrinterL().of([]);
        for (let printer of list) {
          printers[$add](printer$.Printer.fromMap(MapL().as(printer)));
        }
        return printers;
      });
    }
    pickPrinter(bounds) {
      return async.async(PrinterL(), function* pickPrinter() {
        let params = new (IdentityMapOfStringL$dynamic()).from(["x", bounds.left, "y", bounds.top, "w", bounds.width, "h", bounds.height]);
        let printer = (yield method_channel._channel.invokeMethod(MapL(), "pickPrinter", params));
        if (printer == null) {
          return null;
        }
        return printer$.Printer.fromMap(printer);
      });
    }
    directPrintPdf(printer, onLayout, name, format) {
      return async.async(boolL(), function* directPrintPdf() {
        let job = method_channel.MethodChannelPrinting._newPrintJob(new print_job.PrintJob.new({onCompleted: CompleterOfboolL().new()}));
        let bytes = (yield onLayout(format));
        if (bytes == null) {
          return false;
        }
        let params = new (IdentityMapOfStringL$dynamic()).from(["name", name, "printer", printer.url, "doc", bytes, "width", format.width, "height", format.height, "marginLeft", format.marginLeft, "marginTop", format.marginTop, "marginRight", format.marginRight, "marginBottom", format.marginBottom, "job", job.index]);
        yield method_channel._channel.invokeMethod(intL(), "directPrintPdf", params);
        let result = (yield job.onCompleted.future);
        method_channel.MethodChannelPrinting._printJobs[$remove](job.index);
        return result;
      });
    }
    sharePdf(bytes, filename, bounds) {
      return async.async(boolL(), function* sharePdf() {
        let params = new (IdentityMapOfStringL$dynamic()).from(["doc", _native_typed_data.NativeUint8List.fromList(bytes), "name", filename, "x", bounds.left, "y", bounds.top, "w", bounds.width, "h", bounds.height]);
        return (yield method_channel._channel.invokeMethod(intL(), "sharePdf", params)) !== 0;
      });
    }
    convertHtml(html, baseUrl, format) {
      return async.async(Uint8ListL(), function* convertHtml() {
        let job = method_channel.MethodChannelPrinting._newPrintJob(new print_job.PrintJob.new({onHtmlRendered: CompleterOfUint8ListL().new()}));
        let params = new (IdentityMapOfStringL$dynamic()).from(["html", html, "baseUrl", baseUrl, "width", format.width, "height", format.height, "marginLeft", format.marginLeft, "marginTop", format.marginTop, "marginRight", format.marginRight, "marginBottom", format.marginBottom, "job", job.index]);
        yield method_channel._channel.invokeMethod(dart.void, "convertHtml", params);
        let result = (yield job.onHtmlRendered.future);
        method_channel.MethodChannelPrinting._printJobs[$remove](job.index);
        return result;
      });
    }
    raster(document, pages, dpi) {
      let job = method_channel.MethodChannelPrinting._newPrintJob(new print_job.PrintJob.new({onPageRasterized: StreamControllerOfPdfRasterL().new()}));
      let params = new (IdentityMapOfStringL$dynamic()).from(["doc", _native_typed_data.NativeUint8List.fromList(document), "pages", pages, "scale", dart.notNull(dpi) / 72, "job", job.index]);
      method_channel._channel.invokeMethod(dart.void, "rasterPdf", params);
      return job.onPageRasterized.stream;
    }
  };
  (method_channel.MethodChannelPrinting.new = function() {
    method_channel.MethodChannelPrinting.__proto__.new.call(this);
    method_channel._channel.setMethodCallHandler(C0 || CT.C0);
  }).prototype = method_channel.MethodChannelPrinting.prototype;
  dart.addTypeTests(method_channel.MethodChannelPrinting);
  dart.addTypeCaches(method_channel.MethodChannelPrinting);
  dart.setMethodSignature(method_channel.MethodChannelPrinting, () => ({
    __proto__: dart.getMethods(method_channel.MethodChannelPrinting.__proto__),
    info: dart.fnType(dart.legacy(async.Future$(dart.legacy(printing_info.PrintingInfo))), []),
    layoutPdf: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.bool))), [dart.legacy(dart.fnType(dart.legacy(async.FutureOr$(dart.legacy(typed_data.Uint8List))), [dart.legacy(page_format.PdfPageFormat)])), dart.legacy(core.String), dart.legacy(page_format.PdfPageFormat)]),
    listPrinters: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.List$(dart.legacy(printer$.Printer))))), []),
    pickPrinter: dart.fnType(dart.legacy(async.Future$(dart.legacy(printer$.Printer))), [dart.legacy(ui.Rect)]),
    directPrintPdf: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.bool))), [dart.legacy(printer$.Printer), dart.legacy(dart.fnType(dart.legacy(async.FutureOr$(dart.legacy(typed_data.Uint8List))), [dart.legacy(page_format.PdfPageFormat)])), dart.legacy(core.String), dart.legacy(page_format.PdfPageFormat)]),
    sharePdf: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.bool))), [dart.legacy(typed_data.Uint8List), dart.legacy(core.String), dart.legacy(ui.Rect)]),
    convertHtml: dart.fnType(dart.legacy(async.Future$(dart.legacy(typed_data.Uint8List))), [dart.legacy(core.String), dart.legacy(core.String), dart.legacy(page_format.PdfPageFormat)]),
    raster: dart.fnType(dart.legacy(async.Stream$(dart.legacy(raster$.PdfRaster))), [dart.legacy(typed_data.Uint8List), dart.legacy(core.List$(dart.legacy(core.int))), dart.legacy(core.double)])
  }));
  dart.setLibraryUri(method_channel.MethodChannelPrinting, L1);
  dart.defineLazy(method_channel.MethodChannelPrinting, {
    /*method_channel.MethodChannelPrinting._printJobs*/get _printJobs() {
      return new (IdentityMapOfintL$PrintJobL()).new();
    },
    /*method_channel.MethodChannelPrinting._jobIndex*/get _jobIndex() {
      return 0;
    },
    set _jobIndex(_) {}
  }, true);
  var MethodChannel__binaryMessenger = dart.privateName(platform_channel, "MethodChannel._binaryMessenger");
  var C3;
  var StandardMethodCodec_messageCodec = dart.privateName(message_codecs, "StandardMethodCodec.messageCodec");
  var C2;
  var MethodChannel_codec = dart.privateName(platform_channel, "MethodChannel.codec");
  var MethodChannel_name = dart.privateName(platform_channel, "MethodChannel.name");
  var C1;
  dart.defineLazy(method_channel, {
    /*method_channel._channel*/get _channel() {
      return C1 || CT.C1;
    }
  }, true);
  dart.trackLibraries("packages/printing/src/method_channel.dart", {
    "package:printing/src/method_channel.dart": method_channel,
    "package:printing/src/interface.dart": $interface
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["interface.dart","method_channel.dart"],"names":[],"mappings":"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","file":"../../../../../../../../packages/printing/src/method_channel.dart.lib.js"}');
  // Exports:
  return {
    src__method_channel: method_channel,
    src__interface: $interface
  };
}));

//# sourceMappingURL=method_channel.dart.lib.js.map
