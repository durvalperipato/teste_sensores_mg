define(['dart_sdk', 'packages/printing/src/method_channel.dart', 'packages/printing/src/printing_info.dart', 'packages/printing/src/raster.dart', 'packages/pdf/src/pdf/page_format.dart', 'packages/printing/src/printer.dart', 'packages/image/src/formats/png_decoder.dart'], (function load__packages__printing__src__printing_web_dart(dart_sdk, packages__printing__src__method_channel$46dart, packages__printing__src__printing_info$46dart, packages__printing__src__raster$46dart, packages__pdf__src__pdf__page_format$46dart, packages__printing__src__printer$46dart, packages__image__src__formats__png_decoder$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const js = dart_sdk.js;
  const _interceptors = dart_sdk._interceptors;
  const async = dart_sdk.async;
  const html = dart_sdk.html;
  const _native_typed_data = dart_sdk._native_typed_data;
  const typed_data = dart_sdk.typed_data;
  const js_util = dart_sdk.js_util;
  const _internal = dart_sdk._internal;
  const ui = dart_sdk.ui;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const $interface = packages__printing__src__method_channel$46dart.src__interface;
  const printing_info = packages__printing__src__printing_info$46dart.src__printing_info;
  const raster = packages__printing__src__raster$46dart.src__raster;
  const page_format = packages__pdf__src__pdf__page_format$46dart.src__pdf__page_format;
  const printer = packages__printing__src__printer$46dart.src__printer;
  const png_decoder = packages__image__src__formats__png_decoder$46dart.src__formats__png_decoder;
  var printing_web = Object.create(dart.library);
  var $isEmpty = dartx.isEmpty;
  var $contains = dartx.contains;
  var $createElement = dartx.createElement;
  var $setAttribute = dartx.setAttribute;
  var $removeEventListener = dartx.removeEventListener;
  var $addEventListener = dartx.addEventListener;
  var $append = dartx.append;
  var $remove = dartx.remove;
  var $getContext = dartx.getContext;
  var $toInt = dartx.toInt;
  var $toBlob = dartx.toBlob;
  var $onLoadEnd = dartx.onLoadEnd;
  var $result = dartx.result;
  var $buffer = dartx.buffer;
  var $asUint8List = dartx.asUint8List;
  var StringL = () => (StringL = dart.constFn(dart.legacy(core.String)))();
  var JSArrayOfStringL = () => (JSArrayOfStringL = dart.constFn(_interceptors.JSArray$(StringL())))();
  var boolL = () => (boolL = dart.constFn(dart.legacy(core.bool)))();
  var PrintingInfoL = () => (PrintingInfoL = dart.constFn(dart.legacy(printing_info.PrintingInfo)))();
  var CompleterOfboolL = () => (CompleterOfboolL = dart.constFn(async.Completer$(boolL())))();
  var Uint8ListL = () => (Uint8ListL = dart.constFn(dart.legacy(typed_data.Uint8List)))();
  var JSArrayOfUint8ListL = () => (JSArrayOfUint8ListL = dart.constFn(_interceptors.JSArray$(Uint8ListL())))();
  var HtmlDocumentL = () => (HtmlDocumentL = dart.constFn(dart.legacy(html.HtmlDocument)))();
  var JsObjectL = () => (JsObjectL = dart.constFn(dart.legacy(js.JsObject)))();
  var EventL = () => (EventL = dart.constFn(dart.legacy(html.Event)))();
  var EventLToNull = () => (EventLToNull = dart.constFn(dart.fnType(core.Null, [EventL()])))();
  var AnchorElementL = () => (AnchorElementL = dart.constFn(dart.legacy(html.AnchorElement)))();
  var CanvasElementL = () => (CanvasElementL = dart.constFn(dart.legacy(html.CanvasElement)))();
  var CanvasRenderingContext2DL = () => (CanvasRenderingContext2DL = dart.constFn(dart.legacy(html.CanvasRenderingContext2D)))();
  var intL = () => (intL = dart.constFn(dart.legacy(core.int)))();
  var IterableOfintL = () => (IterableOfintL = dart.constFn(core.Iterable$(intL())))();
  var intLTointL = () => (intLTointL = dart.constFn(dart.fnType(intL(), [intL()])))();
  var CompleterOfvoid = () => (CompleterOfvoid = dart.constFn(async.Completer$(dart.void)))();
  var ListOfint = () => (ListOfint = dart.constFn(core.List$(core.int)))();
  var ProgressEventL = () => (ProgressEventL = dart.constFn(dart.legacy(html.ProgressEvent)))();
  var ProgressEventLToNull = () => (ProgressEventLToNull = dart.constFn(dart.fnType(core.Null, [ProgressEventL()])))();
  var PdfRasterL = () => (PdfRasterL = dart.constFn(dart.legacy(raster.PdfRaster)))();
  var _AsyncStarImplOfPdfRasterL = () => (_AsyncStarImplOfPdfRasterL = dart.constFn(async._AsyncStarImpl$(PdfRasterL())))();
  var ImageL = () => (ImageL = dart.constFn(dart.legacy(ui.Image)))();
  const CT = Object.create(null);
  var L0 = "package:printing/src/printing_web.dart";
  printing_web.PrintingPlugin = class PrintingPlugin extends $interface.PrintingPlatform {
    static registerWith(registrar) {
      $interface.PrintingPlatform.instance = new printing_web.PrintingPlugin.new();
    }
    info() {
      return async.async(PrintingInfoL(), function* info() {
        let workerSrc = js.context.callMethod("eval", JSArrayOfStringL().of(["typeof pdfjsLib !== \"undefined\" && pdfjsLib.GlobalWorkerOptions.workerSrc!=\"\";"]));
        return new printing_info.PrintingInfo.new({canPrint: true, canShare: true, canRaster: boolL().as(workerSrc)});
      });
    }
    layoutPdf(onLayout, name, format) {
      return async.async(boolL(), function* layoutPdf() {
        let t0;
        let result = (yield onLayout(format));
        if (result == null || dart.test(result[$isEmpty])) {
          return false;
        }
        let userAgent = StringL().as(dart.dsend(js.context._get("navigator"), '_get', ["userAgent"]));
        let isChrome = js.context._get("chrome") != null;
        let isSafari = js.context._get("safari") != null;
        let isMobile = userAgent[$contains]("Mobile");
        if ((isChrome || isSafari) && !isMobile) {
          let completer = CompleterOfboolL().new();
          let pdfFile = html.Blob.new(JSArrayOfUint8ListL().of([_native_typed_data.NativeUint8List.fromList(result)]), "application/pdf");
          let pdfUrl = html.Url.createObjectUrl(pdfFile);
          let doc = HtmlDocumentL().as(js.context._get("document"));
          let frame = (t0 = doc.getElementById("__net_nfet_printing__"), t0 == null ? doc[$createElement]("iframe") : t0);
          frame[$setAttribute]("style", "visibility: hidden; height: 0; width: 0; position: absolute;");
          frame[$setAttribute]("id", "__net_nfet_printing__");
          frame[$setAttribute]("src", pdfUrl);
          let load = null;
          load = dart.fn(event => {
            frame[$removeEventListener]("load", load);
            let win = JsObjectL().as(js.JsObject.fromBrowserObject(frame)._get("contentWindow"));
            frame.focus();
            win.callMethod("print");
            completer.complete(true);
          }, EventLToNull());
          frame[$addEventListener]("load", load);
          doc.body[$append](frame);
          return completer.future;
        }
        let pdfFile = html.Blob.new(JSArrayOfUint8ListL().of([_native_typed_data.NativeUint8List.fromList(result)]), "application/pdf");
        let pdfUrl = html.Url.createObjectUrl(pdfFile);
        let doc = HtmlDocumentL().as(js.context._get("document"));
        let link = AnchorElementL().as(doc[$createElement]("a"));
        link.href = pdfUrl;
        link.target = "_blank";
        link.click();
        link[$remove]();
        return true;
      });
    }
    sharePdf(bytes, filename, bounds) {
      return async.async(boolL(), function* sharePdf() {
        let pdfFile = html.Blob.new(JSArrayOfUint8ListL().of([_native_typed_data.NativeUint8List.fromList(bytes)]), "application/pdf");
        let pdfUrl = html.Url.createObjectUrl(pdfFile);
        let doc = HtmlDocumentL().as(js.context._get("document"));
        let link = AnchorElementL().as(doc[$createElement]("a"));
        link.href = pdfUrl;
        link.download = filename;
        link.click();
        link[$remove]();
        return true;
      });
    }
    convertHtml(html, baseUrl, format) {
      dart.throw(new core.UnimplementedError.new());
    }
    directPrintPdf(printer, onLayout, name, format) {
      dart.throw(new core.UnimplementedError.new());
    }
    listPrinters() {
      dart.throw(new core.UnimplementedError.new());
    }
    pickPrinter(bounds) {
      dart.throw(new core.UnimplementedError.new());
    }
    raster(document, pages, dpi) {
      return new (_AsyncStarImplOfPdfRasterL()).new(function* raster(stream) {
        let t0, t0$, t0$0, t0$1;
        let t = dart.global.pdfjsLib.getDocument((t0 = {}, (() => {
          t0.data = document;
          return t0;
        })()));
        let d = (yield js_util.promiseToFuture(dart.legacy(dart.anonymousJSType("PdfJsDoc")), t.promise));
        let numPages = d.numPages;
        let canvas = CanvasElementL().as(dart.dsend(js.context._get("document"), 'createElement', ["canvas"]));
        let context = CanvasRenderingContext2DL().as(canvas[$getContext]("2d"));
        let _pages = (t0$ = pages, t0$ == null ? IterableOfintL().generate(numPages, dart.fn(index => index, intLTointL())) : t0$);
        for (let i of _pages) {
          let page = (yield js_util.promiseToFuture(dart.legacy(dart.anonymousJSType("PdfJsPage")), d.getPage(dart.notNull(i) + 1)));
          let viewport = page.getViewport((t0$0 = {}, (() => {
            t0$0.scale = 1.5;
            return t0$0;
          })()));
          canvas.height = viewport.height[$toInt]();
          canvas.width = viewport.width[$toInt]();
          let renderContext = (t0$1 = {}, (() => {
            t0$1.canvasContext = context;
            t0$1.viewport = viewport;
            return t0$1;
          })());
          yield js_util.promiseToFuture(dart.void, page.render(renderContext).promise);
          let completer = CompleterOfvoid().new();
          let blob = (yield canvas[$toBlob]());
          let data = _internal.BytesBuilder.new();
          let r = html.FileReader.new();
          r.readAsArrayBuffer(blob);
          r[$onLoadEnd].listen(dart.fn(e => {
            data.add(ListOfint().as(r[$result]));
            completer.complete();
          }, ProgressEventLToNull()));
          yield completer.future;
          if (stream.add(new printing_web._WebPdfRaster.new(canvas.width, canvas.height, data.toBytes()))) return;
          yield;
        }
      }).stream;
    }
  };
  (printing_web.PrintingPlugin.new = function() {
    printing_web.PrintingPlugin.__proto__.new.call(this);
    ;
  }).prototype = printing_web.PrintingPlugin.prototype;
  dart.addTypeTests(printing_web.PrintingPlugin);
  dart.addTypeCaches(printing_web.PrintingPlugin);
  dart.setMethodSignature(printing_web.PrintingPlugin, () => ({
    __proto__: dart.getMethods(printing_web.PrintingPlugin.__proto__),
    info: dart.fnType(dart.legacy(async.Future$(dart.legacy(printing_info.PrintingInfo))), []),
    layoutPdf: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.bool))), [dart.legacy(dart.fnType(dart.legacy(async.FutureOr$(dart.legacy(typed_data.Uint8List))), [dart.legacy(page_format.PdfPageFormat)])), dart.legacy(core.String), dart.legacy(page_format.PdfPageFormat)]),
    sharePdf: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.bool))), [dart.legacy(typed_data.Uint8List), dart.legacy(core.String), dart.legacy(ui.Rect)]),
    convertHtml: dart.fnType(dart.legacy(async.Future$(dart.legacy(typed_data.Uint8List))), [dart.legacy(core.String), dart.legacy(core.String), dart.legacy(page_format.PdfPageFormat)]),
    directPrintPdf: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.bool))), [dart.legacy(printer.Printer), dart.legacy(dart.fnType(dart.legacy(async.FutureOr$(dart.legacy(typed_data.Uint8List))), [dart.legacy(page_format.PdfPageFormat)])), dart.legacy(core.String), dart.legacy(page_format.PdfPageFormat)]),
    listPrinters: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.List$(dart.legacy(printer.Printer))))), []),
    pickPrinter: dart.fnType(dart.legacy(async.Future$(dart.legacy(printer.Printer))), [dart.legacy(ui.Rect)]),
    raster: dart.fnType(dart.legacy(async.Stream$(dart.legacy(raster.PdfRaster))), [dart.legacy(typed_data.Uint8List), dart.legacy(core.List$(dart.legacy(core.int))), dart.legacy(core.double)])
  }));
  dart.setLibraryUri(printing_web.PrintingPlugin, L0);
  dart.defineLazy(printing_web.PrintingPlugin, {
    /*printing_web.PrintingPlugin._frameId*/get _frameId() {
      return "__net_nfet_printing__";
    }
  }, true);
  var _pixels = dart.privateName(printing_web, "_pixels");
  printing_web._WebPdfRaster = class _WebPdfRaster extends raster.PdfRaster {
    get pixels() {
      if (this[_pixels] == null) {
        let img = new png_decoder.PngDecoder.new().decodeImage(this.png);
        this[_pixels] = img.data[$buffer][$asUint8List]();
      }
      return this[_pixels];
    }
    toImage() {
      return async.async(ImageL(), (function* toImage() {
        let codec = (yield ui.instantiateImageCodec(this.png));
        let frameInfo = (yield codec.getNextFrame());
        return frameInfo.image;
      }).bind(this));
    }
    toPng() {
      return async.async(Uint8ListL(), (function* toPng() {
        return this.png;
      }).bind(this));
    }
  };
  (printing_web._WebPdfRaster.new = function(width, height, png) {
    this[_pixels] = null;
    this.png = png;
    printing_web._WebPdfRaster.__proto__.new.call(this, width, height, null);
    ;
  }).prototype = printing_web._WebPdfRaster.prototype;
  dart.addTypeTests(printing_web._WebPdfRaster);
  dart.addTypeCaches(printing_web._WebPdfRaster);
  dart.setGetterSignature(printing_web._WebPdfRaster, () => ({
    __proto__: dart.getGetters(printing_web._WebPdfRaster.__proto__),
    pixels: dart.legacy(typed_data.Uint8List)
  }));
  dart.setLibraryUri(printing_web._WebPdfRaster, L0);
  dart.setFieldSignature(printing_web._WebPdfRaster, () => ({
    __proto__: dart.getFields(printing_web._WebPdfRaster.__proto__),
    png: dart.finalFieldType(dart.legacy(typed_data.Uint8List)),
    [_pixels]: dart.fieldType(dart.legacy(typed_data.Uint8List))
  }));
  dart.trackLibraries("packages/printing/src/printing_web.dart", {
    "package:printing/src/printing_web.dart": printing_web
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["printing_web.dart"],"names":[],"mappings":"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","file":"../../../../../../../../packages/printing/src/printing_web.dart.lib.js"}');
  // Exports:
  return {
    src__printing_web: printing_web
  };
}));

//# sourceMappingURL=printing_web.dart.lib.js.map
